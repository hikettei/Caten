#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
   #+quicklisp(cl:push (cl:pathname "./") ql:*local-project-directories*)
   #+quicklisp(ql:quickload '(:caten :clingon :cl-ansi-text :caten/gguf :caten/llm :caten/benchmarks :caten/apps)))

(defpackage :caten/cli
  (:use :cl :log :cl-ansi-text))

(in-package :caten/cli)

(defparameter *argv* nil)
(defun version () (asdf:component-version (asdf:find-system "caten")))

(defun caten/llm/handler (cmd)
  (declare (ignore cmd))
  (let ((target-file (or (nth 1 *argv*)
			 (log:print-error "Specify the input file.~%Usage: caten llm [input_file] [options]"))))
    (with-progress (3 :title (format nil "Compiling ~a..." target-file))
      (print-progress "Loading the gguf model...")
      (let ((gguf-model (caten/gguf:load-gguf target-file)))
	(print-progress "Confirmed the validity of the input. version=~a" (caten/gguf:gguf-version gguf-model))
	(progn;let ((caten-model)) ;; gguf->caten
	  (print-progress "OK"))))))

(defun caten/llm ()
  (clingon:make-command
   :name "llm"
   :description (maybe-ansi white-bright "Compiles LLM")
   :handler #'caten/llm/handler))

(defun caten/test ()
  (clingon:make-command
   :name "test"
   :description (maybe-ansi white-bright "Runs test harness w/ (asdf:test-system :caten)")
   :handler #'(lambda (cmd) (declare (ignore cmd)) (asdf:test-system "caten"))))

(defun caten/docs ()
  (clingon:make-command
   :name "docs"
   :description (maybe-ansi white-bright "Builds the documentation in ./docs folder")
   :handler #'(lambda (cmd) (declare (ignore cmd))
                (ql:quickload :caten/onnx)
                (caten/common.documentation:build-docs))))

(defun caten/benchmark ()
  (clingon:make-command
   :name "benchmark"
   :description (maybe-ansi white-bright "Runs the benchmarks")
   :handler #'(lambda (cmd) (caten/benchmarks:run-benchmarks cmd))))

(defun caten/classification ()
  (clingon:make-command
   :name "classification"
   :description (maybe-ansi white-bright "Runs the onnx classification model")
   :options
   (list
    (clingon:make-option :string :description "onnx model to run" :short-name #\m :long-name "model" :key :model)
    (clingon:make-option :string :description "image path to classify" :short-name #\i :long-name "image" :key :image)
    (clingon:make-option :integer :description "expected label" :short-name #\l :long-name "label" :key :label))
   :handler
   #'(lambda (cmd)
       (ql:quickload '(:caten/onnx :caten/vision))
       (let ((model (clingon:getopt cmd :model))
             (image (clingon:getopt cmd :image))
             (label (clingon:getopt cmd :label)))
         (assert (caten/codegen/backend:jit-mode-p) () "Please run the model with JITAble device (e.g.: BACKEND=CLANG)")
         (assert (and model image label) () "Usage: caten run-classification --model <model> --image <image> --label <label>")
         (format t "Predicted: ~a~%" (uiop:symbol-call :caten/vision :run-classification model image label))))))

(defun caten/llm-example/handler (cmd)
  (let* ((model (clingon:getopt cmd :model))
         (prompt (clingon:getopt cmd :prompt))
         (type (intern (string-upcase model) :keyword)))
    (assert model () "--model <name> is required")
    (assert prompt () "--prompt <text> is required")
    (ecase type
      ((:gpt2 :gpt2-medium :gpt2-large :gpt2-xl)
       (assert (caten/codegen/backend:jit-mode-p) () "Please run the model with JITAble device (e.g.: BACKEND=CLANG)")
       (let ((model (caten/apps.gpt2:make-gpt2 type)))
         (caten/apps.gpt2:gpt2-generate model prompt :max-length (clingon:getopt cmd :max-length) :expected (clingon:getopt cmd :expected nil)))))))

(defun caten/llm-example ()
  (clingon:make-command
   :name "llm-example"
   :description (maybe-ansi white-bright "--model model_name --prompt initial_prompt")
   :options
   (list
    (clingon:make-option :string :description "model to run" :short-name #\m :long-name "model" :key :model)
    (clingon:make-option :string :description "initial-prompt" :long-name "prompt" :key :prompt)
    (clingon:make-option :string :description "expected output" :long-name "expected" :key :expected)
    (clingon:make-option :integer :description "max length" :long-name "max-length" :key :max-length :initial-value 100))
   :handler #'caten/llm-example/handler))

(defun caten/options ()
  (list))

(defun caten/command ()
  (clingon:make-command
   :name (maybe-ansi cyan "caten")
   :description (maybe-ansi white-bright "Compile + AbstracTENsor, Command Line Deep Learning Compiler")
   :version (version)
   :options (caten/options)
   :usage (maybe-ansi white (format nil "[COMMAND] [OPTIONS]~%~a" (ctx:help nil)))
   :handler #'identity
   :sub-commands (list (caten/llm) (caten/test) (caten/docs) (caten/benchmark) (caten/llm-example) (caten/classification))))

(defun main (&rest argv &aux (*argv* argv))
  (setf (ctx:getenv :COLOR) 1)
  (let ((app (caten/command)))
    (if (= (length argv) 0)
	(clingon:print-usage app t)
	(clingon:run app argv))))
;;; vim: set ft=lisp lisp:
