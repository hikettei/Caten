#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
   #+quicklisp(cl:push (cl:pathname "./") ql:*local-project-directories*)
   #+quicklisp(ql:quickload '(:caten :clingon :cl-ansi-text :caten/gguf) :silent t)
   (when (and (uiop:getenv "JIT_BACKEND")
	      (equalp (uiop:getenv "JIT_BACKEND") "METAL"))
     #+quicklisp(ql:quickload '(:caten/metal) :silent nil)))

(defpackage :caten/cli
  (:use :cl :log :cl-ansi-text))

(in-package :caten/cli)

(defparameter *argv* nil)
(defun version () (asdf:component-version (asdf:find-system "caten")))

(defun caten/llm/handler (cmd)
  (declare (ignore cmd))
  (let ((target-file (or (nth 1 *argv*)
			 (log:print-error "Specify the input file.~%Usage: caten llm [input_file] [options]"))))
    (with-progress (3 :title (format nil "Compiling ~a..." target-file))
      (print-progress "Loading the gguf model...")
      (let ((gguf-model (caten/gguf:load-gguf target-file)))
	(print-progress "Confirmed the validity of the input. version=~a" (caten/gguf:gguf-version gguf-model))
	(progn;let ((caten-model)) ;; gguf->caten
	  (print-progress "OK")
	  )))))

(defun caten/llm ()
  (clingon:make-command
   :name "llm"
   :description (maybe-ansi white-bright "Compiles LLM")
   :handler #'caten/llm/handler))

(defun caten/test ()
  (clingon:make-command
   :name "test"
   :description (maybe-ansi white-bright "Runs test harness w/ (asdf:test-system :caten)")
   :handler #'(lambda (cmd) (declare (ignore cmd)) (asdf:test-system "caten"))))

(defun caten/docs ()
  (clingon:make-command
   :name "docs"
   :description (maybe-ansi white-bright "Builds the documentation in ./docs folder")
   :handler #'(lambda (cmd) (declare (ignore cmd)) (caten/common.documentation:build-docs))))

(defun caten/options ()
  (list))

(defun caten/command ()
  (clingon:make-command
   :name (maybe-ansi cyan "caten")
   :description (maybe-ansi white-bright "Compile + AbstracTENsor, Command Line Deep Learning Compiler")
   :version (version)
   :options (caten/options)
   :usage (maybe-ansi white (format nil "[COMMAND] [OPTIONS]~%~a" (ctx:help nil)))
   :handler #'identity
   :sub-commands (list (caten/llm) (caten/test) (caten/docs))))

(defun main (&rest argv &aux (*argv* argv))
  (setf (ctx:getenv :COLOR) 1)
  (let ((app (caten/command)))
    (if (= (length argv) 0)
	(clingon:print-usage app t)
	(clingon:run app argv))))
;;; vim: set ft=lisp lisp:
