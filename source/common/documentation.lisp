(defpackage :caten/common.documentation
  (:use :cl)
  (:export
   #:build-docs
   #:define-page
   ))

(in-package :caten/common.documentation)

;; Requirement
;; Tab
;; Running Example (With hiding by tabs)

(defparameter *pages* (make-hash-table :test 'equal))
(defparameter *editing* nil)

(defun build-docs ()
  (maphash
   #'(lambda (pathname builder)
       (caten/common.logger:print-info "Building: ~a" pathname)
       (with-open-file (stream (format nil "docs/~a" pathname) :direction :output :if-exists :supersede :if-does-not-exist :create)
         (format stream "~a" (funcall (nth 2 builder)))))
   *pages*)
  (caten/common.logger:print-info "Building mkdocs.yml")
  (with-open-file (stream "mkdocs.yml" :direction :output :if-exists :supersede :if-does-not-exist :create)
    (format stream "# Auto generated by running `$ caten.ros docs`, should not modified by hand!~%")
    (format stream "site_name: Caten~%~%nav:~%")
    (let ((pages))
      (maphash
       #'(lambda (pathname builder)
           (multiple-value-bind (level title) (apply #'values builder)
             (push (list level title pathname) pages)))
       *pages*)
      (dolist (page (sort pages #'< :key #'car))
        (format stream "  - ~a: ~a~%" (nth 1 page) (nth 2 page))))
    (format stream "~%theme: lantana~%language: en~%")
    (format stream "markdown_extensions:
  - markdown_katex:
      no_inline_svg: True
      insert_fonts_css: True"))
  (caten/common.logger:print-info "Done"))

(defmacro define-page ((title filepath level) &body body)
  (declare (type string title filepath))
  `(setf (gethash ,filepath *pages*)
         (list
          ,level
          ,title
          #'(lambda ()
              (with-output-to-string (*editing*)
                ,@body)))))

(defun title (something)
  (assert *editing*)
  (format *editing* "# ~a~%~%" something))
;; [TODO] Build docs tests in CI
(define-page ("Title" "Test.md" 0)
  (title "Test")
  (format *editing* "Test"))
