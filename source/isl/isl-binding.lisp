;;; Manual changes to this file:
;;;
;;; - Change the result of isl_id_get_name to :pointer
;;; - Change the result of isl_ctx_last_error_msg to :pointer

(in-package :caten/isl)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(cffi:defcstruct #.(swig-lispify "isl_stats" 'classname)
	(#.(swig-lispify "gbr_solved_lps" 'slotname) :long))

(cffi:defcfun ("isl_stat_non_null" #.(swig-lispify "isl_stat_non_null" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (obj :pointer))

(cffi:defcfun ("isl_bool_not" #.(swig-lispify "isl_bool_not" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (b #.(swig-lispify "isl_bool" 'enumname)))

(cffi:defcfun ("isl_bool_ok" #.(swig-lispify "isl_bool_ok" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (b :int))

(cffi:defcfun ("isl_malloc_or_die" #.(swig-lispify "isl_malloc_or_die" 'function)) :pointer
  (ctx :pointer)
  (size :unsigned-long))

(cffi:defcfun ("isl_calloc_or_die" #.(swig-lispify "isl_calloc_or_die" 'function)) :pointer
  (ctx :pointer)
  (nmemb :unsigned-long)
  (size :unsigned-long))

(cffi:defcfun ("isl_realloc_or_die" #.(swig-lispify "isl_realloc_or_die" 'function)) :pointer
  (ctx :pointer)
  (ptr :pointer)
  (size :unsigned-long))

(cffi:defcfun ("isl_handle_error" #.(swig-lispify "isl_handle_error" 'function)) :void
  (ctx :pointer)
  (error #.(swig-lispify "isl_error" 'enumname))
  (msg :string)
  (file :string)
  (line :int))

(cffi:defcfun ("isl_ctx_options" #.(swig-lispify "isl_ctx_options" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_alloc_with_options" #.(swig-lispify "isl_ctx_alloc_with_options" 'function)) :pointer
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_ctx_alloc" #.(swig-lispify "isl_ctx_alloc" 'function)) :pointer)

(cffi:defcfun ("isl_ctx_peek_options" #.(swig-lispify "isl_ctx_peek_options" 'function)) :pointer
  (ctx :pointer)
  (args :pointer))

(cffi:defcfun ("isl_ctx_parse_options" #.(swig-lispify "isl_ctx_parse_options" 'function)) :int
  (ctx :pointer)
  (argc :int)
  (argv :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("isl_ctx_ref" #.(swig-lispify "isl_ctx_ref" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_deref" #.(swig-lispify "isl_ctx_deref" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_free" #.(swig-lispify "isl_ctx_free" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_abort" #.(swig-lispify "isl_ctx_abort" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_resume" #.(swig-lispify "isl_ctx_resume" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_aborted" #.(swig-lispify "isl_ctx_aborted" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_set_max_operations" #.(swig-lispify "isl_ctx_set_max_operations" 'function)) :void
  (ctx :pointer)
  (max_operations :unsigned-long))

(cffi:defcfun ("isl_ctx_get_max_operations" #.(swig-lispify "isl_ctx_get_max_operations" 'function)) :unsigned-long
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_reset_operations" #.(swig-lispify "isl_ctx_reset_operations" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error" #.(swig-lispify "isl_ctx_last_error" 'function)) #.(swig-lispify "isl_error" 'enumname)
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_msg" #.(swig-lispify "isl_ctx_last_error_msg" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_file" #.(swig-lispify "isl_ctx_last_error_file" 'function)) :string
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_last_error_line" #.(swig-lispify "isl_ctx_last_error_line" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_reset_error" #.(swig-lispify "isl_ctx_reset_error" 'function)) :void
  (ctx :pointer))

(cffi:defcfun ("isl_ctx_set_error" #.(swig-lispify "isl_ctx_set_error" 'function)) :void
  (ctx :pointer)
  (error #.(swig-lispify "isl_error" 'enumname)))

(cffi:defcstruct #.(swig-lispify "isl_maybe_ISL_TYPE" 'classname)
	(#.(swig-lispify "valid" 'slotname) #.(swig-lispify "isl_bool" 'enumname))
	(#.(swig-lispify "value" 'slotname) :pointer))

(cffi:defcfun ("isl_ast_expr_list_get_ctx" #.(swig-lispify "isl_ast_expr_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_from_ast_expr" #.(swig-lispify "isl_ast_expr_list_from_ast_expr" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_alloc" #.(swig-lispify "isl_ast_expr_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_ast_expr_list_copy" #.(swig-lispify "isl_ast_expr_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_free" #.(swig-lispify "isl_ast_expr_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_add" #.(swig-lispify "isl_ast_expr_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_insert" #.(swig-lispify "isl_ast_expr_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_drop" #.(swig-lispify "isl_ast_expr_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_ast_expr_list_clear" #.(swig-lispify "isl_ast_expr_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_swap" #.(swig-lispify "isl_ast_expr_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_ast_expr_list_reverse" #.(swig-lispify "isl_ast_expr_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_concat" #.(swig-lispify "isl_ast_expr_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_ast_expr_list_size" #.(swig-lispify "isl_ast_expr_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_n_ast_expr" #.(swig-lispify "isl_ast_expr_list_n_ast_expr" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_get_at" #.(swig-lispify "isl_ast_expr_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_expr_list_get_ast_expr" #.(swig-lispify "isl_ast_expr_list_get_ast_expr" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_expr_list_set_ast_expr" #.(swig-lispify "isl_ast_expr_list_set_ast_expr" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_ast_expr_list_foreach" #.(swig-lispify "isl_ast_expr_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_map" #.(swig-lispify "isl_ast_expr_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_sort" #.(swig-lispify "isl_ast_expr_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_list_foreach_scc" #.(swig-lispify "isl_ast_expr_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_ast_expr_list_to_str" #.(swig-lispify "isl_ast_expr_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_ast_expr_list" #.(swig-lispify "isl_printer_print_ast_expr_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_ast_expr_list_dump" #.(swig-lispify "isl_ast_expr_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_get_ctx" #.(swig-lispify "isl_ast_node_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_from_ast_node" #.(swig-lispify "isl_ast_node_list_from_ast_node" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_alloc" #.(swig-lispify "isl_ast_node_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_ast_node_list_copy" #.(swig-lispify "isl_ast_node_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_free" #.(swig-lispify "isl_ast_node_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_add" #.(swig-lispify "isl_ast_node_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_insert" #.(swig-lispify "isl_ast_node_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_drop" #.(swig-lispify "isl_ast_node_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_ast_node_list_clear" #.(swig-lispify "isl_ast_node_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_swap" #.(swig-lispify "isl_ast_node_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_ast_node_list_reverse" #.(swig-lispify "isl_ast_node_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_concat" #.(swig-lispify "isl_ast_node_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_ast_node_list_size" #.(swig-lispify "isl_ast_node_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_n_ast_node" #.(swig-lispify "isl_ast_node_list_n_ast_node" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_get_at" #.(swig-lispify "isl_ast_node_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_node_list_get_ast_node" #.(swig-lispify "isl_ast_node_list_get_ast_node" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_ast_node_list_set_ast_node" #.(swig-lispify "isl_ast_node_list_set_ast_node" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_ast_node_list_foreach" #.(swig-lispify "isl_ast_node_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_map" #.(swig-lispify "isl_ast_node_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_sort" #.(swig-lispify "isl_ast_node_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_list_foreach_scc" #.(swig-lispify "isl_ast_node_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_ast_node_list_to_str" #.(swig-lispify "isl_ast_node_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_ast_node_list" #.(swig-lispify "isl_printer_print_ast_node_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_ast_node_list_dump" #.(swig-lispify "isl_ast_node_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_get_ctx" #.(swig-lispify "isl_basic_set_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_from_basic_set" #.(swig-lispify "isl_basic_set_list_from_basic_set" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_alloc" #.(swig-lispify "isl_basic_set_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_basic_set_list_copy" #.(swig-lispify "isl_basic_set_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_free" #.(swig-lispify "isl_basic_set_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_add" #.(swig-lispify "isl_basic_set_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_insert" #.(swig-lispify "isl_basic_set_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_drop" #.(swig-lispify "isl_basic_set_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_list_clear" #.(swig-lispify "isl_basic_set_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_swap" #.(swig-lispify "isl_basic_set_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_basic_set_list_reverse" #.(swig-lispify "isl_basic_set_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_concat" #.(swig-lispify "isl_basic_set_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_basic_set_list_size" #.(swig-lispify "isl_basic_set_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_n_basic_set" #.(swig-lispify "isl_basic_set_list_n_basic_set" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_get_at" #.(swig-lispify "isl_basic_set_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_set_list_get_basic_set" #.(swig-lispify "isl_basic_set_list_get_basic_set" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_set_list_set_basic_set" #.(swig-lispify "isl_basic_set_list_set_basic_set" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_basic_set_list_foreach" #.(swig-lispify "isl_basic_set_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_map" #.(swig-lispify "isl_basic_set_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_sort" #.(swig-lispify "isl_basic_set_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_list_foreach_scc" #.(swig-lispify "isl_basic_set_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_basic_set_list_to_str" #.(swig-lispify "isl_basic_set_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_basic_set_list" #.(swig-lispify "isl_printer_print_basic_set_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_set_list_dump" #.(swig-lispify "isl_basic_set_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_set_list_get_ctx" #.(swig-lispify "isl_set_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_from_set" #.(swig-lispify "isl_set_list_from_set" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_set_list_alloc" #.(swig-lispify "isl_set_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_set_list_copy" #.(swig-lispify "isl_set_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_free" #.(swig-lispify "isl_set_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_add" #.(swig-lispify "isl_set_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_set_list_insert" #.(swig-lispify "isl_set_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_set_list_drop" #.(swig-lispify "isl_set_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_list_clear" #.(swig-lispify "isl_set_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_swap" #.(swig-lispify "isl_set_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_set_list_reverse" #.(swig-lispify "isl_set_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_concat" #.(swig-lispify "isl_set_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_set_list_size" #.(swig-lispify "isl_set_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_set_list_n_set" #.(swig-lispify "isl_set_list_n_set" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_set_list_get_at" #.(swig-lispify "isl_set_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_set_list_get_set" #.(swig-lispify "isl_set_list_get_set" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_set_list_set_set" #.(swig-lispify "isl_set_list_set_set" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_set_list_foreach" #.(swig-lispify "isl_set_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_map" #.(swig-lispify "isl_set_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_sort" #.(swig-lispify "isl_set_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_list_foreach_scc" #.(swig-lispify "isl_set_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_set_list_to_str" #.(swig-lispify "isl_set_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_set_list" #.(swig-lispify "isl_printer_print_set_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_list_dump" #.(swig-lispify "isl_set_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_aff_zero_on_domain" #.(swig-lispify "isl_aff_zero_on_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_aff_val_on_domain_space" #.(swig-lispify "isl_aff_val_on_domain_space" 'function)) :pointer
  (space :pointer)
  (val :pointer))

(cffi:defcfun ("isl_aff_val_on_domain" #.(swig-lispify "isl_aff_val_on_domain" 'function)) :pointer
  (ls :pointer)
  (val :pointer))

(cffi:defcfun ("isl_aff_var_on_domain" #.(swig-lispify "isl_aff_var_on_domain" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_aff_nan_on_domain" #.(swig-lispify "isl_aff_nan_on_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_aff_param_on_domain_space_id" #.(swig-lispify "isl_aff_param_on_domain_space_id" 'function)) :pointer
  (space :pointer)
  (id :pointer))

(cffi:defcfun ("isl_aff_copy" #.(swig-lispify "isl_aff_copy" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_free" #.(swig-lispify "isl_aff_free" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_ctx" #.(swig-lispify "isl_aff_get_ctx" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_hash" #.(swig-lispify "isl_aff_get_hash" 'function)) :unsigned-int
  (aff :pointer))

(cffi:defcfun ("isl_aff_involves_locals" #.(swig-lispify "isl_aff_involves_locals" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff :pointer))

(cffi:defcfun ("isl_aff_dim" #.(swig-lispify "isl_aff_dim" 'function)) :int
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_aff_involves_dims" #.(swig-lispify "isl_aff_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_get_domain_space" #.(swig-lispify "isl_aff_get_domain_space" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_space" #.(swig-lispify "isl_aff_get_space" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_domain_local_space" #.(swig-lispify "isl_aff_get_domain_local_space" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_local_space" #.(swig-lispify "isl_aff_get_local_space" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_dim_name" #.(swig-lispify "isl_aff_get_dim_name" 'function)) :string
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_aff_get_constant_val" #.(swig-lispify "isl_aff_get_constant_val" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_coefficient_val" #.(swig-lispify "isl_aff_get_coefficient_val" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int))

(cffi:defcfun ("isl_aff_coefficient_sgn" #.(swig-lispify "isl_aff_coefficient_sgn" 'function)) :int
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int))

(cffi:defcfun ("isl_aff_get_denominator_val" #.(swig-lispify "isl_aff_get_denominator_val" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_set_constant_si" #.(swig-lispify "isl_aff_set_constant_si" 'function)) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_set_constant_val" #.(swig-lispify "isl_aff_set_constant_val" 'function)) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_set_coefficient_si" #.(swig-lispify "isl_aff_set_coefficient_si" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_aff_set_coefficient_val" #.(swig-lispify "isl_aff_set_coefficient_val" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_aff_add_constant_si" #.(swig-lispify "isl_aff_add_constant_si" 'function)) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_add_constant_val" #.(swig-lispify "isl_aff_add_constant_val" 'function)) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_add_constant_num_si" #.(swig-lispify "isl_aff_add_constant_num_si" 'function)) :pointer
  (aff :pointer)
  (v :int))

(cffi:defcfun ("isl_aff_add_coefficient_si" #.(swig-lispify "isl_aff_add_coefficient_si" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_aff_add_coefficient_val" #.(swig-lispify "isl_aff_add_coefficient_val" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_aff_is_cst" #.(swig-lispify "isl_aff_is_cst" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff :pointer))

(cffi:defcfun ("isl_aff_set_tuple_id" #.(swig-lispify "isl_aff_set_tuple_id" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_aff_set_dim_name" #.(swig-lispify "isl_aff_set_dim_name" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_aff_set_dim_id" #.(swig-lispify "isl_aff_set_dim_id" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_aff_find_dim_by_name" #.(swig-lispify "isl_aff_find_dim_by_name" 'function)) :int
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_aff_plain_is_equal" #.(swig-lispify "isl_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_plain_is_zero" #.(swig-lispify "isl_aff_plain_is_zero" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff :pointer))

(cffi:defcfun ("isl_aff_is_nan" #.(swig-lispify "isl_aff_is_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (aff :pointer))

(cffi:defcfun ("isl_aff_get_div" #.(swig-lispify "isl_aff_get_div" 'function)) :pointer
  (aff :pointer)
  (pos :int))

(cffi:defcfun ("isl_aff_from_range" #.(swig-lispify "isl_aff_from_range" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_neg" #.(swig-lispify "isl_aff_neg" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_ceil" #.(swig-lispify "isl_aff_ceil" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_floor" #.(swig-lispify "isl_aff_floor" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_mod_val" #.(swig-lispify "isl_aff_mod_val" 'function)) :pointer
  (aff :pointer)
  (mod :pointer))

(cffi:defcfun ("isl_aff_mul" #.(swig-lispify "isl_aff_mul" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_div" #.(swig-lispify "isl_aff_div" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_add" #.(swig-lispify "isl_aff_add" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_sub" #.(swig-lispify "isl_aff_sub" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_scale_val" #.(swig-lispify "isl_aff_scale_val" 'function)) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_scale_down_ui" #.(swig-lispify "isl_aff_scale_down_ui" 'function)) :pointer
  (aff :pointer)
  (f :unsigned-int))

(cffi:defcfun ("isl_aff_scale_down_val" #.(swig-lispify "isl_aff_scale_down_val" 'function)) :pointer
  (aff :pointer)
  (v :pointer))

(cffi:defcfun ("isl_aff_insert_dims" #.(swig-lispify "isl_aff_insert_dims" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_add_dims" #.(swig-lispify "isl_aff_add_dims" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_move_dims" #.(swig-lispify "isl_aff_move_dims" 'function)) :pointer
  (aff :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_drop_dims" #.(swig-lispify "isl_aff_drop_dims" 'function)) :pointer
  (aff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_project_domain_on_params" #.(swig-lispify "isl_aff_project_domain_on_params" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_unbind_params_insert_domain" #.(swig-lispify "isl_aff_unbind_params_insert_domain" 'function)) :pointer
  (aff :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_aff_align_params" #.(swig-lispify "isl_aff_align_params" 'function)) :pointer
  (aff :pointer)
  (model :pointer))

(cffi:defcfun ("isl_aff_gist" #.(swig-lispify "isl_aff_gist" 'function)) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_aff_gist_params" #.(swig-lispify "isl_aff_gist_params" 'function)) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_aff_eval" #.(swig-lispify "isl_aff_eval" 'function)) :pointer
  (aff :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_aff_pullback_aff" #.(swig-lispify "isl_aff_pullback_aff" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_pullback_multi_aff" #.(swig-lispify "isl_aff_pullback_multi_aff" 'function)) :pointer
  (aff :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_aff_zero_basic_set" #.(swig-lispify "isl_aff_zero_basic_set" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_neg_basic_set" #.(swig-lispify "isl_aff_neg_basic_set" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_aff_eq_basic_set" #.(swig-lispify "isl_aff_eq_basic_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_eq_set" #.(swig-lispify "isl_aff_eq_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ne_set" #.(swig-lispify "isl_aff_ne_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_le_basic_set" #.(swig-lispify "isl_aff_le_basic_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_le_set" #.(swig-lispify "isl_aff_le_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_lt_basic_set" #.(swig-lispify "isl_aff_lt_basic_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_lt_set" #.(swig-lispify "isl_aff_lt_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ge_basic_set" #.(swig-lispify "isl_aff_ge_basic_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_ge_set" #.(swig-lispify "isl_aff_ge_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_gt_basic_set" #.(swig-lispify "isl_aff_gt_basic_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_gt_set" #.(swig-lispify "isl_aff_gt_set" 'function)) :pointer
  (aff1 :pointer)
  (aff2 :pointer))

(cffi:defcfun ("isl_aff_bind_id" #.(swig-lispify "isl_aff_bind_id" 'function)) :pointer
  (aff :pointer)
  (id :pointer))

(cffi:defcfun ("isl_aff_read_from_str" #.(swig-lispify "isl_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_aff_to_str" #.(swig-lispify "isl_aff_to_str" 'function)) :string
  (aff :pointer))

(cffi:defcfun ("isl_printer_print_aff" #.(swig-lispify "isl_printer_print_aff" 'function)) :pointer
  (p :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_aff_dump" #.(swig-lispify "isl_aff_dump" 'function)) :void
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_get_ctx" #.(swig-lispify "isl_pw_aff_get_ctx" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_get_hash" #.(swig-lispify "isl_pw_aff_get_hash" 'function)) :unsigned-int
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_get_domain_space" #.(swig-lispify "isl_pw_aff_get_domain_space" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_get_space" #.(swig-lispify "isl_pw_aff_get_space" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_from_aff" #.(swig-lispify "isl_pw_aff_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_empty" #.(swig-lispify "isl_pw_aff_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_aff_alloc" #.(swig-lispify "isl_pw_aff_alloc" 'function)) :pointer
  (set :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_pw_aff_zero_on_domain" #.(swig-lispify "isl_pw_aff_zero_on_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_pw_aff_var_on_domain" #.(swig-lispify "isl_pw_aff_var_on_domain" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_nan_on_domain" #.(swig-lispify "isl_pw_aff_nan_on_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_pw_aff_val_on_domain" #.(swig-lispify "isl_pw_aff_val_on_domain" 'function)) :pointer
  (domain :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_aff_param_on_domain_id" #.(swig-lispify "isl_pw_aff_param_on_domain_id" 'function)) :pointer
  (domain :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_indicator_function" #.(swig-lispify "isl_set_indicator_function" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_get_dim_name" #.(swig-lispify "isl_pw_aff_get_dim_name" 'function)) :string
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_has_dim_id" #.(swig-lispify "isl_pw_aff_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_get_dim_id" #.(swig-lispify "isl_pw_aff_get_dim_id" 'function)) :pointer
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_aff_set_dim_id" #.(swig-lispify "isl_pw_aff_set_dim_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_find_dim_by_name" #.(swig-lispify "isl_pw_aff_find_dim_by_name" 'function)) :int
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_pw_aff_is_empty" #.(swig-lispify "isl_pw_aff_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_involves_nan" #.(swig-lispify "isl_pw_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_plain_cmp" #.(swig-lispify "isl_pw_aff_plain_cmp" 'function)) :int
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_plain_is_equal" #.(swig-lispify "isl_pw_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_is_equal" #.(swig-lispify "isl_pw_aff_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_min" #.(swig-lispify "isl_pw_aff_union_min" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_max" #.(swig-lispify "isl_pw_aff_union_max" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_union_add" #.(swig-lispify "isl_pw_aff_union_add" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_copy" #.(swig-lispify "isl_pw_aff_copy" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_free" #.(swig-lispify "isl_pw_aff_free" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_dim" #.(swig-lispify "isl_pw_aff_dim" 'function)) :int
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_aff_involves_param_id" #.(swig-lispify "isl_pw_aff_involves_param_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_involves_dims" #.(swig-lispify "isl_pw_aff_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_is_cst" #.(swig-lispify "isl_pw_aff_is_cst" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_project_domain_on_params" #.(swig-lispify "isl_pw_aff_project_domain_on_params" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_align_params" #.(swig-lispify "isl_pw_aff_align_params" 'function)) :pointer
  (pwaff :pointer)
  (model :pointer))

(cffi:defcfun ("isl_pw_aff_drop_unused_params" #.(swig-lispify "isl_pw_aff_drop_unused_params" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_has_tuple_id" #.(swig-lispify "isl_pw_aff_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_aff_get_tuple_id" #.(swig-lispify "isl_pw_aff_get_tuple_id" 'function)) :pointer
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_aff_set_tuple_id" #.(swig-lispify "isl_pw_aff_set_tuple_id" 'function)) :pointer
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_reset_tuple_id" #.(swig-lispify "isl_pw_aff_reset_tuple_id" 'function)) :pointer
  (pa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_aff_reset_user" #.(swig-lispify "isl_pw_aff_reset_user" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_params" #.(swig-lispify "isl_pw_aff_params" 'function)) :pointer
  (pwa :pointer))

(cffi:defcfun ("isl_pw_aff_domain" #.(swig-lispify "isl_pw_aff_domain" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_from_range" #.(swig-lispify "isl_pw_aff_from_range" 'function)) :pointer
  (pwa :pointer))

(cffi:defcfun ("isl_pw_aff_min" #.(swig-lispify "isl_pw_aff_min" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_max" #.(swig-lispify "isl_pw_aff_max" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_mul" #.(swig-lispify "isl_pw_aff_mul" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_div" #.(swig-lispify "isl_pw_aff_div" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_add" #.(swig-lispify "isl_pw_aff_add" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_sub" #.(swig-lispify "isl_pw_aff_sub" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_neg" #.(swig-lispify "isl_pw_aff_neg" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_ceil" #.(swig-lispify "isl_pw_aff_ceil" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_floor" #.(swig-lispify "isl_pw_aff_floor" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_mod_val" #.(swig-lispify "isl_pw_aff_mod_val" 'function)) :pointer
  (pa :pointer)
  (mod :pointer))

(cffi:defcfun ("isl_pw_aff_tdiv_q" #.(swig-lispify "isl_pw_aff_tdiv_q" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_tdiv_r" #.(swig-lispify "isl_pw_aff_tdiv_r" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_params" #.(swig-lispify "isl_pw_aff_intersect_params" 'function)) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain" #.(swig-lispify "isl_pw_aff_intersect_domain" 'function)) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain_wrapped_domain" #.(swig-lispify "isl_pw_aff_intersect_domain_wrapped_domain" 'function)) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_intersect_domain_wrapped_range" #.(swig-lispify "isl_pw_aff_intersect_domain_wrapped_range" 'function)) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_subtract_domain" #.(swig-lispify "isl_pw_aff_subtract_domain" 'function)) :pointer
  (pa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_aff_cond" #.(swig-lispify "isl_pw_aff_cond" 'function)) :pointer
  (cond :pointer)
  (pwaff_true :pointer)
  (pwaff_false :pointer))

(cffi:defcfun ("isl_pw_aff_scale_val" #.(swig-lispify "isl_pw_aff_scale_val" 'function)) :pointer
  (pa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_aff_scale_down_val" #.(swig-lispify "isl_pw_aff_scale_down_val" 'function)) :pointer
  (pa :pointer)
  (f :pointer))

(cffi:defcfun ("isl_pw_aff_insert_dims" #.(swig-lispify "isl_pw_aff_insert_dims" 'function)) :pointer
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_add_dims" #.(swig-lispify "isl_pw_aff_add_dims" 'function)) :pointer
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_move_dims" #.(swig-lispify "isl_pw_aff_move_dims" 'function)) :pointer
  (pa :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_drop_dims" #.(swig-lispify "isl_pw_aff_drop_dims" 'function)) :pointer
  (pwaff :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_coalesce" #.(swig-lispify "isl_pw_aff_coalesce" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_aff_gist" #.(swig-lispify "isl_pw_aff_gist" 'function)) :pointer
  (pwaff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_aff_gist_params" #.(swig-lispify "isl_pw_aff_gist_params" 'function)) :pointer
  (pwaff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_aff_eval" #.(swig-lispify "isl_pw_aff_eval" 'function)) :pointer
  (pa :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_multi_aff" #.(swig-lispify "isl_pw_aff_pullback_multi_aff" 'function)) :pointer
  (pa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_pw_multi_aff" #.(swig-lispify "isl_pw_aff_pullback_pw_multi_aff" 'function)) :pointer
  (pa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_pw_aff_pullback_multi_pw_aff" #.(swig-lispify "isl_pw_aff_pullback_multi_pw_aff" 'function)) :pointer
  (pa :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_pw_aff_n_piece" #.(swig-lispify "isl_pw_aff_n_piece" 'function)) :int
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_foreach_piece" #.(swig-lispify "isl_pw_aff_foreach_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pwaff :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_isa_aff" #.(swig-lispify "isl_pw_aff_isa_aff" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_as_aff" #.(swig-lispify "isl_pw_aff_as_aff" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_set_from_pw_aff" #.(swig-lispify "isl_set_from_pw_aff" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_map_from_pw_aff" #.(swig-lispify "isl_map_from_pw_aff" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_pos_set" #.(swig-lispify "isl_pw_aff_pos_set" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_aff_nonneg_set" #.(swig-lispify "isl_pw_aff_nonneg_set" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_zero_set" #.(swig-lispify "isl_pw_aff_zero_set" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_non_zero_set" #.(swig-lispify "isl_pw_aff_non_zero_set" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_eq_set" #.(swig-lispify "isl_pw_aff_eq_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_ne_set" #.(swig-lispify "isl_pw_aff_ne_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_le_set" #.(swig-lispify "isl_pw_aff_le_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_lt_set" #.(swig-lispify "isl_pw_aff_lt_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_ge_set" #.(swig-lispify "isl_pw_aff_ge_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_gt_set" #.(swig-lispify "isl_pw_aff_gt_set" 'function)) :pointer
  (pwaff1 :pointer)
  (pwaff2 :pointer))

(cffi:defcfun ("isl_pw_aff_eq_map" #.(swig-lispify "isl_pw_aff_eq_map" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_lt_map" #.(swig-lispify "isl_pw_aff_lt_map" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_gt_map" #.(swig-lispify "isl_pw_aff_gt_map" 'function)) :pointer
  (pa1 :pointer)
  (pa2 :pointer))

(cffi:defcfun ("isl_pw_aff_bind_domain" #.(swig-lispify "isl_pw_aff_bind_domain" 'function)) :pointer
  (pa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_aff_bind_domain_wrapped_domain" #.(swig-lispify "isl_pw_aff_bind_domain_wrapped_domain" 'function)) :pointer
  (pa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_aff_bind_id" #.(swig-lispify "isl_pw_aff_bind_id" 'function)) :pointer
  (pa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_aff_read_from_str" #.(swig-lispify "isl_pw_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_aff_to_str" #.(swig-lispify "isl_pw_aff_to_str" 'function)) :string
  (pa :pointer))

(cffi:defcfun ("isl_printer_print_pw_aff" #.(swig-lispify "isl_printer_print_pw_aff" 'function)) :pointer
  (p :pointer)
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_dump" #.(swig-lispify "isl_pw_aff_dump" 'function)) :void
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_aff_list_min" #.(swig-lispify "isl_pw_aff_list_min" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_max" #.(swig-lispify "isl_pw_aff_list_max" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_eq_set" #.(swig-lispify "isl_pw_aff_list_eq_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_ne_set" #.(swig-lispify "isl_pw_aff_list_ne_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_le_set" #.(swig-lispify "isl_pw_aff_list_le_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_lt_set" #.(swig-lispify "isl_pw_aff_list_lt_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_ge_set" #.(swig-lispify "isl_pw_aff_list_ge_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_gt_set" #.(swig-lispify "isl_pw_aff_list_gt_set" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_multi_aff_get_ctx" #.(swig-lispify "isl_multi_aff_get_ctx" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_space" #.(swig-lispify "isl_multi_aff_get_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_domain_space" #.(swig-lispify "isl_multi_aff_get_domain_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_from_aff_list" #.(swig-lispify "isl_multi_aff_from_aff_list" 'function)) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_aff_copy" #.(swig-lispify "isl_multi_aff_copy" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_free" #.(swig-lispify "isl_multi_aff_free" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_plain_is_equal" #.(swig-lispify "isl_multi_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_reset_user" #.(swig-lispify "isl_multi_aff_reset_user" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_size" #.(swig-lispify "isl_multi_aff_size" 'function)) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_get_at" #.(swig-lispify "isl_multi_aff_get_at" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_aff_get_aff" #.(swig-lispify "isl_multi_aff_get_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_aff_set_at" #.(swig-lispify "isl_multi_aff_set_at" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_aff_set_aff" #.(swig-lispify "isl_multi_aff_set_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_aff_range_splice" #.(swig-lispify "isl_multi_aff_range_splice" 'function)) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_flatten_range" #.(swig-lispify "isl_multi_aff_flatten_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_flat_range_product" #.(swig-lispify "isl_multi_aff_flat_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_range_product" #.(swig-lispify "isl_multi_aff_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_factor_range" #.(swig-lispify "isl_multi_aff_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_is_wrapping" #.(swig-lispify "isl_multi_aff_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_factor_domain" #.(swig-lispify "isl_multi_aff_range_factor_domain" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_range_factor_range" #.(swig-lispify "isl_multi_aff_range_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_align_params" #.(swig-lispify "isl_multi_aff_align_params" 'function)) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_aff_from_range" #.(swig-lispify "isl_multi_aff_from_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_identity_multi_aff" #.(swig-lispify "isl_multi_aff_identity_multi_aff" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_identity" #.(swig-lispify "isl_multi_aff_identity" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_identity_on_domain_space" #.(swig-lispify "isl_multi_aff_identity_on_domain_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_plain_cmp" #.(swig-lispify "isl_multi_aff_plain_cmp" 'function)) :int
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_scale_val" #.(swig-lispify "isl_multi_aff_scale_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_aff_scale_down_val" #.(swig-lispify "isl_multi_aff_scale_down_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_aff_scale_multi_val" #.(swig-lispify "isl_multi_aff_scale_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_scale_down_multi_val" #.(swig-lispify "isl_multi_aff_scale_down_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_mod_multi_val" #.(swig-lispify "isl_multi_aff_mod_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_add" #.(swig-lispify "isl_multi_aff_add" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_sub" #.(swig-lispify "isl_multi_aff_sub" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_neg" #.(swig-lispify "isl_multi_aff_neg" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_zero" #.(swig-lispify "isl_multi_aff_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_involves_nan" #.(swig-lispify "isl_multi_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_dim" #.(swig-lispify "isl_multi_aff_dim" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_aff_drop_dims" #.(swig-lispify "isl_multi_aff_drop_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_involves_dims" #.(swig-lispify "isl_multi_aff_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_insert_dims" #.(swig-lispify "isl_multi_aff_insert_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_add_dims" #.(swig-lispify "isl_multi_aff_add_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_project_domain_on_params" #.(swig-lispify "isl_multi_aff_project_domain_on_params" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_involves_locals" #.(swig-lispify "isl_multi_aff_involves_locals" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_aff_find_dim_by_name" #.(swig-lispify "isl_multi_aff_find_dim_by_name" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_multi_aff_find_dim_by_id" #.(swig-lispify "isl_multi_aff_find_dim_by_id" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_get_dim_id" #.(swig-lispify "isl_multi_aff_get_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_aff_set_dim_name" #.(swig-lispify "isl_multi_aff_set_dim_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_aff_set_dim_id" #.(swig-lispify "isl_multi_aff_set_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_get_tuple_name" #.(swig-lispify "isl_multi_aff_get_tuple_name" 'function)) :string
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_aff_has_tuple_id" #.(swig-lispify "isl_multi_aff_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_aff_get_tuple_id" #.(swig-lispify "isl_multi_aff_get_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_aff_set_tuple_name" #.(swig-lispify "isl_multi_aff_set_tuple_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_multi_aff_set_tuple_id" #.(swig-lispify "isl_multi_aff_set_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_aff_reset_tuple_id" #.(swig-lispify "isl_multi_aff_reset_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_aff_product" #.(swig-lispify "isl_multi_aff_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_splice" #.(swig-lispify "isl_multi_aff_splice" 'function)) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_aff_bind_domain" #.(swig-lispify "isl_multi_aff_bind_domain" 'function)) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_bind_domain_wrapped_domain" #.(swig-lispify "isl_multi_aff_bind_domain_wrapped_domain" 'function)) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_from_aff" #.(swig-lispify "isl_multi_aff_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_multi_aff_domain_map" #.(swig-lispify "isl_multi_aff_domain_map" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_range_map" #.(swig-lispify "isl_multi_aff_range_map" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_aff_project_out_map" #.(swig-lispify "isl_multi_aff_project_out_map" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_multi_val_on_space" #.(swig-lispify "isl_multi_aff_multi_val_on_space" 'function)) :pointer
  (space :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_aff_floor" #.(swig-lispify "isl_multi_aff_floor" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_aff_gist_params" #.(swig-lispify "isl_multi_aff_gist_params" 'function)) :pointer
  (maff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_aff_gist" #.(swig-lispify "isl_multi_aff_gist" 'function)) :pointer
  (maff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_aff_lift" #.(swig-lispify "isl_multi_aff_lift" 'function)) :pointer
  (maff :pointer)
  (ls :pointer))

(cffi:defcfun ("isl_multi_aff_pullback_multi_aff" #.(swig-lispify "isl_multi_aff_pullback_multi_aff" 'function)) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_move_dims" #.(swig-lispify "isl_multi_aff_move_dims" 'function)) :pointer
  (ma :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_aff_lex_lt_set" #.(swig-lispify "isl_multi_aff_lex_lt_set" 'function)) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_le_set" #.(swig-lispify "isl_multi_aff_lex_le_set" 'function)) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_gt_set" #.(swig-lispify "isl_multi_aff_lex_gt_set" 'function)) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_lex_ge_set" #.(swig-lispify "isl_multi_aff_lex_ge_set" 'function)) :pointer
  (ma1 :pointer)
  (ma2 :pointer))

(cffi:defcfun ("isl_multi_aff_bind" #.(swig-lispify "isl_multi_aff_bind" 'function)) :pointer
  (ma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_aff_to_str" #.(swig-lispify "isl_multi_aff_to_str" 'function)) :string
  (ma :pointer))

(cffi:defcfun ("isl_printer_print_multi_aff" #.(swig-lispify "isl_printer_print_multi_aff" 'function)) :pointer
  (p :pointer)
  (maff :pointer))

(cffi:defcfun ("isl_multi_aff_read_from_str" #.(swig-lispify "isl_multi_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_aff_dump" #.(swig-lispify "isl_multi_aff_dump" 'function)) :void
  (maff :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_ctx" #.(swig-lispify "isl_multi_pw_aff_get_ctx" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_space" #.(swig-lispify "isl_multi_pw_aff_get_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_domain_space" #.(swig-lispify "isl_multi_pw_aff_get_domain_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_aff_list" #.(swig-lispify "isl_multi_pw_aff_from_pw_aff_list" 'function)) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_pw_aff_copy" #.(swig-lispify "isl_multi_pw_aff_copy" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_free" #.(swig-lispify "isl_multi_pw_aff_free" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_plain_is_equal" #.(swig-lispify "isl_multi_pw_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_reset_user" #.(swig-lispify "isl_multi_pw_aff_reset_user" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_size" #.(swig-lispify "isl_multi_pw_aff_size" 'function)) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_at" #.(swig-lispify "isl_multi_pw_aff_get_at" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_pw_aff_get_pw_aff" #.(swig-lispify "isl_multi_pw_aff_get_pw_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_pw_aff_set_at" #.(swig-lispify "isl_multi_pw_aff_set_at" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_pw_aff_set_pw_aff" #.(swig-lispify "isl_multi_pw_aff_set_pw_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_splice" #.(swig-lispify "isl_multi_pw_aff_range_splice" 'function)) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_flatten_range" #.(swig-lispify "isl_multi_pw_aff_flatten_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_flat_range_product" #.(swig-lispify "isl_multi_pw_aff_flat_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_product" #.(swig-lispify "isl_multi_pw_aff_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_factor_range" #.(swig-lispify "isl_multi_pw_aff_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_is_wrapping" #.(swig-lispify "isl_multi_pw_aff_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_factor_domain" #.(swig-lispify "isl_multi_pw_aff_range_factor_domain" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_range_factor_range" #.(swig-lispify "isl_multi_pw_aff_range_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_align_params" #.(swig-lispify "isl_multi_pw_aff_align_params" 'function)) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_range" #.(swig-lispify "isl_multi_pw_aff_from_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity_multi_pw_aff" #.(swig-lispify "isl_multi_pw_aff_identity_multi_pw_aff" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity" #.(swig-lispify "isl_multi_pw_aff_identity" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_identity_on_domain_space" #.(swig-lispify "isl_multi_pw_aff_identity_on_domain_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_val" #.(swig-lispify "isl_multi_pw_aff_scale_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_down_val" #.(swig-lispify "isl_multi_pw_aff_scale_down_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_multi_val" #.(swig-lispify "isl_multi_pw_aff_scale_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_scale_down_multi_val" #.(swig-lispify "isl_multi_pw_aff_scale_down_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_mod_multi_val" #.(swig-lispify "isl_multi_pw_aff_mod_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_pw_aff_add" #.(swig-lispify "isl_multi_pw_aff_add" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_sub" #.(swig-lispify "isl_multi_pw_aff_sub" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_neg" #.(swig-lispify "isl_multi_pw_aff_neg" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_zero" #.(swig-lispify "isl_multi_pw_aff_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_nan" #.(swig-lispify "isl_multi_pw_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_dim" #.(swig-lispify "isl_multi_pw_aff_dim" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_pw_aff_drop_dims" #.(swig-lispify "isl_multi_pw_aff_drop_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_involves_dims" #.(swig-lispify "isl_multi_pw_aff_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_insert_dims" #.(swig-lispify "isl_multi_pw_aff_insert_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_add_dims" #.(swig-lispify "isl_multi_pw_aff_add_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_project_domain_on_params" #.(swig-lispify "isl_multi_pw_aff_project_domain_on_params" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_pw_aff_find_dim_by_name" #.(swig-lispify "isl_multi_pw_aff_find_dim_by_name" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_multi_pw_aff_find_dim_by_id" #.(swig-lispify "isl_multi_pw_aff_find_dim_by_id" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_dim_id" #.(swig-lispify "isl_multi_pw_aff_get_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_pw_aff_set_dim_name" #.(swig-lispify "isl_multi_pw_aff_set_dim_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_pw_aff_set_dim_id" #.(swig-lispify "isl_multi_pw_aff_set_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_tuple_name" #.(swig-lispify "isl_multi_pw_aff_get_tuple_name" 'function)) :string
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_pw_aff_has_tuple_id" #.(swig-lispify "isl_multi_pw_aff_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_pw_aff_get_tuple_id" #.(swig-lispify "isl_multi_pw_aff_get_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_pw_aff_set_tuple_name" #.(swig-lispify "isl_multi_pw_aff_set_tuple_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_multi_pw_aff_set_tuple_id" #.(swig-lispify "isl_multi_pw_aff_set_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_reset_tuple_id" #.(swig-lispify "isl_multi_pw_aff_reset_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_pw_aff_product" #.(swig-lispify "isl_multi_pw_aff_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_splice" #.(swig-lispify "isl_multi_pw_aff_splice" 'function)) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind_domain" #.(swig-lispify "isl_multi_pw_aff_bind_domain" 'function)) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind_domain_wrapped_domain" #.(swig-lispify "isl_multi_pw_aff_bind_domain_wrapped_domain" 'function)) :pointer
  (multi :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_param_id" #.(swig-lispify "isl_multi_pw_aff_involves_param_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (id :pointer))

(cffi:defcfun ("isl_multi_pw_aff_involves_param_id_list" #.(swig-lispify "isl_multi_pw_aff_involves_param_id_list" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_zero" #.(swig-lispify "isl_pw_multi_aff_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_identity" #.(swig-lispify "isl_pw_multi_aff_identity" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_map" #.(swig-lispify "isl_pw_multi_aff_range_map" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_project_out_map" #.(swig-lispify "isl_pw_multi_aff_project_out_map" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_from_multi_aff" #.(swig-lispify "isl_pw_multi_aff_from_multi_aff" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_pw_aff" #.(swig-lispify "isl_pw_multi_aff_from_pw_aff" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_alloc" #.(swig-lispify "isl_pw_multi_aff_alloc" 'function)) :pointer
  (set :pointer)
  (maff :pointer))

(cffi:defcfun ("isl_pw_multi_aff_copy" #.(swig-lispify "isl_pw_multi_aff_copy" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_free" #.(swig-lispify "isl_pw_multi_aff_free" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_dim" #.(swig-lispify "isl_pw_multi_aff_dim" 'function)) :int
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_involves_param_id" #.(swig-lispify "isl_pw_multi_aff_involves_param_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_involves_dims" #.(swig-lispify "isl_pw_multi_aff_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_get_pw_aff" #.(swig-lispify "isl_pw_multi_aff_get_pw_aff" 'function)) :pointer
  (pma :pointer)
  (pos :int))

(cffi:defcfun ("isl_pw_multi_aff_set_pw_aff" #.(swig-lispify "isl_pw_multi_aff_set_pw_aff" 'function)) :pointer
  (pma :pointer)
  (pos :unsigned-int)
  (pa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_ctx" #.(swig-lispify "isl_pw_multi_aff_get_ctx" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_domain_space" #.(swig-lispify "isl_pw_multi_aff_get_domain_space" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_space" #.(swig-lispify "isl_pw_multi_aff_get_space" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_has_tuple_name" #.(swig-lispify "isl_pw_multi_aff_has_tuple_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_get_tuple_name" #.(swig-lispify "isl_pw_multi_aff_get_tuple_name" 'function)) :string
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_get_tuple_id" #.(swig-lispify "isl_pw_multi_aff_get_tuple_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_has_tuple_id" #.(swig-lispify "isl_pw_multi_aff_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_set_tuple_id" #.(swig-lispify "isl_pw_multi_aff_set_tuple_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_reset_tuple_id" #.(swig-lispify "isl_pw_multi_aff_reset_tuple_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_multi_aff_reset_user" #.(swig-lispify "isl_pw_multi_aff_reset_user" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_find_dim_by_name" #.(swig-lispify "isl_pw_multi_aff_find_dim_by_name" 'function)) :int
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_pw_multi_aff_drop_dims" #.(swig-lispify "isl_pw_multi_aff_drop_dims" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_domain" #.(swig-lispify "isl_pw_multi_aff_domain" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_empty" #.(swig-lispify "isl_pw_multi_aff_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_domain" #.(swig-lispify "isl_pw_multi_aff_from_domain" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_multi_val_on_domain" #.(swig-lispify "isl_pw_multi_aff_multi_val_on_domain" 'function)) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_pw_multi_aff_get_dim_name" #.(swig-lispify "isl_pw_multi_aff_get_dim_name" 'function)) :string
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_get_dim_id" #.(swig-lispify "isl_pw_multi_aff_get_dim_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_set_dim_id" #.(swig-lispify "isl_pw_multi_aff_set_dim_id" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_pw_multi_aff_involves_nan" #.(swig-lispify "isl_pw_multi_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_plain_is_equal" #.(swig-lispify "isl_pw_multi_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_is_equal" #.(swig-lispify "isl_pw_multi_aff_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_fix_si" #.(swig-lispify "isl_pw_multi_aff_fix_si" 'function)) :pointer
  (pma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_pw_multi_aff_union_add" #.(swig-lispify "isl_pw_multi_aff_union_add" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_neg" #.(swig-lispify "isl_pw_multi_aff_neg" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_add" #.(swig-lispify "isl_pw_multi_aff_add" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_sub" #.(swig-lispify "isl_pw_multi_aff_sub" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_val" #.(swig-lispify "isl_pw_multi_aff_scale_val" 'function)) :pointer
  (pma :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_down_val" #.(swig-lispify "isl_pw_multi_aff_scale_down_val" 'function)) :pointer
  (pma :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_multi_aff_scale_multi_val" #.(swig-lispify "isl_pw_multi_aff_scale_multi_val" 'function)) :pointer
  (pma :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_pw_multi_aff_union_lexmin" #.(swig-lispify "isl_pw_multi_aff_union_lexmin" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_union_lexmax" #.(swig-lispify "isl_pw_multi_aff_union_lexmax" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_multi_aff_flatten_domain" #.(swig-lispify "isl_multi_aff_flatten_domain" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_product" #.(swig-lispify "isl_pw_multi_aff_range_product" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_flat_range_product" #.(swig-lispify "isl_pw_multi_aff_flat_range_product" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_product" #.(swig-lispify "isl_pw_multi_aff_product" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_factor_domain" #.(swig-lispify "isl_pw_multi_aff_range_factor_domain" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_range_factor_range" #.(swig-lispify "isl_pw_multi_aff_range_factor_range" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_params" #.(swig-lispify "isl_pw_multi_aff_intersect_params" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain" #.(swig-lispify "isl_pw_multi_aff_intersect_domain" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain_wrapped_domain" #.(swig-lispify "isl_pw_multi_aff_intersect_domain_wrapped_domain" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_intersect_domain_wrapped_range" #.(swig-lispify "isl_pw_multi_aff_intersect_domain_wrapped_range" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_subtract_domain" #.(swig-lispify "isl_pw_multi_aff_subtract_domain" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_project_domain_on_params" #.(swig-lispify "isl_pw_multi_aff_project_domain_on_params" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_align_params" #.(swig-lispify "isl_pw_multi_aff_align_params" 'function)) :pointer
  (pma :pointer)
  (model :pointer))

(cffi:defcfun ("isl_pw_multi_aff_drop_unused_params" #.(swig-lispify "isl_pw_multi_aff_drop_unused_params" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_coalesce" #.(swig-lispify "isl_pw_multi_aff_coalesce" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_gist_params" #.(swig-lispify "isl_pw_multi_aff_gist_params" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_gist" #.(swig-lispify "isl_pw_multi_aff_gist" 'function)) :pointer
  (pma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_pullback_multi_aff" #.(swig-lispify "isl_pw_multi_aff_pullback_multi_aff" 'function)) :pointer
  (pma :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_pullback_pw_multi_aff" #.(swig-lispify "isl_pw_multi_aff_pullback_pw_multi_aff" 'function)) :pointer
  (pma1 :pointer)
  (pma2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_n_piece" #.(swig-lispify "isl_pw_multi_aff_n_piece" 'function)) :int
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_foreach_piece" #.(swig-lispify "isl_pw_multi_aff_foreach_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pma :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_isa_multi_aff" #.(swig-lispify "isl_pw_multi_aff_isa_multi_aff" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_as_multi_aff" #.(swig-lispify "isl_pw_multi_aff_as_multi_aff" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_map_from_pw_multi_aff" #.(swig-lispify "isl_map_from_pw_multi_aff" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_set_from_pw_multi_aff" #.(swig-lispify "isl_set_from_pw_multi_aff" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_to_str" #.(swig-lispify "isl_pw_multi_aff_to_str" 'function)) :string
  (pma :pointer))

(cffi:defcfun ("isl_printer_print_pw_multi_aff" #.(swig-lispify "isl_printer_print_pw_multi_aff" 'function)) :pointer
  (p :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_set" #.(swig-lispify "isl_pw_multi_aff_from_set" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_map" #.(swig-lispify "isl_pw_multi_aff_from_map" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_pw_multi_aff_bind_domain" #.(swig-lispify "isl_pw_multi_aff_bind_domain" 'function)) :pointer
  (pma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_multi_aff_bind_domain_wrapped_domain" #.(swig-lispify "isl_pw_multi_aff_bind_domain_wrapped_domain" 'function)) :pointer
  (pma :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_pw_multi_aff_read_from_str" #.(swig-lispify "isl_pw_multi_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_multi_aff_dump" #.(swig-lispify "isl_pw_multi_aff_dump" 'function)) :void
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty_ctx" #.(swig-lispify "isl_union_pw_multi_aff_empty_ctx" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty_space" #.(swig-lispify "isl_union_pw_multi_aff_empty_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_empty" #.(swig-lispify "isl_union_pw_multi_aff_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_aff" #.(swig-lispify "isl_union_pw_multi_aff_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_from_pw_multi_aff" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_domain" #.(swig-lispify "isl_union_pw_multi_aff_from_domain" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_multi_val_on_domain" #.(swig-lispify "isl_union_pw_multi_aff_multi_val_on_domain" 'function)) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_union_pw_aff_param_on_domain_id" #.(swig-lispify "isl_union_pw_aff_param_on_domain_id" 'function)) :pointer
  (domain :pointer)
  (id :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_copy" #.(swig-lispify "isl_union_pw_multi_aff_copy" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_free" #.(swig-lispify "isl_union_pw_multi_aff_free" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_set_identity_union_pw_multi_aff" #.(swig-lispify "isl_union_set_identity_union_pw_multi_aff" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_union_pw_aff" #.(swig-lispify "isl_union_pw_multi_aff_get_union_pw_aff" 'function)) :pointer
  (upma :pointer)
  (pos :int))

(cffi:defcfun ("isl_union_pw_multi_aff_add_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_add_pw_multi_aff" 'function)) :pointer
  (upma :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_ctx" #.(swig-lispify "isl_union_pw_multi_aff_get_ctx" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_space" #.(swig-lispify "isl_union_pw_multi_aff_get_space" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_get_pw_multi_aff_list" #.(swig-lispify "isl_union_pw_multi_aff_get_pw_multi_aff_list" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_dim" #.(swig-lispify "isl_union_pw_multi_aff_dim" 'function)) :int
  (upma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_pw_multi_aff_set_dim_name" #.(swig-lispify "isl_union_pw_multi_aff_set_dim_name" 'function)) :pointer
  (upma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_multi_aff_find_dim_by_name" #.(swig-lispify "isl_union_pw_multi_aff_find_dim_by_name" 'function)) :int
  (upma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_union_pw_multi_aff_drop_dims" #.(swig-lispify "isl_union_pw_multi_aff_drop_dims" 'function)) :pointer
  (upma :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_reset_user" #.(swig-lispify "isl_union_pw_multi_aff_reset_user" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_coalesce" #.(swig-lispify "isl_union_pw_multi_aff_coalesce" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_gist_params" #.(swig-lispify "isl_union_pw_multi_aff_gist_params" 'function)) :pointer
  (upma :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_gist" #.(swig-lispify "isl_union_pw_multi_aff_gist" 'function)) :pointer
  (upma :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_pullback_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_pullback_union_pw_multi_aff" 'function)) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_align_params" #.(swig-lispify "isl_union_pw_multi_aff_align_params" 'function)) :pointer
  (upma :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_n_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_n_pw_multi_aff" 'function)) :int
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_foreach_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_foreach_pw_multi_aff" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (upma :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_extract_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_extract_pw_multi_aff" 'function)) :pointer
  (upma :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_isa_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_isa_pw_multi_aff" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_as_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_as_pw_multi_aff" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_involves_nan" #.(swig-lispify "isl_union_pw_multi_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_plain_is_equal" #.(swig-lispify "isl_union_pw_multi_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_domain" #.(swig-lispify "isl_union_pw_multi_aff_domain" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_neg" #.(swig-lispify "isl_union_pw_multi_aff_neg" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_add" #.(swig-lispify "isl_union_pw_multi_aff_add" 'function)) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_union_add" #.(swig-lispify "isl_union_pw_multi_aff_union_add" 'function)) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_sub" #.(swig-lispify "isl_union_pw_multi_aff_sub" 'function)) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_val" #.(swig-lispify "isl_union_pw_multi_aff_scale_val" 'function)) :pointer
  (upma :pointer)
  (val :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_down_val" #.(swig-lispify "isl_union_pw_multi_aff_scale_down_val" 'function)) :pointer
  (upma :pointer)
  (val :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_scale_multi_val" #.(swig-lispify "isl_union_pw_multi_aff_scale_multi_val" 'function)) :pointer
  (upma :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_flat_range_product" #.(swig-lispify "isl_union_pw_multi_aff_flat_range_product" 'function)) :pointer
  (upma1 :pointer)
  (upma2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_range_factor_domain" #.(swig-lispify "isl_union_pw_multi_aff_range_factor_domain" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_range_factor_range" #.(swig-lispify "isl_union_pw_multi_aff_range_factor_range" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_params" #.(swig-lispify "isl_union_pw_multi_aff_intersect_params" 'function)) :pointer
  (upma :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain" #.(swig-lispify "isl_union_pw_multi_aff_intersect_domain" 'function)) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain_wrapped_domain" #.(swig-lispify "isl_union_pw_multi_aff_intersect_domain_wrapped_domain" 'function)) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_intersect_domain_wrapped_range" #.(swig-lispify "isl_union_pw_multi_aff_intersect_domain_wrapped_range" 'function)) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_subtract_domain" #.(swig-lispify "isl_union_pw_multi_aff_subtract_domain" 'function)) :pointer
  (upma :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_union_pw_multi_aff" #.(swig-lispify "isl_union_map_from_union_pw_multi_aff" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_multi_aff" #.(swig-lispify "isl_printer_print_union_pw_multi_aff" 'function)) :pointer
  (p :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_set" #.(swig-lispify "isl_union_pw_multi_aff_from_union_set" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_map" #.(swig-lispify "isl_union_pw_multi_aff_from_union_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_read_from_str" #.(swig-lispify "isl_union_pw_multi_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_multi_aff_dump" #.(swig-lispify "isl_union_pw_multi_aff_dump" 'function)) :void
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_to_str" #.(swig-lispify "isl_union_pw_multi_aff_to_str" 'function)) :string
  (upma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_get_hash" #.(swig-lispify "isl_multi_pw_aff_get_hash" 'function)) :unsigned-int
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_multi_aff" #.(swig-lispify "isl_multi_pw_aff_from_multi_aff" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_aff" #.(swig-lispify "isl_multi_pw_aff_from_pw_aff" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_domain" #.(swig-lispify "isl_multi_pw_aff_domain" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_intersect_params" #.(swig-lispify "isl_multi_pw_aff_intersect_params" 'function)) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_intersect_domain" #.(swig-lispify "isl_multi_pw_aff_intersect_domain" 'function)) :pointer
  (mpa :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_multi_pw_aff_coalesce" #.(swig-lispify "isl_multi_pw_aff_coalesce" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_gist" #.(swig-lispify "isl_multi_pw_aff_gist" 'function)) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_gist_params" #.(swig-lispify "isl_multi_pw_aff_gist_params" 'function)) :pointer
  (mpa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_pw_aff_is_cst" #.(swig-lispify "isl_multi_pw_aff_is_cst" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_is_equal" #.(swig-lispify "isl_multi_pw_aff_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_multi_aff" #.(swig-lispify "isl_multi_pw_aff_pullback_multi_aff" 'function)) :pointer
  (mpa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_pw_multi_aff" #.(swig-lispify "isl_multi_pw_aff_pullback_pw_multi_aff" 'function)) :pointer
  (mpa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_pullback_multi_pw_aff" #.(swig-lispify "isl_multi_pw_aff_pullback_multi_pw_aff" 'function)) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_move_dims" #.(swig-lispify "isl_multi_pw_aff_move_dims" 'function)) :pointer
  (pma :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_from_multi_pw_aff" #.(swig-lispify "isl_set_from_multi_pw_aff" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_map_from_multi_pw_aff" #.(swig-lispify "isl_map_from_multi_pw_aff" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_pw_multi_aff_from_multi_pw_aff" #.(swig-lispify "isl_pw_multi_aff_from_multi_pw_aff" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_from_pw_multi_aff" #.(swig-lispify "isl_multi_pw_aff_from_pw_multi_aff" 'function)) :pointer
  (pma :pointer))

(cffi:defcfun ("isl_multi_pw_aff_eq_map" #.(swig-lispify "isl_multi_pw_aff_eq_map" 'function)) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_lex_lt_map" #.(swig-lispify "isl_multi_pw_aff_lex_lt_map" 'function)) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_lex_gt_map" #.(swig-lispify "isl_multi_pw_aff_lex_gt_map" 'function)) :pointer
  (mpa1 :pointer)
  (mpa2 :pointer))

(cffi:defcfun ("isl_multi_pw_aff_bind" #.(swig-lispify "isl_multi_pw_aff_bind" 'function)) :pointer
  (mpa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_pw_aff_read_from_str" #.(swig-lispify "isl_multi_pw_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_pw_aff_to_str" #.(swig-lispify "isl_multi_pw_aff_to_str" 'function)) :string
  (mpa :pointer))

(cffi:defcfun ("isl_printer_print_multi_pw_aff" #.(swig-lispify "isl_printer_print_multi_pw_aff" 'function)) :pointer
  (p :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_multi_pw_aff_dump" #.(swig-lispify "isl_multi_pw_aff_dump" 'function)) :void
  (mpa :pointer))

(cffi:defcfun ("isl_union_pw_aff_copy" #.(swig-lispify "isl_union_pw_aff_copy" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_free" #.(swig-lispify "isl_union_pw_aff_free" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_ctx" #.(swig-lispify "isl_union_pw_aff_get_ctx" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_space" #.(swig-lispify "isl_union_pw_aff_get_space" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_get_pw_aff_list" #.(swig-lispify "isl_union_pw_aff_get_pw_aff_list" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_dim" #.(swig-lispify "isl_union_pw_aff_dim" 'function)) :int
  (upa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_pw_aff_set_dim_name" #.(swig-lispify "isl_union_pw_aff_set_dim_name" 'function)) :pointer
  (upa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_aff_find_dim_by_name" #.(swig-lispify "isl_union_pw_aff_find_dim_by_name" 'function)) :int
  (upa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_union_pw_aff_drop_dims" #.(swig-lispify "isl_union_pw_aff_drop_dims" 'function)) :pointer
  (upa :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_reset_user" #.(swig-lispify "isl_union_pw_aff_reset_user" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty_ctx" #.(swig-lispify "isl_union_pw_aff_empty_ctx" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty_space" #.(swig-lispify "isl_union_pw_aff_empty_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_empty" #.(swig-lispify "isl_union_pw_aff_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_from_pw_aff" #.(swig-lispify "isl_union_pw_aff_from_pw_aff" 'function)) :pointer
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_aff_val_on_domain" #.(swig-lispify "isl_union_pw_aff_val_on_domain" 'function)) :pointer
  (domain :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_aff_on_domain" #.(swig-lispify "isl_union_pw_aff_aff_on_domain" 'function)) :pointer
  (domain :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_union_pw_aff_pw_aff_on_domain" #.(swig-lispify "isl_union_pw_aff_pw_aff_on_domain" 'function)) :pointer
  (domain :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_aff_add_pw_aff" #.(swig-lispify "isl_union_pw_aff_add_pw_aff" 'function)) :pointer
  (upa :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_union_pw_aff" #.(swig-lispify "isl_union_pw_multi_aff_from_union_pw_aff" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_n_pw_aff" #.(swig-lispify "isl_union_pw_aff_n_pw_aff" 'function)) :int
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_foreach_pw_aff" #.(swig-lispify "isl_union_pw_aff_foreach_pw_aff" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (upa :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_extract_pw_aff" #.(swig-lispify "isl_union_pw_aff_extract_pw_aff" 'function)) :pointer
  (upa :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_pw_aff_involves_nan" #.(swig-lispify "isl_union_pw_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_plain_is_equal" #.(swig-lispify "isl_union_pw_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_domain" #.(swig-lispify "isl_union_pw_aff_domain" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_neg" #.(swig-lispify "isl_union_pw_aff_neg" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_add" #.(swig-lispify "isl_union_pw_aff_add" 'function)) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_union_add" #.(swig-lispify "isl_union_pw_aff_union_add" 'function)) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_sub" #.(swig-lispify "isl_union_pw_aff_sub" 'function)) :pointer
  (upa1 :pointer)
  (upa2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_coalesce" #.(swig-lispify "isl_union_pw_aff_coalesce" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_gist" #.(swig-lispify "isl_union_pw_aff_gist" 'function)) :pointer
  (upa :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_aff_gist_params" #.(swig-lispify "isl_union_pw_aff_gist_params" 'function)) :pointer
  (upa :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_aff_pullback_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_aff_pullback_union_pw_multi_aff" 'function)) :pointer
  (upa :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_aff_floor" #.(swig-lispify "isl_union_pw_aff_floor" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_scale_val" #.(swig-lispify "isl_union_pw_aff_scale_val" 'function)) :pointer
  (upa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_scale_down_val" #.(swig-lispify "isl_union_pw_aff_scale_down_val" 'function)) :pointer
  (upa :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_aff_mod_val" #.(swig-lispify "isl_union_pw_aff_mod_val" 'function)) :pointer
  (upa :pointer)
  (f :pointer))

(cffi:defcfun ("isl_union_pw_aff_align_params" #.(swig-lispify "isl_union_pw_aff_align_params" 'function)) :pointer
  (upa :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_params" #.(swig-lispify "isl_union_pw_aff_intersect_params" 'function)) :pointer
  (upa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain" #.(swig-lispify "isl_union_pw_aff_intersect_domain" 'function)) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain_wrapped_domain" #.(swig-lispify "isl_union_pw_aff_intersect_domain_wrapped_domain" 'function)) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_intersect_domain_wrapped_range" #.(swig-lispify "isl_union_pw_aff_intersect_domain_wrapped_range" 'function)) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_subtract_domain" #.(swig-lispify "isl_union_pw_aff_subtract_domain" 'function)) :pointer
  (upa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_aff_zero_union_set" #.(swig-lispify "isl_union_pw_aff_zero_union_set" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_map_from_union_pw_aff" #.(swig-lispify "isl_union_map_from_union_pw_aff" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_bind_id" #.(swig-lispify "isl_union_pw_aff_bind_id" 'function)) :pointer
  (upa :pointer)
  (id :pointer))

(cffi:defcfun ("isl_union_pw_aff_read_from_str" #.(swig-lispify "isl_union_pw_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_aff_to_str" #.(swig-lispify "isl_union_pw_aff_to_str" 'function)) :string
  (upa :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_aff" #.(swig-lispify "isl_printer_print_union_pw_aff" 'function)) :pointer
  (p :pointer)
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_dump" #.(swig-lispify "isl_union_pw_aff_dump" 'function)) :void
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_ctx" #.(swig-lispify "isl_multi_union_pw_aff_get_ctx" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_space" #.(swig-lispify "isl_multi_union_pw_aff_get_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_domain_space" #.(swig-lispify "isl_multi_union_pw_aff_get_domain_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_aff_list" #.(swig-lispify "isl_multi_union_pw_aff_from_union_pw_aff_list" 'function)) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_copy" #.(swig-lispify "isl_multi_union_pw_aff_copy" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_free" #.(swig-lispify "isl_multi_union_pw_aff_free" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_plain_is_equal" #.(swig-lispify "isl_multi_union_pw_aff_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_reset_user" #.(swig-lispify "isl_multi_union_pw_aff_reset_user" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_size" #.(swig-lispify "isl_multi_union_pw_aff_size" 'function)) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_at" #.(swig-lispify "isl_multi_union_pw_aff_get_at" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_union_pw_aff_get_union_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_get_union_pw_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_union_pw_aff_set_at" #.(swig-lispify "isl_multi_union_pw_aff_set_at" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_set_union_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_set_union_pw_aff" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_splice" #.(swig-lispify "isl_multi_union_pw_aff_range_splice" 'function)) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_flatten_range" #.(swig-lispify "isl_multi_union_pw_aff_flatten_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_flat_range_product" #.(swig-lispify "isl_multi_union_pw_aff_flat_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_product" #.(swig-lispify "isl_multi_union_pw_aff_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_factor_range" #.(swig-lispify "isl_multi_union_pw_aff_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_is_wrapping" #.(swig-lispify "isl_multi_union_pw_aff_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_factor_domain" #.(swig-lispify "isl_multi_union_pw_aff_range_factor_domain" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_range_factor_range" #.(swig-lispify "isl_multi_union_pw_aff_range_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_align_params" #.(swig-lispify "isl_multi_union_pw_aff_align_params" 'function)) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_range" #.(swig-lispify "isl_multi_union_pw_aff_from_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_val" #.(swig-lispify "isl_multi_union_pw_aff_scale_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_down_val" #.(swig-lispify "isl_multi_union_pw_aff_scale_down_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_multi_val" #.(swig-lispify "isl_multi_union_pw_aff_scale_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_scale_down_multi_val" #.(swig-lispify "isl_multi_union_pw_aff_scale_down_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_mod_multi_val" #.(swig-lispify "isl_multi_union_pw_aff_mod_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_add" #.(swig-lispify "isl_multi_union_pw_aff_add" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_sub" #.(swig-lispify "isl_multi_union_pw_aff_sub" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_neg" #.(swig-lispify "isl_multi_union_pw_aff_neg" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_zero" #.(swig-lispify "isl_multi_union_pw_aff_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_involves_nan" #.(swig-lispify "isl_multi_union_pw_aff_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_dim" #.(swig-lispify "isl_multi_union_pw_aff_dim" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_union_pw_aff_drop_dims" #.(swig-lispify "isl_multi_union_pw_aff_drop_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_union_pw_aff_find_dim_by_name" #.(swig-lispify "isl_multi_union_pw_aff_find_dim_by_name" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_multi_union_pw_aff_find_dim_by_id" #.(swig-lispify "isl_multi_union_pw_aff_find_dim_by_id" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_dim_id" #.(swig-lispify "isl_multi_union_pw_aff_get_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_union_pw_aff_set_dim_name" #.(swig-lispify "isl_multi_union_pw_aff_set_dim_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_union_pw_aff_set_dim_id" #.(swig-lispify "isl_multi_union_pw_aff_set_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_get_tuple_name" #.(swig-lispify "isl_multi_union_pw_aff_get_tuple_name" 'function)) :string
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_union_pw_aff_has_tuple_id" #.(swig-lispify "isl_multi_union_pw_aff_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_union_pw_aff_get_tuple_id" #.(swig-lispify "isl_multi_union_pw_aff_get_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_union_pw_aff_set_tuple_name" #.(swig-lispify "isl_multi_union_pw_aff_set_tuple_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_multi_union_pw_aff_set_tuple_id" #.(swig-lispify "isl_multi_union_pw_aff_set_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_reset_tuple_id" #.(swig-lispify "isl_multi_union_pw_aff_reset_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_union_pw_aff_from_multi_aff" #.(swig-lispify "isl_multi_union_pw_aff_from_multi_aff" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_from_union_pw_aff" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_multi_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_from_multi_pw_aff" 'function)) :pointer
  (mpa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_multi_val_on_domain" #.(swig-lispify "isl_multi_union_pw_aff_multi_val_on_domain" 'function)) :pointer
  (domain :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_multi_aff_on_domain" #.(swig-lispify "isl_multi_union_pw_aff_multi_aff_on_domain" 'function)) :pointer
  (domain :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_pw_multi_aff_on_domain" #.(swig-lispify "isl_multi_union_pw_aff_pw_multi_aff_on_domain" 'function)) :pointer
  (domain :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_floor" #.(swig-lispify "isl_multi_union_pw_aff_floor" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_domain" #.(swig-lispify "isl_multi_union_pw_aff_intersect_domain" 'function)) :pointer
  (mupa :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_params" #.(swig-lispify "isl_multi_union_pw_aff_intersect_params" 'function)) :pointer
  (mupa :pointer)
  (params :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_intersect_range" #.(swig-lispify "isl_multi_union_pw_aff_intersect_range" 'function)) :pointer
  (mupa :pointer)
  (set :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_domain" #.(swig-lispify "isl_multi_union_pw_aff_domain" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_coalesce" #.(swig-lispify "isl_multi_union_pw_aff_coalesce" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_gist" #.(swig-lispify "isl_multi_union_pw_aff_gist" 'function)) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_gist_params" #.(swig-lispify "isl_multi_union_pw_aff_gist_params" 'function)) :pointer
  (aff :pointer)
  (context :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_aff" #.(swig-lispify "isl_multi_union_pw_aff_apply_aff" 'function)) :pointer
  (mupa :pointer)
  (aff :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_multi_aff" #.(swig-lispify "isl_multi_union_pw_aff_apply_multi_aff" 'function)) :pointer
  (mupa :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_apply_pw_aff" 'function)) :pointer
  (mupa :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_apply_pw_multi_aff" #.(swig-lispify "isl_multi_union_pw_aff_apply_pw_multi_aff" 'function)) :pointer
  (mupa :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_pullback_union_pw_multi_aff" #.(swig-lispify "isl_multi_union_pw_aff_pullback_union_pw_multi_aff" 'function)) :pointer
  (mupa :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_from_multi_union_pw_aff" #.(swig-lispify "isl_union_pw_multi_aff_from_multi_union_pw_aff" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_union_add" #.(swig-lispify "isl_multi_union_pw_aff_union_add" 'function)) :pointer
  (mupa1 :pointer)
  (mupa2 :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_pw_multi_aff" #.(swig-lispify "isl_multi_union_pw_aff_from_union_pw_multi_aff" 'function)) :pointer
  (upma :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_from_union_map" #.(swig-lispify "isl_multi_union_pw_aff_from_union_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_from_multi_union_pw_aff" #.(swig-lispify "isl_union_map_from_multi_union_pw_aff" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_zero_union_set" #.(swig-lispify "isl_multi_union_pw_aff_zero_union_set" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_bind" #.(swig-lispify "isl_multi_union_pw_aff_bind" 'function)) :pointer
  (mupa :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_extract_multi_pw_aff" #.(swig-lispify "isl_multi_union_pw_aff_extract_multi_pw_aff" 'function)) :pointer
  (mupa :pointer)
  (space :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_read_from_str" #.(swig-lispify "isl_multi_union_pw_aff_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_multi_union_pw_aff_to_str" #.(swig-lispify "isl_multi_union_pw_aff_to_str" 'function)) :string
  (mupa :pointer))

(cffi:defcfun ("isl_printer_print_multi_union_pw_aff" #.(swig-lispify "isl_printer_print_multi_union_pw_aff" 'function)) :pointer
  (p :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_dump" #.(swig-lispify "isl_multi_union_pw_aff_dump" 'function)) :void
  (mupa :pointer))

(cffi:defcfun ("isl_aff_list_get_ctx" #.(swig-lispify "isl_aff_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_from_aff" #.(swig-lispify "isl_aff_list_from_aff" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_aff_list_alloc" #.(swig-lispify "isl_aff_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_aff_list_copy" #.(swig-lispify "isl_aff_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_free" #.(swig-lispify "isl_aff_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_add" #.(swig-lispify "isl_aff_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_insert" #.(swig-lispify "isl_aff_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_drop" #.(swig-lispify "isl_aff_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_aff_list_clear" #.(swig-lispify "isl_aff_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_swap" #.(swig-lispify "isl_aff_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_aff_list_reverse" #.(swig-lispify "isl_aff_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_aff_list_concat" #.(swig-lispify "isl_aff_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_aff_list_size" #.(swig-lispify "isl_aff_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_aff_list_n_aff" #.(swig-lispify "isl_aff_list_n_aff" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_aff_list_get_at" #.(swig-lispify "isl_aff_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_aff_list_get_aff" #.(swig-lispify "isl_aff_list_get_aff" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_aff_list_set_aff" #.(swig-lispify "isl_aff_list_set_aff" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_aff_list_foreach" #.(swig-lispify "isl_aff_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_map" #.(swig-lispify "isl_aff_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_sort" #.(swig-lispify "isl_aff_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_aff_list_foreach_scc" #.(swig-lispify "isl_aff_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_aff_list_to_str" #.(swig-lispify "isl_aff_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_aff_list" #.(swig-lispify "isl_printer_print_aff_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_aff_list_dump" #.(swig-lispify "isl_aff_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_get_ctx" #.(swig-lispify "isl_pw_aff_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_from_pw_aff" #.(swig-lispify "isl_pw_aff_list_from_pw_aff" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_alloc" #.(swig-lispify "isl_pw_aff_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_aff_list_copy" #.(swig-lispify "isl_pw_aff_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_free" #.(swig-lispify "isl_pw_aff_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_add" #.(swig-lispify "isl_pw_aff_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_insert" #.(swig-lispify "isl_pw_aff_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_drop" #.(swig-lispify "isl_pw_aff_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_aff_list_clear" #.(swig-lispify "isl_pw_aff_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_swap" #.(swig-lispify "isl_pw_aff_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_aff_list_reverse" #.(swig-lispify "isl_pw_aff_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_concat" #.(swig-lispify "isl_pw_aff_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_aff_list_size" #.(swig-lispify "isl_pw_aff_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_n_pw_aff" #.(swig-lispify "isl_pw_aff_list_n_pw_aff" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_get_at" #.(swig-lispify "isl_pw_aff_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_aff_list_get_pw_aff" #.(swig-lispify "isl_pw_aff_list_get_pw_aff" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_aff_list_set_pw_aff" #.(swig-lispify "isl_pw_aff_list_set_pw_aff" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_aff_list_foreach" #.(swig-lispify "isl_pw_aff_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_map" #.(swig-lispify "isl_pw_aff_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_sort" #.(swig-lispify "isl_pw_aff_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_aff_list_foreach_scc" #.(swig-lispify "isl_pw_aff_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_aff_list_to_str" #.(swig-lispify "isl_pw_aff_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_aff_list" #.(swig-lispify "isl_printer_print_pw_aff_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_aff_list_dump" #.(swig-lispify "isl_pw_aff_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_get_ctx" #.(swig-lispify "isl_pw_multi_aff_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_from_pw_multi_aff" #.(swig-lispify "isl_pw_multi_aff_list_from_pw_multi_aff" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_alloc" #.(swig-lispify "isl_pw_multi_aff_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_multi_aff_list_copy" #.(swig-lispify "isl_pw_multi_aff_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_free" #.(swig-lispify "isl_pw_multi_aff_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_add" #.(swig-lispify "isl_pw_multi_aff_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_insert" #.(swig-lispify "isl_pw_multi_aff_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_drop" #.(swig-lispify "isl_pw_multi_aff_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_list_clear" #.(swig-lispify "isl_pw_multi_aff_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_swap" #.(swig-lispify "isl_pw_multi_aff_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_multi_aff_list_reverse" #.(swig-lispify "isl_pw_multi_aff_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_concat" #.(swig-lispify "isl_pw_multi_aff_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_size" #.(swig-lispify "isl_pw_multi_aff_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_n_pw_multi_aff" #.(swig-lispify "isl_pw_multi_aff_list_n_pw_multi_aff" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_get_at" #.(swig-lispify "isl_pw_multi_aff_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_multi_aff_list_get_pw_multi_aff" #.(swig-lispify "isl_pw_multi_aff_list_get_pw_multi_aff" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_multi_aff_list_set_pw_multi_aff" #.(swig-lispify "isl_pw_multi_aff_list_set_pw_multi_aff" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_foreach" #.(swig-lispify "isl_pw_multi_aff_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_map" #.(swig-lispify "isl_pw_multi_aff_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_sort" #.(swig-lispify "isl_pw_multi_aff_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_foreach_scc" #.(swig-lispify "isl_pw_multi_aff_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_to_str" #.(swig-lispify "isl_pw_multi_aff_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_multi_aff_list" #.(swig-lispify "isl_printer_print_pw_multi_aff_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_multi_aff_list_dump" #.(swig-lispify "isl_pw_multi_aff_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_get_ctx" #.(swig-lispify "isl_union_pw_aff_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_from_union_pw_aff" #.(swig-lispify "isl_union_pw_aff_list_from_union_pw_aff" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_alloc" #.(swig-lispify "isl_union_pw_aff_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_pw_aff_list_copy" #.(swig-lispify "isl_union_pw_aff_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_free" #.(swig-lispify "isl_union_pw_aff_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_add" #.(swig-lispify "isl_union_pw_aff_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_insert" #.(swig-lispify "isl_union_pw_aff_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_drop" #.(swig-lispify "isl_union_pw_aff_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_list_clear" #.(swig-lispify "isl_union_pw_aff_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_swap" #.(swig-lispify "isl_union_pw_aff_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_pw_aff_list_reverse" #.(swig-lispify "isl_union_pw_aff_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_concat" #.(swig-lispify "isl_union_pw_aff_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_size" #.(swig-lispify "isl_union_pw_aff_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_n_union_pw_aff" #.(swig-lispify "isl_union_pw_aff_list_n_union_pw_aff" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_get_at" #.(swig-lispify "isl_union_pw_aff_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_aff_list_get_union_pw_aff" #.(swig-lispify "isl_union_pw_aff_list_get_union_pw_aff" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_aff_list_set_union_pw_aff" #.(swig-lispify "isl_union_pw_aff_list_set_union_pw_aff" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_foreach" #.(swig-lispify "isl_union_pw_aff_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_map" #.(swig-lispify "isl_union_pw_aff_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_sort" #.(swig-lispify "isl_union_pw_aff_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_foreach_scc" #.(swig-lispify "isl_union_pw_aff_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_to_str" #.(swig-lispify "isl_union_pw_aff_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_aff_list" #.(swig-lispify "isl_printer_print_union_pw_aff_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_pw_aff_list_dump" #.(swig-lispify "isl_union_pw_aff_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_ctx" #.(swig-lispify "isl_union_pw_multi_aff_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_from_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_list_from_union_pw_multi_aff" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_alloc" #.(swig-lispify "isl_union_pw_multi_aff_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_copy" #.(swig-lispify "isl_union_pw_multi_aff_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_free" #.(swig-lispify "isl_union_pw_multi_aff_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_add" #.(swig-lispify "isl_union_pw_multi_aff_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_insert" #.(swig-lispify "isl_union_pw_multi_aff_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_drop" #.(swig-lispify "isl_union_pw_multi_aff_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_clear" #.(swig-lispify "isl_union_pw_multi_aff_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_swap" #.(swig-lispify "isl_union_pw_multi_aff_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_reverse" #.(swig-lispify "isl_union_pw_multi_aff_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_concat" #.(swig-lispify "isl_union_pw_multi_aff_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_size" #.(swig-lispify "isl_union_pw_multi_aff_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_n_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_list_n_union_pw_multi_aff" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_at" #.(swig-lispify "isl_union_pw_multi_aff_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_get_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_list_get_union_pw_multi_aff" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_pw_multi_aff_list_set_union_pw_multi_aff" #.(swig-lispify "isl_union_pw_multi_aff_list_set_union_pw_multi_aff" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_foreach" #.(swig-lispify "isl_union_pw_multi_aff_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_map" #.(swig-lispify "isl_union_pw_multi_aff_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_sort" #.(swig-lispify "isl_union_pw_multi_aff_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_foreach_scc" #.(swig-lispify "isl_union_pw_multi_aff_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_to_str" #.(swig-lispify "isl_union_pw_multi_aff_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_multi_aff_list" #.(swig-lispify "isl_printer_print_union_pw_multi_aff_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_pw_multi_aff_list_dump" #.(swig-lispify "isl_union_pw_multi_aff_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_choice" 'classname)
	(#.(swig-lispify "name" 'slotname) :string)
	(#.(swig-lispify "value" 'slotname) :unsigned-int))

(cffi:defcstruct #.(swig-lispify "isl_arg_flags" 'classname)
	(#.(swig-lispify "name" 'slotname) :string)
	(#.(swig-lispify "mask" 'slotname) :unsigned-int)
	(#.(swig-lispify "value" 'slotname) :unsigned-int))

(cffi:defcstruct #.(swig-lispify "isl_arg" 'classname)
	(#.(swig-lispify "type" 'slotname) #.(swig-lispify "isl_arg_type" 'enumname))
	(#.(swig-lispify "short_name" 'slotname) :char)
	(#.(swig-lispify "long_name" 'slotname) :string)
	(#.(swig-lispify "argument_name" 'slotname) :string)
	(#.(swig-lispify "offset" 'slotname) :unsigned-long)
	(#.(swig-lispify "help_msg" 'slotname) :string)
	(#.(swig-lispify "flags" 'slotname) :unsigned-int)
	(#.(swig-lispify "u" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_user" 'classname)
	(#.(swig-lispify "init" 'slotname) :pointer)
	(#.(swig-lispify "clear" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_version" 'classname)
	(#.(swig-lispify "print_version" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_child" 'classname)
	(#.(swig-lispify "child" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_str_list" 'classname)
	(#.(swig-lispify "offset_n" 'slotname) :unsigned-long))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_str" 'classname)
	(#.(swig-lispify "default_value" 'slotname) :string))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_ul" 'classname)
	(#.(swig-lispify "default_value" 'slotname) :unsigned-long))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_l" 'classname)
	(#.(swig-lispify "default_value" 'slotname) :long)
	(#.(swig-lispify "default_selected" 'slotname) :long)
	(#.(swig-lispify "set" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_i" 'classname)
	(#.(swig-lispify "default_value" 'slotname) :int))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_b" 'classname)
	(#.(swig-lispify "default_value" 'slotname) :unsigned-int)
	(#.(swig-lispify "set" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_flags" 'classname)
	(#.(swig-lispify "flags" 'slotname) :pointer)
	(#.(swig-lispify "default_value" 'slotname) :unsigned-int))

(cffi:defcstruct #.(swig-lispify "isl_arg_u_choice" 'classname)
	(#.(swig-lispify "choice" 'slotname) :pointer)
	(#.(swig-lispify "default_value" 'slotname) :unsigned-int)
	(#.(swig-lispify "default_selected" 'slotname) :unsigned-int)
	(#.(swig-lispify "set" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_args" 'classname)
	(#.(swig-lispify "options_size" 'slotname) :unsigned-long)
	(#.(swig-lispify "args" 'slotname) :pointer))

(cffi:defcfun ("isl_args_set_defaults" #.(swig-lispify "isl_args_set_defaults" 'function)) :void
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_args_free" #.(swig-lispify "isl_args_free" 'function)) :void
  (args :pointer)
  (opt :pointer))

(cffi:defcfun ("isl_args_parse" #.(swig-lispify "isl_args_parse" 'function)) :int
  (args :pointer)
  (argc :int)
  (argv :pointer)
  (opt :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("isl_options_set_ast_build_atomic_upper_bound" #.(swig-lispify "isl_options_set_ast_build_atomic_upper_bound" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_atomic_upper_bound" #.(swig-lispify "isl_options_get_ast_build_atomic_upper_bound" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_prefer_pdiv" #.(swig-lispify "isl_options_set_ast_build_prefer_pdiv" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_prefer_pdiv" #.(swig-lispify "isl_options_get_ast_build_prefer_pdiv" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_detect_min_max" #.(swig-lispify "isl_options_set_ast_build_detect_min_max" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_detect_min_max" #.(swig-lispify "isl_options_get_ast_build_detect_min_max" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_exploit_nested_bounds" #.(swig-lispify "isl_options_set_ast_build_exploit_nested_bounds" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_exploit_nested_bounds" #.(swig-lispify "isl_options_get_ast_build_exploit_nested_bounds" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_group_coscheduled" #.(swig-lispify "isl_options_set_ast_build_group_coscheduled" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_group_coscheduled" #.(swig-lispify "isl_options_get_ast_build_group_coscheduled" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_separation_bounds" #.(swig-lispify "isl_options_set_ast_build_separation_bounds" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_separation_bounds" #.(swig-lispify "isl_options_get_ast_build_separation_bounds" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_scale_strides" #.(swig-lispify "isl_options_set_ast_build_scale_strides" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_scale_strides" #.(swig-lispify "isl_options_get_ast_build_scale_strides" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_allow_else" #.(swig-lispify "isl_options_set_ast_build_allow_else" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_allow_else" #.(swig-lispify "isl_options_get_ast_build_allow_else" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_build_allow_or" #.(swig-lispify "isl_options_set_ast_build_allow_or" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_build_allow_or" #.(swig-lispify "isl_options_get_ast_build_allow_or" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_build_get_ctx" #.(swig-lispify "isl_ast_build_get_ctx" 'function)) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_alloc" #.(swig-lispify "isl_ast_build_alloc" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ast_build_from_context" #.(swig-lispify "isl_ast_build_from_context" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_ast_build_get_schedule_space" #.(swig-lispify "isl_ast_build_get_schedule_space" 'function)) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_get_schedule" #.(swig-lispify "isl_ast_build_get_schedule" 'function)) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_restrict" #.(swig-lispify "isl_ast_build_restrict" 'function)) :pointer
  (build :pointer)
  (set :pointer))

(cffi:defcfun ("isl_ast_build_copy" #.(swig-lispify "isl_ast_build_copy" 'function)) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_free" #.(swig-lispify "isl_ast_build_free" 'function)) :pointer
  (build :pointer))

(cffi:defcfun ("isl_ast_build_set_options" #.(swig-lispify "isl_ast_build_set_options" 'function)) :pointer
  (build :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_build_set_iterators" #.(swig-lispify "isl_ast_build_set_iterators" 'function)) :pointer
  (build :pointer)
  (iterators :pointer))

(cffi:defcfun ("isl_ast_build_set_at_each_domain" #.(swig-lispify "isl_ast_build_set_at_each_domain" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_before_each_for" #.(swig-lispify "isl_ast_build_set_before_each_for" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_after_each_for" #.(swig-lispify "isl_ast_build_set_after_each_for" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_before_each_mark" #.(swig-lispify "isl_ast_build_set_before_each_mark" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_after_each_mark" #.(swig-lispify "isl_ast_build_set_after_each_mark" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_set_create_leaf" #.(swig-lispify "isl_ast_build_set_create_leaf" 'function)) :pointer
  (build :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_build_expr_from_set" #.(swig-lispify "isl_ast_build_expr_from_set" 'function)) :pointer
  (build :pointer)
  (set :pointer))

(cffi:defcfun ("isl_ast_build_expr_from_pw_aff" #.(swig-lispify "isl_ast_build_expr_from_pw_aff" 'function)) :pointer
  (build :pointer)
  (pa :pointer))

(cffi:defcfun ("isl_ast_build_access_from_pw_multi_aff" #.(swig-lispify "isl_ast_build_access_from_pw_multi_aff" 'function)) :pointer
  (build :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_ast_build_access_from_multi_pw_aff" #.(swig-lispify "isl_ast_build_access_from_multi_pw_aff" 'function)) :pointer
  (build :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_ast_build_call_from_pw_multi_aff" #.(swig-lispify "isl_ast_build_call_from_pw_multi_aff" 'function)) :pointer
  (build :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_ast_build_call_from_multi_pw_aff" #.(swig-lispify "isl_ast_build_call_from_multi_pw_aff" 'function)) :pointer
  (build :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_ast_build_node_from_schedule" #.(swig-lispify "isl_ast_build_node_from_schedule" 'function)) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_ast_build_node_from_schedule_map" #.(swig-lispify "isl_ast_build_node_from_schedule_map" 'function)) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_ast_build_ast_from_schedule" #.(swig-lispify "isl_ast_build_ast_from_schedule" 'function)) :pointer
  (build :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_options_set_ast_iterator_type" #.(swig-lispify "isl_options_set_ast_iterator_type" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :string))

(cffi:defcfun ("isl_options_get_ast_iterator_type" #.(swig-lispify "isl_options_get_ast_iterator_type" 'function)) :string
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_ast_always_print_block" #.(swig-lispify "isl_options_set_ast_always_print_block" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_always_print_block" #.(swig-lispify "isl_options_get_ast_always_print_block" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_expr_from_val" #.(swig-lispify "isl_ast_expr_from_val" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_ast_expr_from_id" #.(swig-lispify "isl_ast_expr_from_id" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_ast_expr_neg" #.(swig-lispify "isl_ast_expr_neg" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_add" #.(swig-lispify "isl_ast_expr_add" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_sub" #.(swig-lispify "isl_ast_expr_sub" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_mul" #.(swig-lispify "isl_ast_expr_mul" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_div" #.(swig-lispify "isl_ast_expr_div" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_pdiv_q" #.(swig-lispify "isl_ast_expr_pdiv_q" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_pdiv_r" #.(swig-lispify "isl_ast_expr_pdiv_r" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_and" #.(swig-lispify "isl_ast_expr_and" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_and_then" #.(swig-lispify "isl_ast_expr_and_then" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_or" #.(swig-lispify "isl_ast_expr_or" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_or_else" #.(swig-lispify "isl_ast_expr_or_else" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_le" #.(swig-lispify "isl_ast_expr_le" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_lt" #.(swig-lispify "isl_ast_expr_lt" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_ge" #.(swig-lispify "isl_ast_expr_ge" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_gt" #.(swig-lispify "isl_ast_expr_gt" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_eq" #.(swig-lispify "isl_ast_expr_eq" 'function)) :pointer
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_access" #.(swig-lispify "isl_ast_expr_access" 'function)) :pointer
  (array :pointer)
  (indices :pointer))

(cffi:defcfun ("isl_ast_expr_call" #.(swig-lispify "isl_ast_expr_call" 'function)) :pointer
  (function :pointer)
  (arguments :pointer))

(cffi:defcfun ("isl_ast_expr_address_of" #.(swig-lispify "isl_ast_expr_address_of" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_copy" #.(swig-lispify "isl_ast_expr_copy" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_free" #.(swig-lispify "isl_ast_expr_free" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_ctx" #.(swig-lispify "isl_ast_expr_get_ctx" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_type" #.(swig-lispify "isl_ast_expr_get_type" 'function)) #.(swig-lispify "isl_ast_expr_type" 'enumname)
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_int_get_val" #.(swig-lispify "isl_ast_expr_int_get_val" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_val" #.(swig-lispify "isl_ast_expr_get_val" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_id_get_id" #.(swig-lispify "isl_ast_expr_id_get_id" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_id" #.(swig-lispify "isl_ast_expr_get_id" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_type" #.(swig-lispify "isl_ast_expr_op_get_type" 'function)) #.(swig-lispify "isl_ast_expr_op_type" 'enumname)
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_op_type" #.(swig-lispify "isl_ast_expr_get_op_type" 'function)) #.(swig-lispify "isl_ast_expr_op_type" 'enumname)
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_n_arg" #.(swig-lispify "isl_ast_expr_op_get_n_arg" 'function)) :int
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_get_op_n_arg" #.(swig-lispify "isl_ast_expr_get_op_n_arg" 'function)) :int
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_op_get_arg" #.(swig-lispify "isl_ast_expr_op_get_arg" 'function)) :pointer
  (expr :pointer)
  (pos :int))

(cffi:defcfun ("isl_ast_expr_get_op_arg" #.(swig-lispify "isl_ast_expr_get_op_arg" 'function)) :pointer
  (expr :pointer)
  (pos :int))

(cffi:defcfun ("isl_ast_expr_set_op_arg" #.(swig-lispify "isl_ast_expr_set_op_arg" 'function)) :pointer
  (expr :pointer)
  (pos :int)
  (arg :pointer))

(cffi:defcfun ("isl_ast_expr_is_equal" #.(swig-lispify "isl_ast_expr_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (expr1 :pointer)
  (expr2 :pointer))

(cffi:defcfun ("isl_ast_expr_substitute_ids" #.(swig-lispify "isl_ast_expr_substitute_ids" 'function)) :pointer
  (expr :pointer)
  (id2expr :pointer))

(cffi:defcfun ("isl_printer_print_ast_expr" #.(swig-lispify "isl_printer_print_ast_expr" 'function)) :pointer
  (p :pointer)
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_dump" #.(swig-lispify "isl_ast_expr_dump" 'function)) :void
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_to_str" #.(swig-lispify "isl_ast_expr_to_str" 'function)) :string
  (expr :pointer))

(cffi:defcfun ("isl_ast_expr_to_C_str" #.(swig-lispify "isl_ast_expr_to_C_str" 'function)) :string
  (expr :pointer))

(cffi:defcfun ("isl_ast_node_alloc_user" #.(swig-lispify "isl_ast_node_alloc_user" 'function)) :pointer
  (expr :pointer))

(cffi:defcfun ("isl_ast_node_copy" #.(swig-lispify "isl_ast_node_copy" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_free" #.(swig-lispify "isl_ast_node_free" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_get_ctx" #.(swig-lispify "isl_ast_node_get_ctx" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_get_type" #.(swig-lispify "isl_ast_node_get_type" 'function)) #.(swig-lispify "isl_ast_node_type" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_set_annotation" #.(swig-lispify "isl_ast_node_set_annotation" 'function)) :pointer
  (node :pointer)
  (annotation :pointer))

(cffi:defcfun ("isl_ast_node_get_annotation" #.(swig-lispify "isl_ast_node_get_annotation" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_iterator" #.(swig-lispify "isl_ast_node_for_get_iterator" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_init" #.(swig-lispify "isl_ast_node_for_get_init" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_cond" #.(swig-lispify "isl_ast_node_for_get_cond" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_inc" #.(swig-lispify "isl_ast_node_for_get_inc" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_get_body" #.(swig-lispify "isl_ast_node_for_get_body" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_for_is_degenerate" #.(swig-lispify "isl_ast_node_for_is_degenerate" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_cond" #.(swig-lispify "isl_ast_node_if_get_cond" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_then_node" #.(swig-lispify "isl_ast_node_if_get_then_node" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_then" #.(swig-lispify "isl_ast_node_if_get_then" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_has_else_node" #.(swig-lispify "isl_ast_node_if_has_else_node" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_has_else" #.(swig-lispify "isl_ast_node_if_has_else" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_else_node" #.(swig-lispify "isl_ast_node_if_get_else_node" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_if_get_else" #.(swig-lispify "isl_ast_node_if_get_else" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_block_get_children" #.(swig-lispify "isl_ast_node_block_get_children" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_mark_get_id" #.(swig-lispify "isl_ast_node_mark_get_id" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_mark_get_node" #.(swig-lispify "isl_ast_node_mark_get_node" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_user_get_expr" #.(swig-lispify "isl_ast_node_user_get_expr" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_ast_node_foreach_descendant_top_down" #.(swig-lispify "isl_ast_node_foreach_descendant_top_down" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_ast_node" #.(swig-lispify "isl_printer_print_ast_node" 'function)) :pointer
  (p :pointer)
  (node :pointer))

(cffi:defcfun ("isl_ast_node_dump" #.(swig-lispify "isl_ast_node_dump" 'function)) :void
  (node :pointer))

(cffi:defcfun ("isl_ast_node_to_str" #.(swig-lispify "isl_ast_node_to_str" 'function)) :string
  (node :pointer))

(cffi:defcfun ("isl_ast_print_options_alloc" #.(swig-lispify "isl_ast_print_options_alloc" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_ast_print_options_copy" #.(swig-lispify "isl_ast_print_options_copy" 'function)) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_free" #.(swig-lispify "isl_ast_print_options_free" 'function)) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_get_ctx" #.(swig-lispify "isl_ast_print_options_get_ctx" 'function)) :pointer
  (options :pointer))

(cffi:defcfun ("isl_ast_print_options_set_print_user" #.(swig-lispify "isl_ast_print_options_set_print_user" 'function)) :pointer
  (options :pointer)
  (print_user :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_print_options_set_print_for" #.(swig-lispify "isl_ast_print_options_set_print_for" 'function)) :pointer
  (options :pointer)
  (print_for :pointer)
  (user :pointer))

(cffi:defcfun ("isl_options_set_ast_print_macro_once" #.(swig-lispify "isl_options_set_ast_print_macro_once" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_ast_print_macro_once" #.(swig-lispify "isl_options_get_ast_print_macro_once" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_ast_expr_foreach_ast_expr_op_type" #.(swig-lispify "isl_ast_expr_foreach_ast_expr_op_type" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (expr :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_foreach_ast_op_type" #.(swig-lispify "isl_ast_expr_foreach_ast_op_type" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (expr :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_foreach_ast_expr_op_type" #.(swig-lispify "isl_ast_node_foreach_ast_expr_op_type" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_node_foreach_ast_op_type" #.(swig-lispify "isl_ast_node_foreach_ast_op_type" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_ast_expr_op_type_set_print_name" #.(swig-lispify "isl_ast_expr_op_type_set_print_name" 'function)) :pointer
  (p :pointer)
  (type #.(swig-lispify "isl_ast_expr_op_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_ast_op_type_set_print_name" #.(swig-lispify "isl_ast_op_type_set_print_name" 'function)) :pointer
  (p :pointer)
  (type #.(swig-lispify "isl_ast_expr_op_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_ast_expr_op_type_print_macro" #.(swig-lispify "isl_ast_expr_op_type_print_macro" 'function)) :pointer
  (type #.(swig-lispify "isl_ast_expr_op_type" 'enumname))
  (p :pointer))

(cffi:defcfun ("isl_ast_op_type_print_macro" #.(swig-lispify "isl_ast_op_type_print_macro" 'function)) :pointer
  (type #.(swig-lispify "isl_ast_expr_op_type" 'enumname))
  (p :pointer))

(cffi:defcfun ("isl_ast_expr_print_macros" #.(swig-lispify "isl_ast_expr_print_macros" 'function)) :pointer
  (expr :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_node_print_macros" #.(swig-lispify "isl_ast_node_print_macros" 'function)) :pointer
  (node :pointer)
  (p :pointer))

(cffi:defcfun ("isl_ast_node_print" #.(swig-lispify "isl_ast_node_print" 'function)) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_for_print" #.(swig-lispify "isl_ast_node_for_print" 'function)) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_if_print" #.(swig-lispify "isl_ast_node_if_print" 'function)) :pointer
  (node :pointer)
  (p :pointer)
  (options :pointer))

(cffi:defcfun ("isl_ast_node_to_C_str" #.(swig-lispify "isl_ast_node_to_C_str" 'function)) :string
  (node :pointer))

(cffi:defcfun ("isl_constraint_list_get_ctx" #.(swig-lispify "isl_constraint_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_from_constraint" #.(swig-lispify "isl_constraint_list_from_constraint" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_alloc" #.(swig-lispify "isl_constraint_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_constraint_list_copy" #.(swig-lispify "isl_constraint_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_free" #.(swig-lispify "isl_constraint_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_add" #.(swig-lispify "isl_constraint_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_insert" #.(swig-lispify "isl_constraint_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_drop" #.(swig-lispify "isl_constraint_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_constraint_list_clear" #.(swig-lispify "isl_constraint_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_swap" #.(swig-lispify "isl_constraint_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_constraint_list_reverse" #.(swig-lispify "isl_constraint_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_concat" #.(swig-lispify "isl_constraint_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_constraint_list_size" #.(swig-lispify "isl_constraint_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_n_constraint" #.(swig-lispify "isl_constraint_list_n_constraint" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_get_at" #.(swig-lispify "isl_constraint_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_constraint_list_get_constraint" #.(swig-lispify "isl_constraint_list_get_constraint" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_constraint_list_set_constraint" #.(swig-lispify "isl_constraint_list_set_constraint" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_constraint_list_foreach" #.(swig-lispify "isl_constraint_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_map" #.(swig-lispify "isl_constraint_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_sort" #.(swig-lispify "isl_constraint_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_constraint_list_foreach_scc" #.(swig-lispify "isl_constraint_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_constraint_list_to_str" #.(swig-lispify "isl_constraint_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_constraint_list" #.(swig-lispify "isl_printer_print_constraint_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_constraint_list_dump" #.(swig-lispify "isl_constraint_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_constraint_get_ctx" #.(swig-lispify "isl_constraint_get_ctx" 'function)) :pointer
  (c :pointer))

(cffi:defcfun ("isl_constraint_alloc_equality" #.(swig-lispify "isl_constraint_alloc_equality" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_constraint_alloc_inequality" #.(swig-lispify "isl_constraint_alloc_inequality" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_equality_alloc" #.(swig-lispify "isl_equality_alloc" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_inequality_alloc" #.(swig-lispify "isl_inequality_alloc" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_constraint_copy" #.(swig-lispify "isl_constraint_copy" 'function)) :pointer
  (c :pointer))

(cffi:defcfun ("isl_constraint_free" #.(swig-lispify "isl_constraint_free" 'function)) :pointer
  (c :pointer))

(cffi:defcfun ("isl_basic_map_n_constraint" #.(swig-lispify "isl_basic_map_n_constraint" 'function)) :int
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_n_constraint" #.(swig-lispify "isl_basic_set_n_constraint" 'function)) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_foreach_constraint" #.(swig-lispify "isl_basic_map_foreach_constraint" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (bmap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_set_foreach_constraint" #.(swig-lispify "isl_basic_set_foreach_constraint" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (bset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_get_constraint_list" #.(swig-lispify "isl_basic_map_get_constraint_list" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_get_constraint_list" #.(swig-lispify "isl_basic_set_get_constraint_list" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_constraint_is_equal" #.(swig-lispify "isl_constraint_is_equal" 'function)) :int
  (constraint1 :pointer)
  (constraint2 :pointer))

(cffi:defcfun ("isl_basic_set_foreach_bound_pair" #.(swig-lispify "isl_basic_set_foreach_bound_pair" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_add_constraint" #.(swig-lispify "isl_basic_map_add_constraint" 'function)) :pointer
  (bmap :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_add_constraint" #.(swig-lispify "isl_basic_set_add_constraint" 'function)) :pointer
  (bset :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_map_add_constraint" #.(swig-lispify "isl_map_add_constraint" 'function)) :pointer
  (map :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_set_add_constraint" #.(swig-lispify "isl_set_add_constraint" 'function)) :pointer
  (set :pointer)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_map_has_defining_equality" #.(swig-lispify "isl_basic_map_has_defining_equality" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (c :pointer))

(cffi:defcfun ("isl_basic_set_has_defining_equality" #.(swig-lispify "isl_basic_set_has_defining_equality" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_has_defining_inequalities" #.(swig-lispify "isl_basic_set_has_defining_inequalities" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (lower :pointer)
  (upper :pointer))

(cffi:defcfun ("isl_constraint_get_space" #.(swig-lispify "isl_constraint_get_space" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_local_space" #.(swig-lispify "isl_constraint_get_local_space" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_dim" #.(swig-lispify "isl_constraint_dim" 'function)) :int
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_constraint_involves_dims" #.(swig-lispify "isl_constraint_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_constraint_get_dim_name" #.(swig-lispify "isl_constraint_get_dim_name" 'function)) :string
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_constraint_get_constant_val" #.(swig-lispify "isl_constraint_get_constant_val" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_coefficient_val" #.(swig-lispify "isl_constraint_get_coefficient_val" 'function)) :pointer
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int))

(cffi:defcfun ("isl_constraint_set_constant_si" #.(swig-lispify "isl_constraint_set_constant_si" 'function)) :pointer
  (constraint :pointer)
  (v :int))

(cffi:defcfun ("isl_constraint_set_constant_val" #.(swig-lispify "isl_constraint_set_constant_val" 'function)) :pointer
  (constraint :pointer)
  (v :pointer))

(cffi:defcfun ("isl_constraint_set_coefficient_si" #.(swig-lispify "isl_constraint_set_coefficient_si" 'function)) :pointer
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_constraint_set_coefficient_val" #.(swig-lispify "isl_constraint_set_coefficient_val" 'function)) :pointer
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_constraint_get_div" #.(swig-lispify "isl_constraint_get_div" 'function)) :pointer
  (constraint :pointer)
  (pos :int))

(cffi:defcfun ("isl_constraint_negate" #.(swig-lispify "isl_constraint_negate" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_equality" #.(swig-lispify "isl_constraint_is_equality" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_div_constraint" #.(swig-lispify "isl_constraint_is_div_constraint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_is_lower_bound" #.(swig-lispify "isl_constraint_is_lower_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_constraint_is_upper_bound" #.(swig-lispify "isl_constraint_is_upper_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_from_constraint" #.(swig-lispify "isl_basic_map_from_constraint" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_basic_set_from_constraint" #.(swig-lispify "isl_basic_set_from_constraint" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_constraint_get_bound" #.(swig-lispify "isl_constraint_get_bound" 'function)) :pointer
  (constraint :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int))

(cffi:defcfun ("isl_constraint_get_aff" #.(swig-lispify "isl_constraint_get_aff" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("isl_equality_from_aff" #.(swig-lispify "isl_equality_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_inequality_from_aff" #.(swig-lispify "isl_inequality_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_constraint_plain_cmp" #.(swig-lispify "isl_constraint_plain_cmp" 'function)) :int
  (c1 :pointer)
  (c2 :pointer))

(cffi:defcfun ("isl_constraint_cmp_last_non_zero" #.(swig-lispify "isl_constraint_cmp_last_non_zero" 'function)) :int
  (c1 :pointer)
  (c2 :pointer))

(cffi:defcfun ("isl_printer_print_constraint" #.(swig-lispify "isl_printer_print_constraint" 'function)) :pointer
  (p :pointer)
  (c :pointer))

(cffi:defcfun ("isl_constraint_dump" #.(swig-lispify "isl_constraint_dump" 'function)) :void
  (c :pointer))

(cffi:defcfun ("isl_fixed_box_get_ctx" #.(swig-lispify "isl_fixed_box_get_ctx" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_space" #.(swig-lispify "isl_fixed_box_get_space" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_is_valid" #.(swig-lispify "isl_fixed_box_is_valid" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_offset" #.(swig-lispify "isl_fixed_box_get_offset" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_get_size" #.(swig-lispify "isl_fixed_box_get_size" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_copy" #.(swig-lispify "isl_fixed_box_copy" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_free" #.(swig-lispify "isl_fixed_box_free" 'function)) :pointer
  (box :pointer))

(cffi:defcfun ("isl_printer_print_fixed_box" #.(swig-lispify "isl_printer_print_fixed_box" 'function)) :pointer
  (p :pointer)
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_to_str" #.(swig-lispify "isl_fixed_box_to_str" 'function)) :string
  (box :pointer))

(cffi:defcfun ("isl_fixed_box_dump" #.(swig-lispify "isl_fixed_box_dump" 'function)) :void
  (box :pointer))

(cffi:defcfun ("isl_restriction_free" #.(swig-lispify "isl_restriction_free" 'function)) :pointer
  (restr :pointer))

(cffi:defcfun ("isl_restriction_empty" #.(swig-lispify "isl_restriction_empty" 'function)) :pointer
  (source_map :pointer))

(cffi:defcfun ("isl_restriction_none" #.(swig-lispify "isl_restriction_none" 'function)) :pointer
  (source_map :pointer))

(cffi:defcfun ("isl_restriction_input" #.(swig-lispify "isl_restriction_input" 'function)) :pointer
  (source_restr :pointer)
  (sink_restr :pointer))

(cffi:defcfun ("isl_restriction_output" #.(swig-lispify "isl_restriction_output" 'function)) :pointer
  (source_restr :pointer))

(cffi:defcfun ("isl_restriction_get_ctx" #.(swig-lispify "isl_restriction_get_ctx" 'function)) :pointer
  (restr :pointer))

(cffi:defcfun ("isl_access_info_alloc" #.(swig-lispify "isl_access_info_alloc" 'function)) :pointer
  (sink :pointer)
  (sink_user :pointer)
  (fn :pointer)
  (max_source :int))

(cffi:defcfun ("isl_access_info_set_restrict" #.(swig-lispify "isl_access_info_set_restrict" 'function)) :pointer
  (acc :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_access_info_add_source" #.(swig-lispify "isl_access_info_add_source" 'function)) :pointer
  (acc :pointer)
  (source :pointer)
  (must :int)
  (source_user :pointer))

(cffi:defcfun ("isl_access_info_free" #.(swig-lispify "isl_access_info_free" 'function)) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_access_info_get_ctx" #.(swig-lispify "isl_access_info_get_ctx" 'function)) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_access_info_compute_flow" #.(swig-lispify "isl_access_info_compute_flow" 'function)) :pointer
  (acc :pointer))

(cffi:defcfun ("isl_flow_foreach" #.(swig-lispify "isl_flow_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (deps :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_flow_get_no_source" #.(swig-lispify "isl_flow_get_no_source" 'function)) :pointer
  (deps :pointer)
  (must :int))

(cffi:defcfun ("isl_flow_free" #.(swig-lispify "isl_flow_free" 'function)) :pointer
  (deps :pointer))

(cffi:defcfun ("isl_flow_get_ctx" #.(swig-lispify "isl_flow_get_ctx" 'function)) :pointer
  (deps :pointer))

(cffi:defcfun ("isl_union_access_info_from_sink" #.(swig-lispify "isl_union_access_info_from_sink" 'function)) :pointer
  (sink :pointer))

(cffi:defcfun ("isl_union_access_info_set_must_source" #.(swig-lispify "isl_union_access_info_set_must_source" 'function)) :pointer
  (access :pointer)
  (must_source :pointer))

(cffi:defcfun ("isl_union_access_info_set_may_source" #.(swig-lispify "isl_union_access_info_set_may_source" 'function)) :pointer
  (access :pointer)
  (may_source :pointer))

(cffi:defcfun ("isl_union_access_info_set_kill" #.(swig-lispify "isl_union_access_info_set_kill" 'function)) :pointer
  (access :pointer)
  (kill :pointer))

(cffi:defcfun ("isl_union_access_info_set_schedule" #.(swig-lispify "isl_union_access_info_set_schedule" 'function)) :pointer
  (access :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_union_access_info_set_schedule_map" #.(swig-lispify "isl_union_access_info_set_schedule_map" 'function)) :pointer
  (access :pointer)
  (schedule_map :pointer))

(cffi:defcfun ("isl_union_access_info_copy" #.(swig-lispify "isl_union_access_info_copy" 'function)) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_free" #.(swig-lispify "isl_union_access_info_free" 'function)) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_get_ctx" #.(swig-lispify "isl_union_access_info_get_ctx" 'function)) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_read_from_file" #.(swig-lispify "isl_union_access_info_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_printer_print_union_access_info" #.(swig-lispify "isl_printer_print_union_access_info" 'function)) :pointer
  (p :pointer)
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_to_str" #.(swig-lispify "isl_union_access_info_to_str" 'function)) :string
  (access :pointer))

(cffi:defcfun ("isl_union_access_info_compute_flow" #.(swig-lispify "isl_union_access_info_compute_flow" 'function)) :pointer
  (access :pointer))

(cffi:defcfun ("isl_union_flow_get_ctx" #.(swig-lispify "isl_union_flow_get_ctx" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_copy" #.(swig-lispify "isl_union_flow_copy" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_must_dependence" #.(swig-lispify "isl_union_flow_get_must_dependence" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_may_dependence" #.(swig-lispify "isl_union_flow_get_may_dependence" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_full_must_dependence" #.(swig-lispify "isl_union_flow_get_full_must_dependence" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_full_may_dependence" #.(swig-lispify "isl_union_flow_get_full_may_dependence" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_must_no_source" #.(swig-lispify "isl_union_flow_get_must_no_source" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_get_may_no_source" #.(swig-lispify "isl_union_flow_get_may_no_source" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_free" #.(swig-lispify "isl_union_flow_free" 'function)) :pointer
  (flow :pointer))

(cffi:defcfun ("isl_printer_print_union_flow" #.(swig-lispify "isl_printer_print_union_flow" 'function)) :pointer
  (p :pointer)
  (flow :pointer))

(cffi:defcfun ("isl_union_flow_to_str" #.(swig-lispify "isl_union_flow_to_str" 'function)) :string
  (flow :pointer))

(cffi:defcfun ("isl_union_map_compute_flow" #.(swig-lispify "isl_union_map_compute_flow" 'function)) :int
  (sink :pointer)
  (must_source :pointer)
  (may_source :pointer)
  (schedule :pointer)
  (must_dep :pointer)
  (may_dep :pointer)
  (must_no_source :pointer)
  (may_no_source :pointer))

(cffi:defcfun ("isl_hash_string" #.(swig-lispify "isl_hash_string" 'function)) :unsigned-int
  (hash :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_hash_mem" #.(swig-lispify "isl_hash_mem" 'function)) :unsigned-int
  (hash :unsigned-int)
  (p :pointer)
  (len :unsigned-long))

(cffi:defcstruct #.(swig-lispify "isl_hash_table_entry" 'classname)
	(#.(swig-lispify "hash" 'slotname) :unsigned-int)
	(#.(swig-lispify "data" 'slotname) :pointer))

(cffi:defcstruct #.(swig-lispify "isl_hash_table" 'classname)
	(#.(swig-lispify "bits" 'slotname) :int)
	(#.(swig-lispify "n" 'slotname) :int)
	(#.(swig-lispify "entries" 'slotname) :pointer))

(cffi:defcfun ("isl_hash_table_alloc" #.(swig-lispify "isl_hash_table_alloc" 'function)) :pointer
  (ctx :pointer)
  (min_size :int))

(cffi:defcfun ("isl_hash_table_free" #.(swig-lispify "isl_hash_table_free" 'function)) :void
  (ctx :pointer)
  (table :pointer))

(cffi:defcfun ("isl_hash_table_init" #.(swig-lispify "isl_hash_table_init" 'function)) :int
  (ctx :pointer)
  (table :pointer)
  (min_size :int))

(cffi:defcfun ("isl_hash_table_clear" #.(swig-lispify "isl_hash_table_clear" 'function)) :void
  (table :pointer))

(cffi:defcvar ("isl_hash_table_entry_none" #.(swig-lispify "isl_hash_table_entry_none" 'variable))
 :pointer)

(cffi:defcfun ("isl_hash_table_find" #.(swig-lispify "isl_hash_table_find" 'function)) :pointer
  (ctx :pointer)
  (table :pointer)
  (key_hash :unsigned-int)
  (eq :pointer)
  (val :pointer)
  (reserve :int))

(cffi:defcfun ("isl_hash_table_foreach" #.(swig-lispify "isl_hash_table_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (table :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_hash_table_remove" #.(swig-lispify "isl_hash_table_remove" 'function)) :void
  (ctx :pointer)
  (table :pointer)
  (entry :pointer))

(cffi:defcfun ("ISL_HMAP_alloc" #.(swig-lispify "ISL_HMAP_alloc" 'function)) :pointer
  (ctx :pointer)
  (min_size :int))

(cffi:defcfun ("ISL_HMAP_copy" #.(swig-lispify "ISL_HMAP_copy" 'function)) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_free" #.(swig-lispify "ISL_HMAP_free" 'function)) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_get_ctx" #.(swig-lispify "ISL_HMAP_get_ctx" 'function)) :pointer
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_try_get" #.(swig-lispify "ISL_HMAP_try_get" 'function)) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_has" #.(swig-lispify "ISL_HMAP_has" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_get" #.(swig-lispify "ISL_HMAP_get" 'function)) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_set" #.(swig-lispify "ISL_HMAP_set" 'function)) :pointer
  (hmap :pointer)
  (key :pointer)
  (val :pointer))

(cffi:defcfun ("ISL_HMAP_drop" #.(swig-lispify "ISL_HMAP_drop" 'function)) :pointer
  (hmap :pointer)
  (key :pointer))

(cffi:defcfun ("ISL_HMAP_foreach" #.(swig-lispify "ISL_HMAP_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (hmap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_ISL_HMAP_SUFFIX" #.(swig-lispify "isl_printer_print_ISL_HMAP_SUFFIX" 'function)) :pointer
  (p :pointer)
  (hmap :pointer))

(cffi:defcfun ("ISL_HMAP_dump" #.(swig-lispify "ISL_HMAP_dump" 'function)) :void
  (hmap :pointer))

(cffi:defcfun ("isl_id_list_get_ctx" #.(swig-lispify "isl_id_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_from_id" #.(swig-lispify "isl_id_list_from_id" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_id_list_alloc" #.(swig-lispify "isl_id_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_id_list_copy" #.(swig-lispify "isl_id_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_free" #.(swig-lispify "isl_id_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_add" #.(swig-lispify "isl_id_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_id_list_insert" #.(swig-lispify "isl_id_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_id_list_drop" #.(swig-lispify "isl_id_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_id_list_clear" #.(swig-lispify "isl_id_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_swap" #.(swig-lispify "isl_id_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_id_list_reverse" #.(swig-lispify "isl_id_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_id_list_concat" #.(swig-lispify "isl_id_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_id_list_size" #.(swig-lispify "isl_id_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_id_list_n_id" #.(swig-lispify "isl_id_list_n_id" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_id_list_get_at" #.(swig-lispify "isl_id_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_id_list_get_id" #.(swig-lispify "isl_id_list_get_id" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_id_list_set_id" #.(swig-lispify "isl_id_list_set_id" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_id_list_foreach" #.(swig-lispify "isl_id_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_map" #.(swig-lispify "isl_id_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_sort" #.(swig-lispify "isl_id_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_id_list_foreach_scc" #.(swig-lispify "isl_id_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_id_list_to_str" #.(swig-lispify "isl_id_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_id_list" #.(swig-lispify "isl_printer_print_id_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_id_list_dump" #.(swig-lispify "isl_id_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_multi_id_get_ctx" #.(swig-lispify "isl_multi_id_get_ctx" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_space" #.(swig-lispify "isl_multi_id_get_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_domain_space" #.(swig-lispify "isl_multi_id_get_domain_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_from_id_list" #.(swig-lispify "isl_multi_id_from_id_list" 'function)) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_id_copy" #.(swig-lispify "isl_multi_id_copy" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_free" #.(swig-lispify "isl_multi_id_free" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_plain_is_equal" #.(swig-lispify "isl_multi_id_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_reset_user" #.(swig-lispify "isl_multi_id_reset_user" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_size" #.(swig-lispify "isl_multi_id_size" 'function)) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_get_at" #.(swig-lispify "isl_multi_id_get_at" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_id_get_id" #.(swig-lispify "isl_multi_id_get_id" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_id_set_at" #.(swig-lispify "isl_multi_id_set_at" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_id_set_id" #.(swig-lispify "isl_multi_id_set_id" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_id_range_splice" #.(swig-lispify "isl_multi_id_range_splice" 'function)) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_flatten_range" #.(swig-lispify "isl_multi_id_flatten_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_flat_range_product" #.(swig-lispify "isl_multi_id_flat_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_range_product" #.(swig-lispify "isl_multi_id_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_id_factor_range" #.(swig-lispify "isl_multi_id_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_is_wrapping" #.(swig-lispify "isl_multi_id_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_factor_domain" #.(swig-lispify "isl_multi_id_range_factor_domain" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_range_factor_range" #.(swig-lispify "isl_multi_id_range_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_id_align_params" #.(swig-lispify "isl_multi_id_align_params" 'function)) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_id_from_range" #.(swig-lispify "isl_multi_id_from_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_id_get_ctx" #.(swig-lispify "isl_id_get_ctx" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_hash" #.(swig-lispify "isl_id_get_hash" 'function)) :unsigned-int
  (id :pointer))

(cffi:defcfun ("isl_id_alloc" #.(swig-lispify "isl_id_alloc" 'function)) :pointer
  (ctx :pointer)
  (name :string)
  (user :pointer))

(cffi:defcfun ("isl_id_copy" #.(swig-lispify "isl_id_copy" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_free" #.(swig-lispify "isl_id_free" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_user" #.(swig-lispify "isl_id_get_user" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_get_name" #.(swig-lispify "isl_id_get_name" 'function)) :pointer
  (id :pointer))

(cffi:defcfun ("isl_id_set_free_user" #.(swig-lispify "isl_id_set_free_user" 'function)) :pointer
  (id :pointer)
  (free_user :pointer))

(cffi:defcfun ("isl_id_read_from_str" #.(swig-lispify "isl_id_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_id_to_str" #.(swig-lispify "isl_id_to_str" 'function)) :string
  (id :pointer))

(cffi:defcfun ("isl_printer_print_id" #.(swig-lispify "isl_printer_print_id" 'function)) :pointer
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_id_dump" #.(swig-lispify "isl_id_dump" 'function)) :void
  (id :pointer))

(cffi:defcfun ("isl_multi_id_read_from_str" #.(swig-lispify "isl_multi_id_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_multi_id" #.(swig-lispify "isl_printer_print_multi_id" 'function)) :pointer
  (p :pointer)
  (mi :pointer))

(cffi:defcfun ("isl_multi_id_dump" #.(swig-lispify "isl_multi_id_dump" 'function)) :void
  (mi :pointer))

(cffi:defcfun ("isl_multi_id_to_str" #.(swig-lispify "isl_multi_id_to_str" 'function)) :string
  (mi :pointer))

(cffi:defcfun ("isl_basic_set_max_val" #.(swig-lispify "isl_basic_set_max_val" 'function)) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_set_min_val" #.(swig-lispify "isl_set_min_val" 'function)) :pointer
  (set :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_set_max_val" #.(swig-lispify "isl_set_max_val" 'function)) :pointer
  (set :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_union_set_min_multi_union_pw_aff" #.(swig-lispify "isl_union_set_min_multi_union_pw_aff" 'function)) :pointer
  (uset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_union_pw_aff_min_val" #.(swig-lispify "isl_union_pw_aff_min_val" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_union_pw_aff_max_val" #.(swig-lispify "isl_union_pw_aff_max_val" 'function)) :pointer
  (upa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_min_multi_val" #.(swig-lispify "isl_multi_union_pw_aff_min_multi_val" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_multi_union_pw_aff_max_multi_val" #.(swig-lispify "isl_multi_union_pw_aff_max_multi_val" 'function)) :pointer
  (mupa :pointer))

(cffi:defcfun ("isl_basic_set_dim_max_val" #.(swig-lispify "isl_basic_set_dim_max_val" 'function)) :pointer
  (bset :pointer)
  (pos :int))

(cffi:defcfun ("isl_local_space_get_ctx" #.(swig-lispify "isl_local_space_get_ctx" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_from_space" #.(swig-lispify "isl_local_space_from_space" 'function)) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_local_space_copy" #.(swig-lispify "isl_local_space_copy" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_free" #.(swig-lispify "isl_local_space_free" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_params" #.(swig-lispify "isl_local_space_is_params" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_set" #.(swig-lispify "isl_local_space_is_set" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (ls :pointer))

(cffi:defcfun ("isl_local_space_set_tuple_id" #.(swig-lispify "isl_local_space_set_tuple_id" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_local_space_dim" #.(swig-lispify "isl_local_space_dim" 'function)) :int
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_local_space_has_dim_name" #.(swig-lispify "isl_local_space_has_dim_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_get_dim_name" #.(swig-lispify "isl_local_space_get_dim_name" 'function)) :string
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_set_dim_name" #.(swig-lispify "isl_local_space_set_dim_name" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_local_space_has_dim_id" #.(swig-lispify "isl_local_space_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_get_dim_id" #.(swig-lispify "isl_local_space_get_dim_id" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_local_space_set_dim_id" #.(swig-lispify "isl_local_space_set_dim_id" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_local_space_get_space" #.(swig-lispify "isl_local_space_get_space" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_get_div" #.(swig-lispify "isl_local_space_get_div" 'function)) :pointer
  (ls :pointer)
  (pos :int))

(cffi:defcfun ("isl_local_space_find_dim_by_name" #.(swig-lispify "isl_local_space_find_dim_by_name" 'function)) :int
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_local_space_domain" #.(swig-lispify "isl_local_space_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_range" #.(swig-lispify "isl_local_space_range" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_from_domain" #.(swig-lispify "isl_local_space_from_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_add_dims" #.(swig-lispify "isl_local_space_add_dims" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_drop_dims" #.(swig-lispify "isl_local_space_drop_dims" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_insert_dims" #.(swig-lispify "isl_local_space_insert_dims" 'function)) :pointer
  (ls :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_local_space_set_from_params" #.(swig-lispify "isl_local_space_set_from_params" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_intersect" #.(swig-lispify "isl_local_space_intersect" 'function)) :pointer
  (ls1 :pointer)
  (ls2 :pointer))

(cffi:defcfun ("isl_local_space_wrap" #.(swig-lispify "isl_local_space_wrap" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_is_equal" #.(swig-lispify "isl_local_space_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (ls1 :pointer)
  (ls2 :pointer))

(cffi:defcfun ("isl_local_space_lifting" #.(swig-lispify "isl_local_space_lifting" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_flatten_domain" #.(swig-lispify "isl_local_space_flatten_domain" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_local_space_flatten_range" #.(swig-lispify "isl_local_space_flatten_range" 'function)) :pointer
  (ls :pointer))

(cffi:defcfun ("isl_printer_print_local_space" #.(swig-lispify "isl_printer_print_local_space" 'function)) :pointer
  (p :pointer)
  (ls :pointer))

(cffi:defcfun ("isl_local_space_dump" #.(swig-lispify "isl_local_space_dump" 'function)) :void
  (ls :pointer))

(cffi:defcfun ("isl_basic_set_min_lp_val" #.(swig-lispify "isl_basic_set_min_lp_val" 'function)) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_basic_set_max_lp_val" #.(swig-lispify "isl_basic_set_max_lp_val" 'function)) :pointer
  (bset :pointer)
  (obj :pointer))

(cffi:defcfun ("isl_basic_map_total_dim" #.(swig-lispify "isl_basic_map_total_dim" 'function)) :int
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_dim" #.(swig-lispify "isl_basic_map_dim" 'function)) :int
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_dim" #.(swig-lispify "isl_map_dim" 'function)) :int
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_map_get_ctx" #.(swig-lispify "isl_basic_map_get_ctx" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_get_ctx" #.(swig-lispify "isl_map_get_ctx" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_get_space" #.(swig-lispify "isl_basic_map_get_space" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_get_space" #.(swig-lispify "isl_map_get_space" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_get_div" #.(swig-lispify "isl_basic_map_get_div" 'function)) :pointer
  (bmap :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_map_get_local_space" #.(swig-lispify "isl_basic_map_get_local_space" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_set_tuple_name" #.(swig-lispify "isl_basic_map_set_tuple_name" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_basic_map_get_tuple_name" #.(swig-lispify "isl_basic_map_get_tuple_name" 'function)) :string
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_has_tuple_name" #.(swig-lispify "isl_map_has_tuple_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_get_tuple_name" #.(swig-lispify "isl_map_get_tuple_name" 'function)) :string
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_set_tuple_name" #.(swig-lispify "isl_map_set_tuple_name" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_basic_map_get_dim_name" #.(swig-lispify "isl_basic_map_get_dim_name" 'function)) :string
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_has_dim_name" #.(swig-lispify "isl_map_has_dim_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_get_dim_name" #.(swig-lispify "isl_map_get_dim_name" 'function)) :string
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_set_dim_name" #.(swig-lispify "isl_basic_map_set_dim_name" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_map_set_dim_name" #.(swig-lispify "isl_map_set_dim_name" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_basic_map_set_tuple_id" #.(swig-lispify "isl_basic_map_set_tuple_id" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_map_set_dim_id" #.(swig-lispify "isl_map_set_dim_id" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_basic_map_has_dim_id" #.(swig-lispify "isl_basic_map_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_has_dim_id" #.(swig-lispify "isl_map_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_get_dim_id" #.(swig-lispify "isl_map_get_dim_id" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_map_set_tuple_id" #.(swig-lispify "isl_map_set_tuple_id" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_map_reset_tuple_id" #.(swig-lispify "isl_map_reset_tuple_id" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_has_tuple_id" #.(swig-lispify "isl_map_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_get_tuple_id" #.(swig-lispify "isl_map_get_tuple_id" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_map_reset_user" #.(swig-lispify "isl_map_reset_user" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_find_dim_by_name" #.(swig-lispify "isl_basic_map_find_dim_by_name" 'function)) :int
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_map_find_dim_by_id" #.(swig-lispify "isl_map_find_dim_by_id" 'function)) :int
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_map_find_dim_by_name" #.(swig-lispify "isl_map_find_dim_by_name" 'function)) :int
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_basic_map_is_rational" #.(swig-lispify "isl_basic_map_is_rational" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_identity" #.(swig-lispify "isl_basic_map_identity" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_free" #.(swig-lispify "isl_basic_map_free" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_copy" #.(swig-lispify "isl_basic_map_copy" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_equal" #.(swig-lispify "isl_basic_map_equal" 'function)) :pointer
  (space :pointer)
  (n_equal :unsigned-int))

(cffi:defcfun ("isl_basic_map_less_at" #.(swig-lispify "isl_basic_map_less_at" 'function)) :pointer
  (space :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_more_at" #.(swig-lispify "isl_basic_map_more_at" 'function)) :pointer
  (space :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_empty" #.(swig-lispify "isl_basic_map_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_universe" #.(swig-lispify "isl_basic_map_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_nat_universe" #.(swig-lispify "isl_basic_map_nat_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_map_remove_redundancies" #.(swig-lispify "isl_basic_map_remove_redundancies" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_remove_redundancies" #.(swig-lispify "isl_map_remove_redundancies" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_simple_hull" #.(swig-lispify "isl_map_simple_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_unshifted_simple_hull" #.(swig-lispify "isl_map_unshifted_simple_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_plain_unshifted_simple_hull" #.(swig-lispify "isl_map_plain_unshifted_simple_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_unshifted_simple_hull_from_map_list" #.(swig-lispify "isl_map_unshifted_simple_hull_from_map_list" 'function)) :pointer
  (map :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_map_intersect_domain" #.(swig-lispify "isl_basic_map_intersect_domain" 'function)) :pointer
  (bmap :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_intersect_range" #.(swig-lispify "isl_basic_map_intersect_range" 'function)) :pointer
  (bmap :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_intersect" #.(swig-lispify "isl_basic_map_intersect" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_list_intersect" #.(swig-lispify "isl_basic_map_list_intersect" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_union" #.(swig-lispify "isl_basic_map_union" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_apply_domain" #.(swig-lispify "isl_basic_map_apply_domain" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_apply_range" #.(swig-lispify "isl_basic_map_apply_range" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_affine_hull" #.(swig-lispify "isl_basic_map_affine_hull" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_preimage_domain_multi_aff" #.(swig-lispify "isl_basic_map_preimage_domain_multi_aff" 'function)) :pointer
  (bmap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_map_preimage_range_multi_aff" #.(swig-lispify "isl_basic_map_preimage_range_multi_aff" 'function)) :pointer
  (bmap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_map_reverse" #.(swig-lispify "isl_basic_map_reverse" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_domain" #.(swig-lispify "isl_basic_map_domain" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_range" #.(swig-lispify "isl_basic_map_range" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_domain_map" #.(swig-lispify "isl_basic_map_domain_map" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_range_map" #.(swig-lispify "isl_basic_map_range_map" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_remove_dims" #.(swig-lispify "isl_basic_map_remove_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_eliminate" #.(swig-lispify "isl_basic_map_eliminate" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_sample" #.(swig-lispify "isl_basic_map_sample" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_detect_equalities" #.(swig-lispify "isl_basic_map_detect_equalities" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_read_from_file" #.(swig-lispify "isl_basic_map_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_basic_map_read_from_str" #.(swig-lispify "isl_basic_map_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_map_read_from_file" #.(swig-lispify "isl_map_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_map_read_from_str" #.(swig-lispify "isl_map_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_basic_map_dump" #.(swig-lispify "isl_basic_map_dump" 'function)) :void
  (bmap :pointer))

(cffi:defcfun ("isl_map_dump" #.(swig-lispify "isl_map_dump" 'function)) :void
  (map :pointer))

(cffi:defcfun ("isl_basic_map_to_str" #.(swig-lispify "isl_basic_map_to_str" 'function)) :string
  (bmap :pointer))

(cffi:defcfun ("isl_printer_print_basic_map" #.(swig-lispify "isl_printer_print_basic_map" 'function)) :pointer
  (printer :pointer)
  (bmap :pointer))

(cffi:defcfun ("isl_map_to_str" #.(swig-lispify "isl_map_to_str" 'function)) :string
  (map :pointer))

(cffi:defcfun ("isl_printer_print_map" #.(swig-lispify "isl_printer_print_map" 'function)) :pointer
  (printer :pointer)
  (map :pointer))

(cffi:defcfun ("isl_basic_map_fix_si" #.(swig-lispify "isl_basic_map_fix_si" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_fix_val" #.(swig-lispify "isl_basic_map_fix_val" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_basic_map_lower_bound_si" #.(swig-lispify "isl_basic_map_lower_bound_si" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_upper_bound_si" #.(swig-lispify "isl_basic_map_upper_bound_si" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_sum" #.(swig-lispify "isl_basic_map_sum" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_neg" #.(swig-lispify "isl_basic_map_neg" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_sum" #.(swig-lispify "isl_map_sum" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_neg" #.(swig-lispify "isl_map_neg" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_floordiv_val" #.(swig-lispify "isl_map_floordiv_val" 'function)) :pointer
  (map :pointer)
  (d :pointer))

(cffi:defcfun ("isl_basic_map_is_equal" #.(swig-lispify "isl_basic_map_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_is_disjoint" #.(swig-lispify "isl_basic_map_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmax" #.(swig-lispify "isl_basic_map_partial_lexmax" 'function)) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmin" #.(swig-lispify "isl_basic_map_partial_lexmin" 'function)) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_map_partial_lexmax" #.(swig-lispify "isl_map_partial_lexmax" 'function)) :pointer
  (map :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_map_partial_lexmin" #.(swig-lispify "isl_map_partial_lexmin" 'function)) :pointer
  (map :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_lexmin" #.(swig-lispify "isl_basic_map_lexmin" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_lexmax" #.(swig-lispify "isl_basic_map_lexmax" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_lexmin" #.(swig-lispify "isl_map_lexmin" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_lexmax" #.(swig-lispify "isl_map_lexmax" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmin_pw_multi_aff" #.(swig-lispify "isl_basic_map_partial_lexmin_pw_multi_aff" 'function)) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_partial_lexmax_pw_multi_aff" #.(swig-lispify "isl_basic_map_partial_lexmax_pw_multi_aff" 'function)) :pointer
  (bmap :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_map_lexmin_pw_multi_aff" #.(swig-lispify "isl_basic_map_lexmin_pw_multi_aff" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_lexmin_pw_multi_aff" #.(swig-lispify "isl_map_lexmin_pw_multi_aff" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_lexmax_pw_multi_aff" #.(swig-lispify "isl_map_lexmax_pw_multi_aff" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_print_internal" #.(swig-lispify "isl_basic_map_print_internal" 'function)) :void
  (bmap :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_basic_map_plain_get_val_if_fixed" #.(swig-lispify "isl_basic_map_plain_get_val_if_fixed" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_image_is_bounded" #.(swig-lispify "isl_basic_map_image_is_bounded" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_plain_is_universe" #.(swig-lispify "isl_basic_map_plain_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_universe" #.(swig-lispify "isl_basic_map_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_plain_is_empty" #.(swig-lispify "isl_basic_map_plain_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_empty" #.(swig-lispify "isl_basic_map_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_is_subset" #.(swig-lispify "isl_basic_map_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_is_strict_subset" #.(swig-lispify "isl_basic_map_is_strict_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_universe" #.(swig-lispify "isl_map_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_map_nat_universe" #.(swig-lispify "isl_map_nat_universe" 'function)) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_map_empty" #.(swig-lispify "isl_map_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_map_identity" #.(swig-lispify "isl_map_identity" 'function)) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_map_lex_lt_first" #.(swig-lispify "isl_map_lex_lt_first" 'function)) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_le_first" #.(swig-lispify "isl_map_lex_le_first" 'function)) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_lt" #.(swig-lispify "isl_map_lex_lt" 'function)) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_le" #.(swig-lispify "isl_map_lex_le" 'function)) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_gt_first" #.(swig-lispify "isl_map_lex_gt_first" 'function)) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_ge_first" #.(swig-lispify "isl_map_lex_ge_first" 'function)) :pointer
  (dim :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_lex_gt" #.(swig-lispify "isl_map_lex_gt" 'function)) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_lex_ge" #.(swig-lispify "isl_map_lex_ge" 'function)) :pointer
  (set_dim :pointer))

(cffi:defcfun ("isl_map_free" #.(swig-lispify "isl_map_free" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_copy" #.(swig-lispify "isl_map_copy" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_reverse" #.(swig-lispify "isl_map_reverse" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_reverse" #.(swig-lispify "isl_map_range_reverse" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_union" #.(swig-lispify "isl_map_union" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_union_disjoint" #.(swig-lispify "isl_map_union_disjoint" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_intersect_domain" #.(swig-lispify "isl_map_intersect_domain" 'function)) :pointer
  (map :pointer)
  (set :pointer))

(cffi:defcfun ("isl_map_intersect_range" #.(swig-lispify "isl_map_intersect_range" 'function)) :pointer
  (map :pointer)
  (set :pointer))

(cffi:defcfun ("isl_map_intersect_domain_factor_range" #.(swig-lispify "isl_map_intersect_domain_factor_range" 'function)) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_intersect_range_factor_domain" #.(swig-lispify "isl_map_intersect_range_factor_domain" 'function)) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_intersect_range_factor_range" #.(swig-lispify "isl_map_intersect_range_factor_range" 'function)) :pointer
  (map :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_map_apply_domain" #.(swig-lispify "isl_map_apply_domain" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_apply_range" #.(swig-lispify "isl_map_apply_range" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_preimage_domain_multi_aff" #.(swig-lispify "isl_map_preimage_domain_multi_aff" 'function)) :pointer
  (map :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_map_preimage_range_multi_aff" #.(swig-lispify "isl_map_preimage_range_multi_aff" 'function)) :pointer
  (map :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_map_preimage_domain_pw_multi_aff" #.(swig-lispify "isl_map_preimage_domain_pw_multi_aff" 'function)) :pointer
  (map :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_map_preimage_range_pw_multi_aff" #.(swig-lispify "isl_map_preimage_range_pw_multi_aff" 'function)) :pointer
  (map :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_map_preimage_domain_multi_pw_aff" #.(swig-lispify "isl_map_preimage_domain_multi_pw_aff" 'function)) :pointer
  (map :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_basic_map_product" #.(swig-lispify "isl_basic_map_product" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_product" #.(swig-lispify "isl_map_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_domain_product" #.(swig-lispify "isl_basic_map_domain_product" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_basic_map_range_product" #.(swig-lispify "isl_basic_map_range_product" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_domain_product" #.(swig-lispify "isl_map_domain_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_range_product" #.(swig-lispify "isl_map_range_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_flat_product" #.(swig-lispify "isl_basic_map_flat_product" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_flat_product" #.(swig-lispify "isl_map_flat_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_flat_range_product" #.(swig-lispify "isl_basic_map_flat_range_product" 'function)) :pointer
  (bmap1 :pointer)
  (bmap2 :pointer))

(cffi:defcfun ("isl_map_flat_domain_product" #.(swig-lispify "isl_map_flat_domain_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_flat_range_product" #.(swig-lispify "isl_map_flat_range_product" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_domain_is_wrapping" #.(swig-lispify "isl_map_domain_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_range_is_wrapping" #.(swig-lispify "isl_map_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_product" #.(swig-lispify "isl_map_is_product" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_factor_domain" #.(swig-lispify "isl_map_factor_domain" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_factor_range" #.(swig-lispify "isl_map_factor_range" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_factor_domain" #.(swig-lispify "isl_map_domain_factor_domain" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_factor_range" #.(swig-lispify "isl_map_domain_factor_range" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_factor_domain" #.(swig-lispify "isl_map_range_factor_domain" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_factor_range" #.(swig-lispify "isl_map_range_factor_range" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_intersect" #.(swig-lispify "isl_map_intersect" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_intersect_params" #.(swig-lispify "isl_map_intersect_params" 'function)) :pointer
  (map :pointer)
  (params :pointer))

(cffi:defcfun ("isl_map_subtract" #.(swig-lispify "isl_map_subtract" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_subtract_domain" #.(swig-lispify "isl_map_subtract_domain" 'function)) :pointer
  (map :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_map_subtract_range" #.(swig-lispify "isl_map_subtract_range" 'function)) :pointer
  (map :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_map_complement" #.(swig-lispify "isl_map_complement" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_fix_input_si" #.(swig-lispify "isl_map_fix_input_si" 'function)) :pointer
  (map :pointer)
  (input :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_fix_si" #.(swig-lispify "isl_map_fix_si" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_fix_val" #.(swig-lispify "isl_map_fix_val" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_map_lower_bound_si" #.(swig-lispify "isl_map_lower_bound_si" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_map_upper_bound_si" #.(swig-lispify "isl_map_upper_bound_si" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_map_deltas" #.(swig-lispify "isl_basic_map_deltas" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_deltas" #.(swig-lispify "isl_map_deltas" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_deltas_map" #.(swig-lispify "isl_basic_map_deltas_map" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_deltas_map" #.(swig-lispify "isl_map_deltas_map" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_detect_equalities" #.(swig-lispify "isl_map_detect_equalities" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_affine_hull" #.(swig-lispify "isl_map_affine_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_convex_hull" #.(swig-lispify "isl_map_convex_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_polyhedral_hull" #.(swig-lispify "isl_map_polyhedral_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_add_dims" #.(swig-lispify "isl_basic_map_add_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_map_add_dims" #.(swig-lispify "isl_map_add_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_insert_dims" #.(swig-lispify "isl_basic_map_insert_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_insert_dims" #.(swig-lispify "isl_map_insert_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_move_dims" #.(swig-lispify "isl_basic_map_move_dims" 'function)) :pointer
  (bmap :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_move_dims" #.(swig-lispify "isl_map_move_dims" 'function)) :pointer
  (map :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_project_out" #.(swig-lispify "isl_basic_map_project_out" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_project_out" #.(swig-lispify "isl_map_project_out" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_project_out_all_params" #.(swig-lispify "isl_map_project_out_all_params" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_remove_divs" #.(swig-lispify "isl_basic_map_remove_divs" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_remove_unknown_divs" #.(swig-lispify "isl_map_remove_unknown_divs" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_remove_divs" #.(swig-lispify "isl_map_remove_divs" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_eliminate" #.(swig-lispify "isl_map_eliminate" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_dims" #.(swig-lispify "isl_map_remove_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_remove_divs_involving_dims" #.(swig-lispify "isl_basic_map_remove_divs_involving_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_divs_involving_dims" #.(swig-lispify "isl_map_remove_divs_involving_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_remove_inputs" #.(swig-lispify "isl_map_remove_inputs" 'function)) :pointer
  (map :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_equate" #.(swig-lispify "isl_basic_map_equate" 'function)) :pointer
  (bmap :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_basic_map_order_ge" #.(swig-lispify "isl_basic_map_order_ge" 'function)) :pointer
  (bmap :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_order_ge" #.(swig-lispify "isl_map_order_ge" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_order_le" #.(swig-lispify "isl_map_order_le" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_equate" #.(swig-lispify "isl_map_equate" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_oppose" #.(swig-lispify "isl_map_oppose" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_order_lt" #.(swig-lispify "isl_map_order_lt" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_basic_map_order_gt" #.(swig-lispify "isl_basic_map_order_gt" 'function)) :pointer
  (bmap :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_map_order_gt" #.(swig-lispify "isl_map_order_gt" 'function)) :pointer
  (map :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_set_identity" #.(swig-lispify "isl_set_identity" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_is_wrapping" #.(swig-lispify "isl_basic_set_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_set_is_wrapping" #.(swig-lispify "isl_set_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_basic_map_wrap" #.(swig-lispify "isl_basic_map_wrap" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_wrap" #.(swig-lispify "isl_map_wrap" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_set_unwrap" #.(swig-lispify "isl_basic_set_unwrap" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_unwrap" #.(swig-lispify "isl_set_unwrap" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_flatten" #.(swig-lispify "isl_basic_map_flatten" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_flatten" #.(swig-lispify "isl_map_flatten" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_flatten_domain" #.(swig-lispify "isl_basic_map_flatten_domain" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_basic_map_flatten_range" #.(swig-lispify "isl_basic_map_flatten_range" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_flatten_domain" #.(swig-lispify "isl_map_flatten_domain" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_flatten_range" #.(swig-lispify "isl_map_flatten_range" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_set_flatten" #.(swig-lispify "isl_basic_set_flatten" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_flatten" #.(swig-lispify "isl_set_flatten" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_flatten_map" #.(swig-lispify "isl_set_flatten_map" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_map_params" #.(swig-lispify "isl_map_params" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain" #.(swig-lispify "isl_map_domain" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_range" #.(swig-lispify "isl_map_range" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_domain_map" #.(swig-lispify "isl_map_domain_map" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_range_map" #.(swig-lispify "isl_map_range_map" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_set_wrapped_domain_map" #.(swig-lispify "isl_set_wrapped_domain_map" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_map_from_basic_map" #.(swig-lispify "isl_map_from_basic_map" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_from_domain" #.(swig-lispify "isl_map_from_domain" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_from_domain" #.(swig-lispify "isl_basic_map_from_domain" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_map_from_range" #.(swig-lispify "isl_basic_map_from_range" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_map_from_range" #.(swig-lispify "isl_map_from_range" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_map_from_domain_and_range" #.(swig-lispify "isl_basic_map_from_domain_and_range" 'function)) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_map_from_domain_and_range" #.(swig-lispify "isl_map_from_domain_and_range" 'function)) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_map_sample" #.(swig-lispify "isl_map_sample" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_bind_domain" #.(swig-lispify "isl_map_bind_domain" 'function)) :pointer
  (map :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_map_bind_range" #.(swig-lispify "isl_map_bind_range" 'function)) :pointer
  (map :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_map_plain_is_empty" #.(swig-lispify "isl_map_plain_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_universe" #.(swig-lispify "isl_map_plain_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_empty" #.(swig-lispify "isl_map_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_subset" #.(swig-lispify "isl_map_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_strict_subset" #.(swig-lispify "isl_map_is_strict_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_equal" #.(swig-lispify "isl_map_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_is_disjoint" #.(swig-lispify "isl_map_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_is_single_valued" #.(swig-lispify "isl_basic_map_is_single_valued" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_map_plain_is_single_valued" #.(swig-lispify "isl_map_plain_is_single_valued" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_single_valued" #.(swig-lispify "isl_map_is_single_valued" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_injective" #.(swig-lispify "isl_map_plain_is_injective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_injective" #.(swig-lispify "isl_map_is_injective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_bijective" #.(swig-lispify "isl_map_is_bijective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_identity" #.(swig-lispify "isl_map_is_identity" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_is_translation" #.(swig-lispify "isl_map_is_translation" 'function)) :int
  (map :pointer))

(cffi:defcfun ("isl_map_has_equal_space" #.(swig-lispify "isl_map_has_equal_space" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_can_zip" #.(swig-lispify "isl_basic_map_can_zip" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_zip" #.(swig-lispify "isl_map_can_zip" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_basic_map_zip" #.(swig-lispify "isl_basic_map_zip" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_zip" #.(swig-lispify "isl_map_zip" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_can_curry" #.(swig-lispify "isl_basic_map_can_curry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_curry" #.(swig-lispify "isl_map_can_curry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_basic_map_curry" #.(swig-lispify "isl_basic_map_curry" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_curry" #.(swig-lispify "isl_map_curry" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_can_range_curry" #.(swig-lispify "isl_map_can_range_curry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_map_range_curry" #.(swig-lispify "isl_map_range_curry" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_can_uncurry" #.(swig-lispify "isl_basic_map_can_uncurry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer))

(cffi:defcfun ("isl_map_can_uncurry" #.(swig-lispify "isl_map_can_uncurry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer))

(cffi:defcfun ("isl_basic_map_uncurry" #.(swig-lispify "isl_basic_map_uncurry" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_uncurry" #.(swig-lispify "isl_map_uncurry" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_make_disjoint" #.(swig-lispify "isl_map_make_disjoint" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_compute_divs" #.(swig-lispify "isl_basic_map_compute_divs" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_compute_divs" #.(swig-lispify "isl_map_compute_divs" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_align_divs" #.(swig-lispify "isl_map_align_divs" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_drop_constraints_involving_dims" #.(swig-lispify "isl_basic_map_drop_constraints_involving_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_drop_constraints_not_involving_dims" #.(swig-lispify "isl_basic_map_drop_constraints_not_involving_dims" 'function)) :pointer
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_drop_constraints_involving_dims" #.(swig-lispify "isl_map_drop_constraints_involving_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_drop_constraints_not_involving_dims" #.(swig-lispify "isl_map_drop_constraints_not_involving_dims" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_involves_dims" #.(swig-lispify "isl_basic_map_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bmap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_involves_dims" #.(swig-lispify "isl_map_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_print_internal" #.(swig-lispify "isl_map_print_internal" 'function)) :void
  (map :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_map_plain_get_val_if_fixed" #.(swig-lispify "isl_map_plain_get_val_if_fixed" 'function)) :pointer
  (map :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_map_gist_domain" #.(swig-lispify "isl_basic_map_gist_domain" 'function)) :pointer
  (bmap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_basic_map_gist" #.(swig-lispify "isl_basic_map_gist" 'function)) :pointer
  (bmap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist" #.(swig-lispify "isl_map_gist" 'function)) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_domain" #.(swig-lispify "isl_map_gist_domain" 'function)) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_range" #.(swig-lispify "isl_map_gist_range" 'function)) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_params" #.(swig-lispify "isl_map_gist_params" 'function)) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_gist_basic_map" #.(swig-lispify "isl_map_gist_basic_map" 'function)) :pointer
  (map :pointer)
  (context :pointer))

(cffi:defcfun ("isl_map_get_range_stride_info" #.(swig-lispify "isl_map_get_range_stride_info" 'function)) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_map_get_range_simple_fixed_box_hull" #.(swig-lispify "isl_map_get_range_simple_fixed_box_hull" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_coalesce" #.(swig-lispify "isl_map_coalesce" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_plain_is_equal" #.(swig-lispify "isl_map_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_get_hash" #.(swig-lispify "isl_map_get_hash" 'function)) :unsigned-int
  (map :pointer))

(cffi:defcfun ("isl_map_n_basic_map" #.(swig-lispify "isl_map_n_basic_map" 'function)) :int
  (map :pointer))

(cffi:defcfun ("isl_map_foreach_basic_map" #.(swig-lispify "isl_map_foreach_basic_map" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (map :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_get_basic_map_list" #.(swig-lispify "isl_map_get_basic_map_list" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_map_fixed_power_val" #.(swig-lispify "isl_map_fixed_power_val" 'function)) :pointer
  (map :pointer)
  (exp :pointer))

(cffi:defcfun ("isl_map_power" #.(swig-lispify "isl_map_power" 'function)) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_reaching_path_lengths" #.(swig-lispify "isl_map_reaching_path_lengths" 'function)) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_transitive_closure" #.(swig-lispify "isl_map_transitive_closure" 'function)) :pointer
  (map :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_map_lex_le_map" #.(swig-lispify "isl_map_lex_le_map" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_lt_map" #.(swig-lispify "isl_map_lex_lt_map" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_ge_map" #.(swig-lispify "isl_map_lex_ge_map" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_map_lex_gt_map" #.(swig-lispify "isl_map_lex_gt_map" 'function)) :pointer
  (map1 :pointer)
  (map2 :pointer))

(cffi:defcfun ("isl_basic_map_align_params" #.(swig-lispify "isl_basic_map_align_params" 'function)) :pointer
  (bmap :pointer)
  (model :pointer))

(cffi:defcfun ("isl_map_align_params" #.(swig-lispify "isl_map_align_params" 'function)) :pointer
  (map :pointer)
  (model :pointer))

(cffi:defcfun ("isl_basic_map_drop_unused_params" #.(swig-lispify "isl_basic_map_drop_unused_params" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_map_drop_unused_params" #.(swig-lispify "isl_map_drop_unused_params" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_basic_map_equalities_matrix" #.(swig-lispify "isl_basic_map_equalities_matrix" 'function)) :pointer
  (bmap :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname))
  (c5 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_map_inequalities_matrix" #.(swig-lispify "isl_basic_map_inequalities_matrix" 'function)) :pointer
  (bmap :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname))
  (c5 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_map_from_constraint_matrices" #.(swig-lispify "isl_basic_map_from_constraint_matrices" 'function)) :pointer
  (dim :pointer)
  (eq :pointer)
  (ineq :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname))
  (c5 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_map_from_aff" #.(swig-lispify "isl_basic_map_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_basic_map_from_multi_aff" #.(swig-lispify "isl_basic_map_from_multi_aff" 'function)) :pointer
  (maff :pointer))

(cffi:defcfun ("isl_basic_map_from_aff_list" #.(swig-lispify "isl_basic_map_from_aff_list" 'function)) :pointer
  (domain_space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_map_from_aff" #.(swig-lispify "isl_map_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_map_from_multi_aff" #.(swig-lispify "isl_map_from_multi_aff" 'function)) :pointer
  (maff :pointer))

(cffi:defcfun ("isl_map_dim_min" #.(swig-lispify "isl_map_dim_min" 'function)) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_map_dim_max" #.(swig-lispify "isl_map_dim_max" 'function)) :pointer
  (map :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_map_list_get_ctx" #.(swig-lispify "isl_basic_map_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_from_basic_map" #.(swig-lispify "isl_basic_map_list_from_basic_map" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_alloc" #.(swig-lispify "isl_basic_map_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_basic_map_list_copy" #.(swig-lispify "isl_basic_map_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_free" #.(swig-lispify "isl_basic_map_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_add" #.(swig-lispify "isl_basic_map_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_insert" #.(swig-lispify "isl_basic_map_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_drop" #.(swig-lispify "isl_basic_map_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_map_list_clear" #.(swig-lispify "isl_basic_map_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_swap" #.(swig-lispify "isl_basic_map_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_basic_map_list_reverse" #.(swig-lispify "isl_basic_map_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_concat" #.(swig-lispify "isl_basic_map_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_basic_map_list_size" #.(swig-lispify "isl_basic_map_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_n_basic_map" #.(swig-lispify "isl_basic_map_list_n_basic_map" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_get_at" #.(swig-lispify "isl_basic_map_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_map_list_get_basic_map" #.(swig-lispify "isl_basic_map_list_get_basic_map" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_basic_map_list_set_basic_map" #.(swig-lispify "isl_basic_map_list_set_basic_map" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_basic_map_list_foreach" #.(swig-lispify "isl_basic_map_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_map" #.(swig-lispify "isl_basic_map_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_sort" #.(swig-lispify "isl_basic_map_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_basic_map_list_foreach_scc" #.(swig-lispify "isl_basic_map_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_basic_map_list_to_str" #.(swig-lispify "isl_basic_map_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_basic_map_list" #.(swig-lispify "isl_printer_print_basic_map_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_basic_map_list_dump" #.(swig-lispify "isl_basic_map_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_map_list_get_ctx" #.(swig-lispify "isl_map_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_from_map" #.(swig-lispify "isl_map_list_from_map" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_map_list_alloc" #.(swig-lispify "isl_map_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_map_list_copy" #.(swig-lispify "isl_map_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_free" #.(swig-lispify "isl_map_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_add" #.(swig-lispify "isl_map_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_map_list_insert" #.(swig-lispify "isl_map_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_map_list_drop" #.(swig-lispify "isl_map_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_map_list_clear" #.(swig-lispify "isl_map_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_swap" #.(swig-lispify "isl_map_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_map_list_reverse" #.(swig-lispify "isl_map_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_map_list_concat" #.(swig-lispify "isl_map_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_map_list_size" #.(swig-lispify "isl_map_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_map_list_n_map" #.(swig-lispify "isl_map_list_n_map" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_map_list_get_at" #.(swig-lispify "isl_map_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_map_list_get_map" #.(swig-lispify "isl_map_list_get_map" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_map_list_set_map" #.(swig-lispify "isl_map_list_set_map" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_map_list_foreach" #.(swig-lispify "isl_map_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_map" #.(swig-lispify "isl_map_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_sort" #.(swig-lispify "isl_map_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_map_list_foreach_scc" #.(swig-lispify "isl_map_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_map_list_to_str" #.(swig-lispify "isl_map_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_map_list" #.(swig-lispify "isl_printer_print_map_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_map_list_dump" #.(swig-lispify "isl_map_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_mat_get_ctx" #.(swig-lispify "isl_mat_get_ctx" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_alloc" #.(swig-lispify "isl_mat_alloc" 'function)) :pointer
  (ctx :pointer)
  (n_row :unsigned-int)
  (n_col :unsigned-int))

(cffi:defcfun ("isl_mat_extend" #.(swig-lispify "isl_mat_extend" 'function)) :pointer
  (mat :pointer)
  (n_row :unsigned-int)
  (n_col :unsigned-int))

(cffi:defcfun ("isl_mat_identity" #.(swig-lispify "isl_mat_identity" 'function)) :pointer
  (ctx :pointer)
  (n_row :unsigned-int))

(cffi:defcfun ("isl_mat_copy" #.(swig-lispify "isl_mat_copy" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_free" #.(swig-lispify "isl_mat_free" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_rows" #.(swig-lispify "isl_mat_rows" 'function)) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_cols" #.(swig-lispify "isl_mat_cols" 'function)) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_get_element_val" #.(swig-lispify "isl_mat_get_element_val" 'function)) :pointer
  (mat :pointer)
  (row :int)
  (col :int))

(cffi:defcfun ("isl_mat_set_element_si" #.(swig-lispify "isl_mat_set_element_si" 'function)) :pointer
  (mat :pointer)
  (row :int)
  (col :int)
  (v :int))

(cffi:defcfun ("isl_mat_set_element_val" #.(swig-lispify "isl_mat_set_element_val" 'function)) :pointer
  (mat :pointer)
  (row :int)
  (col :int)
  (v :pointer))

(cffi:defcfun ("isl_mat_swap_cols" #.(swig-lispify "isl_mat_swap_cols" 'function)) :pointer
  (mat :pointer)
  (i :unsigned-int)
  (j :unsigned-int))

(cffi:defcfun ("isl_mat_swap_rows" #.(swig-lispify "isl_mat_swap_rows" 'function)) :pointer
  (mat :pointer)
  (i :unsigned-int)
  (j :unsigned-int))

(cffi:defcfun ("isl_mat_vec_product" #.(swig-lispify "isl_mat_vec_product" 'function)) :pointer
  (mat :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_vec_mat_product" #.(swig-lispify "isl_vec_mat_product" 'function)) :pointer
  (vec :pointer)
  (mat :pointer))

(cffi:defcfun ("isl_mat_vec_inverse_product" #.(swig-lispify "isl_mat_vec_inverse_product" 'function)) :pointer
  (mat :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_mat_aff_direct_sum" #.(swig-lispify "isl_mat_aff_direct_sum" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_diagonal" #.(swig-lispify "isl_mat_diagonal" 'function)) :pointer
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_left_hermite" #.(swig-lispify "isl_mat_left_hermite" 'function)) :pointer
  (M :pointer)
  (neg :int)
  (U :pointer)
  (Q :pointer))

(cffi:defcfun ("isl_mat_lin_to_aff" #.(swig-lispify "isl_mat_lin_to_aff" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_inverse_product" #.(swig-lispify "isl_mat_inverse_product" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_product" #.(swig-lispify "isl_mat_product" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_mat_transpose" #.(swig-lispify "isl_mat_transpose" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_right_inverse" #.(swig-lispify "isl_mat_right_inverse" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_right_kernel" #.(swig-lispify "isl_mat_right_kernel" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_normalize" #.(swig-lispify "isl_mat_normalize" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_normalize_row" #.(swig-lispify "isl_mat_normalize_row" 'function)) :pointer
  (mat :pointer)
  (row :int))

(cffi:defcfun ("isl_mat_drop_cols" #.(swig-lispify "isl_mat_drop_cols" 'function)) :pointer
  (mat :pointer)
  (col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_drop_rows" #.(swig-lispify "isl_mat_drop_rows" 'function)) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_cols" #.(swig-lispify "isl_mat_insert_cols" 'function)) :pointer
  (mat :pointer)
  (col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_rows" #.(swig-lispify "isl_mat_insert_rows" 'function)) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_move_cols" #.(swig-lispify "isl_mat_move_cols" 'function)) :pointer
  (mat :pointer)
  (dst_col :unsigned-int)
  (src_col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_rows" #.(swig-lispify "isl_mat_add_rows" 'function)) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_zero_cols" #.(swig-lispify "isl_mat_insert_zero_cols" 'function)) :pointer
  (mat :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_zero_cols" #.(swig-lispify "isl_mat_add_zero_cols" 'function)) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_insert_zero_rows" #.(swig-lispify "isl_mat_insert_zero_rows" 'function)) :pointer
  (mat :pointer)
  (row :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_add_zero_rows" #.(swig-lispify "isl_mat_add_zero_rows" 'function)) :pointer
  (mat :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_mat_col_add" #.(swig-lispify "isl_mat_col_add" 'function)) :void
  (mat :pointer)
  (dst_col :int)
  (src_col :int))

(cffi:defcfun ("isl_mat_unimodular_complete" #.(swig-lispify "isl_mat_unimodular_complete" 'function)) :pointer
  (M :pointer)
  (row :int))

(cffi:defcfun ("isl_mat_row_basis" #.(swig-lispify "isl_mat_row_basis" 'function)) :pointer
  (mat :pointer))

(cffi:defcfun ("isl_mat_row_basis_extension" #.(swig-lispify "isl_mat_row_basis_extension" 'function)) :pointer
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_from_row_vec" #.(swig-lispify "isl_mat_from_row_vec" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_mat_concat" #.(swig-lispify "isl_mat_concat" 'function)) :pointer
  (top :pointer)
  (bot :pointer))

(cffi:defcfun ("isl_mat_vec_concat" #.(swig-lispify "isl_mat_vec_concat" 'function)) :pointer
  (top :pointer)
  (bot :pointer))

(cffi:defcfun ("isl_mat_is_equal" #.(swig-lispify "isl_mat_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_has_linearly_independent_rows" #.(swig-lispify "isl_mat_has_linearly_independent_rows" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (mat1 :pointer)
  (mat2 :pointer))

(cffi:defcfun ("isl_mat_rank" #.(swig-lispify "isl_mat_rank" 'function)) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_initial_non_zero_cols" #.(swig-lispify "isl_mat_initial_non_zero_cols" 'function)) :int
  (mat :pointer))

(cffi:defcfun ("isl_mat_print_internal" #.(swig-lispify "isl_mat_print_internal" 'function)) :void
  (mat :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_mat_dump" #.(swig-lispify "isl_mat_dump" 'function)) :void
  (mat :pointer))

(cffi:defcstruct #.(swig-lispify "isl_obj_vtable" 'classname)
	(#.(swig-lispify "copy" 'slotname) :pointer)
	(#.(swig-lispify "add" 'slotname) :pointer)
	(#.(swig-lispify "print" 'slotname) :pointer)
	(#.(swig-lispify "free" 'slotname) :pointer))

(cffi:defcvar ("isl_obj_none_vtable" #.(swig-lispify "isl_obj_none_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_int_vtable" #.(swig-lispify "isl_obj_int_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_val_vtable" #.(swig-lispify "isl_obj_val_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_set_vtable" #.(swig-lispify "isl_obj_set_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_union_set_vtable" #.(swig-lispify "isl_obj_union_set_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_map_vtable" #.(swig-lispify "isl_obj_map_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_union_map_vtable" #.(swig-lispify "isl_obj_union_map_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_pw_multi_aff_vtable" #.(swig-lispify "isl_obj_pw_multi_aff_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_pw_qpolynomial_vtable" #.(swig-lispify "isl_obj_pw_qpolynomial_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_union_pw_qpolynomial_vtable" #.(swig-lispify "isl_obj_union_pw_qpolynomial_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_pw_qpolynomial_fold_vtable" #.(swig-lispify "isl_obj_pw_qpolynomial_fold_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_union_pw_qpolynomial_fold_vtable" #.(swig-lispify "isl_obj_union_pw_qpolynomial_fold_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcvar ("isl_obj_schedule_vtable" #.(swig-lispify "isl_obj_schedule_vtable" 'variable))
 #.(swig-lispify "isl_obj_vtable" 'classname))

(cffi:defcstruct #.(swig-lispify "isl_obj" 'classname)
	(#.(swig-lispify "type" 'slotname) :pointer)
	(#.(swig-lispify "v" 'slotname) :pointer))

(cffi:defcvar ("isl_options_args" #.(swig-lispify "isl_options_args" 'variable))
 #.(swig-lispify "isl_args" 'classname))

(cffi:defcfun ("isl_options_new_with_defaults" #.(swig-lispify "isl_options_new_with_defaults" 'function)) :pointer)

(cffi:defcfun ("isl_options_free" #.(swig-lispify "isl_options_free" 'function)) :void
  (opt :pointer))

(cffi:defcfun ("isl_options_parse" #.(swig-lispify "isl_options_parse" 'function)) :int
  (opt :pointer)
  (argc :int)
  (argv :pointer)
  (flags :unsigned-int))

(cffi:defcfun ("isl_options_set_bound" #.(swig-lispify "isl_options_set_bound" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_bound" #.(swig-lispify "isl_options_get_bound" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_on_error" #.(swig-lispify "isl_options_set_on_error" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_on_error" #.(swig-lispify "isl_options_get_on_error" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_gbr_only_first" #.(swig-lispify "isl_options_set_gbr_only_first" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_gbr_only_first" #.(swig-lispify "isl_options_get_gbr_only_first" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_algorithm" #.(swig-lispify "isl_options_set_schedule_algorithm" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_algorithm" #.(swig-lispify "isl_options_get_schedule_algorithm" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_pip_symmetry" #.(swig-lispify "isl_options_set_pip_symmetry" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_pip_symmetry" #.(swig-lispify "isl_options_get_pip_symmetry" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_coalesce_bounded_wrapping" #.(swig-lispify "isl_options_set_coalesce_bounded_wrapping" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_coalesce_bounded_wrapping" #.(swig-lispify "isl_options_get_coalesce_bounded_wrapping" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_coalesce_preserve_locals" #.(swig-lispify "isl_options_set_coalesce_preserve_locals" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_coalesce_preserve_locals" #.(swig-lispify "isl_options_get_coalesce_preserve_locals" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_point_get_ctx" #.(swig-lispify "isl_point_get_ctx" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_get_space" #.(swig-lispify "isl_point_get_space" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_zero" #.(swig-lispify "isl_point_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_point_copy" #.(swig-lispify "isl_point_copy" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_free" #.(swig-lispify "isl_point_free" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_point_get_coordinate_val" #.(swig-lispify "isl_point_get_coordinate_val" 'function)) :pointer
  (pnt :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int))

(cffi:defcfun ("isl_point_set_coordinate_val" #.(swig-lispify "isl_point_set_coordinate_val" 'function)) :pointer
  (pnt :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_point_add_ui" #.(swig-lispify "isl_point_add_ui" 'function)) :pointer
  (pnt :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (val :unsigned-int))

(cffi:defcfun ("isl_point_sub_ui" #.(swig-lispify "isl_point_sub_ui" 'function)) :pointer
  (pnt :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :int)
  (val :unsigned-int))

(cffi:defcfun ("isl_point_void" #.(swig-lispify "isl_point_void" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_point_is_void" #.(swig-lispify "isl_point_is_void" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pnt :pointer))

(cffi:defcfun ("isl_printer_print_point" #.(swig-lispify "isl_printer_print_point" 'function)) :pointer
  (printer :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_point_to_str" #.(swig-lispify "isl_point_to_str" 'function)) :string
  (pnt :pointer))

(cffi:defcfun ("isl_point_dump" #.(swig-lispify "isl_point_dump" 'function)) :void
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_get_ctx" #.(swig-lispify "isl_qpolynomial_get_ctx" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_get_domain_space" #.(swig-lispify "isl_qpolynomial_get_domain_space" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_get_space" #.(swig-lispify "isl_qpolynomial_get_space" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_dim" #.(swig-lispify "isl_qpolynomial_dim" 'function)) :int
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_qpolynomial_involves_dims" #.(swig-lispify "isl_qpolynomial_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_get_constant_val" #.(swig-lispify "isl_qpolynomial_get_constant_val" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_set_dim_name" #.(swig-lispify "isl_qpolynomial_set_dim_name" 'function)) :pointer
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_qpolynomial_zero_on_domain" #.(swig-lispify "isl_qpolynomial_zero_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_one_on_domain" #.(swig-lispify "isl_qpolynomial_one_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_infty_on_domain" #.(swig-lispify "isl_qpolynomial_infty_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_neginfty_on_domain" #.(swig-lispify "isl_qpolynomial_neginfty_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_nan_on_domain" #.(swig-lispify "isl_qpolynomial_nan_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_qpolynomial_val_on_domain" #.(swig-lispify "isl_qpolynomial_val_on_domain" 'function)) :pointer
  (space :pointer)
  (val :pointer))

(cffi:defcfun ("isl_qpolynomial_var_on_domain" #.(swig-lispify "isl_qpolynomial_var_on_domain" 'function)) :pointer
  (domain :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_copy" #.(swig-lispify "isl_qpolynomial_copy" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_free" #.(swig-lispify "isl_qpolynomial_free" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_plain_is_equal" #.(swig-lispify "isl_qpolynomial_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_is_zero" #.(swig-lispify "isl_qpolynomial_is_zero" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_nan" #.(swig-lispify "isl_qpolynomial_is_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_infty" #.(swig-lispify "isl_qpolynomial_is_infty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_is_neginfty" #.(swig-lispify "isl_qpolynomial_is_neginfty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_sgn" #.(swig-lispify "isl_qpolynomial_sgn" 'function)) :int
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_neg" #.(swig-lispify "isl_qpolynomial_neg" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_add" #.(swig-lispify "isl_qpolynomial_add" 'function)) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_sub" #.(swig-lispify "isl_qpolynomial_sub" 'function)) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_mul" #.(swig-lispify "isl_qpolynomial_mul" 'function)) :pointer
  (qp1 :pointer)
  (qp2 :pointer))

(cffi:defcfun ("isl_qpolynomial_pow" #.(swig-lispify "isl_qpolynomial_pow" 'function)) :pointer
  (qp :pointer)
  (power :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_scale_val" #.(swig-lispify "isl_qpolynomial_scale_val" 'function)) :pointer
  (qp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_scale_down_val" #.(swig-lispify "isl_qpolynomial_scale_down_val" 'function)) :pointer
  (qp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_insert_dims" #.(swig-lispify "isl_qpolynomial_insert_dims" 'function)) :pointer
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_add_dims" #.(swig-lispify "isl_qpolynomial_add_dims" 'function)) :pointer
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_move_dims" #.(swig-lispify "isl_qpolynomial_move_dims" 'function)) :pointer
  (qp :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_project_domain_on_params" #.(swig-lispify "isl_qpolynomial_project_domain_on_params" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_drop_dims" #.(swig-lispify "isl_qpolynomial_drop_dims" 'function)) :pointer
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_substitute" #.(swig-lispify "isl_qpolynomial_substitute" 'function)) :pointer
  (qp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int)
  (subs :pointer))

(cffi:defcfun ("isl_qpolynomial_as_polynomial_on_domain" #.(swig-lispify "isl_qpolynomial_as_polynomial_on_domain" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (qp :pointer)
  (bset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_qpolynomial_homogenize" #.(swig-lispify "isl_qpolynomial_homogenize" 'function)) :pointer
  (poly :pointer))

(cffi:defcfun ("isl_qpolynomial_align_params" #.(swig-lispify "isl_qpolynomial_align_params" 'function)) :pointer
  (qp :pointer)
  (model :pointer))

(cffi:defcfun ("isl_term_get_ctx" #.(swig-lispify "isl_term_get_ctx" 'function)) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_copy" #.(swig-lispify "isl_term_copy" 'function)) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_free" #.(swig-lispify "isl_term_free" 'function)) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_dim" #.(swig-lispify "isl_term_dim" 'function)) :int
  (term :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_term_get_coefficient_val" #.(swig-lispify "isl_term_get_coefficient_val" 'function)) :pointer
  (term :pointer))

(cffi:defcfun ("isl_term_get_exp" #.(swig-lispify "isl_term_get_exp" 'function)) :int
  (term :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_term_get_div" #.(swig-lispify "isl_term_get_div" 'function)) :pointer
  (term :pointer)
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_foreach_term" #.(swig-lispify "isl_qpolynomial_foreach_term" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (qp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_qpolynomial_eval" #.(swig-lispify "isl_qpolynomial_eval" 'function)) :pointer
  (qp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_gist_params" #.(swig-lispify "isl_qpolynomial_gist_params" 'function)) :pointer
  (qp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_gist" #.(swig-lispify "isl_qpolynomial_gist" 'function)) :pointer
  (qp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_from_constraint" #.(swig-lispify "isl_qpolynomial_from_constraint" 'function)) :pointer
  (c :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_from_term" #.(swig-lispify "isl_qpolynomial_from_term" 'function)) :pointer
  (term :pointer))

(cffi:defcfun ("isl_qpolynomial_from_aff" #.(swig-lispify "isl_qpolynomial_from_aff" 'function)) :pointer
  (aff :pointer))

(cffi:defcfun ("isl_basic_map_from_qpolynomial" #.(swig-lispify "isl_basic_map_from_qpolynomial" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_printer_print_qpolynomial" #.(swig-lispify "isl_printer_print_qpolynomial" 'function)) :pointer
  (p :pointer)
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_print" #.(swig-lispify "isl_qpolynomial_print" 'function)) :void
  (qp :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_dump" #.(swig-lispify "isl_qpolynomial_dump" 'function)) :void
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_ctx" #.(swig-lispify "isl_pw_qpolynomial_get_ctx" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_involves_nan" #.(swig-lispify "isl_pw_qpolynomial_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_plain_is_equal" #.(swig-lispify "isl_pw_qpolynomial_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_zero" #.(swig-lispify "isl_pw_qpolynomial_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_alloc" #.(swig-lispify "isl_pw_qpolynomial_alloc" 'function)) :pointer
  (set :pointer)
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_from_qpolynomial" 'function)) :pointer
  (qp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_copy" #.(swig-lispify "isl_pw_qpolynomial_copy" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_free" #.(swig-lispify "isl_pw_qpolynomial_free" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_is_zero" #.(swig-lispify "isl_pw_qpolynomial_is_zero" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_domain_space" #.(swig-lispify "isl_pw_qpolynomial_get_domain_space" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_get_space" #.(swig-lispify "isl_pw_qpolynomial_get_space" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_reset_domain_space" #.(swig-lispify "isl_pw_qpolynomial_reset_domain_space" 'function)) :pointer
  (pwqp :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_dim" #.(swig-lispify "isl_pw_qpolynomial_dim" 'function)) :int
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_qpolynomial_involves_param_id" #.(swig-lispify "isl_pw_qpolynomial_involves_param_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_involves_dims" #.(swig-lispify "isl_pw_qpolynomial_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_has_equal_space" #.(swig-lispify "isl_pw_qpolynomial_has_equal_space" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_set_dim_name" #.(swig-lispify "isl_pw_qpolynomial_set_dim_name" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_pw_qpolynomial_find_dim_by_name" #.(swig-lispify "isl_pw_qpolynomial_find_dim_by_name" 'function)) :int
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_pw_qpolynomial_reset_user" #.(swig-lispify "isl_pw_qpolynomial_reset_user" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_domain" #.(swig-lispify "isl_pw_qpolynomial_domain" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain" #.(swig-lispify "isl_pw_qpolynomial_intersect_domain" 'function)) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain_wrapped_domain" #.(swig-lispify "isl_pw_qpolynomial_intersect_domain_wrapped_domain" 'function)) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_domain_wrapped_range" #.(swig-lispify "isl_pw_qpolynomial_intersect_domain_wrapped_range" 'function)) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_intersect_params" #.(swig-lispify "isl_pw_qpolynomial_intersect_params" 'function)) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_subtract_domain" #.(swig-lispify "isl_pw_qpolynomial_subtract_domain" 'function)) :pointer
  (pwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_project_domain_on_params" #.(swig-lispify "isl_pw_qpolynomial_project_domain_on_params" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_range" #.(swig-lispify "isl_pw_qpolynomial_from_range" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_drop_dims" #.(swig-lispify "isl_pw_qpolynomial_drop_dims" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_split_dims" #.(swig-lispify "isl_pw_qpolynomial_split_dims" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_drop_unused_params" #.(swig-lispify "isl_pw_qpolynomial_drop_unused_params" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_add" #.(swig-lispify "isl_pw_qpolynomial_add" 'function)) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_sub" #.(swig-lispify "isl_pw_qpolynomial_sub" 'function)) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_add_disjoint" #.(swig-lispify "isl_pw_qpolynomial_add_disjoint" 'function)) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_neg" #.(swig-lispify "isl_pw_qpolynomial_neg" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_mul" #.(swig-lispify "isl_pw_qpolynomial_mul" 'function)) :pointer
  (pwqp1 :pointer)
  (pwqp2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_scale_val" #.(swig-lispify "isl_pw_qpolynomial_scale_val" 'function)) :pointer
  (pwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_scale_down_val" #.(swig-lispify "isl_pw_qpolynomial_scale_down_val" 'function)) :pointer
  (pwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_pow" #.(swig-lispify "isl_pw_qpolynomial_pow" 'function)) :pointer
  (pwqp :pointer)
  (exponent :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_insert_dims" #.(swig-lispify "isl_pw_qpolynomial_insert_dims" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_add_dims" #.(swig-lispify "isl_pw_qpolynomial_add_dims" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_move_dims" #.(swig-lispify "isl_pw_qpolynomial_move_dims" 'function)) :pointer
  (pwqp :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fix_val" #.(swig-lispify "isl_pw_qpolynomial_fix_val" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_eval" #.(swig-lispify "isl_pw_qpolynomial_eval" 'function)) :pointer
  (pwqp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_max" #.(swig-lispify "isl_pw_qpolynomial_max" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_min" #.(swig-lispify "isl_pw_qpolynomial_min" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_n_piece" #.(swig-lispify "isl_pw_qpolynomial_n_piece" 'function)) :int
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_foreach_piece" #.(swig-lispify "isl_pw_qpolynomial_foreach_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_foreach_lifted_piece" #.(swig-lispify "isl_pw_qpolynomial_foreach_lifted_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_isa_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_isa_qpolynomial" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_as_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_as_qpolynomial" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_from_pw_aff" #.(swig-lispify "isl_pw_qpolynomial_from_pw_aff" 'function)) :pointer
  (pwaff :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_read_from_str" #.(swig-lispify "isl_pw_qpolynomial_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_pw_qpolynomial_read_from_file" #.(swig-lispify "isl_pw_qpolynomial_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_to_str" #.(swig-lispify "isl_pw_qpolynomial_to_str" 'function)) :string
  (pwqp :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial" #.(swig-lispify "isl_printer_print_pw_qpolynomial" 'function)) :pointer
  (p :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_print" #.(swig-lispify "isl_pw_qpolynomial_print" 'function)) :void
  (pwqp :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_dump" #.(swig-lispify "isl_pw_qpolynomial_dump" 'function)) :void
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_coalesce" #.(swig-lispify "isl_pw_qpolynomial_coalesce" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_gist" #.(swig-lispify "isl_pw_qpolynomial_gist" 'function)) :pointer
  (pwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_gist_params" #.(swig-lispify "isl_pw_qpolynomial_gist_params" 'function)) :pointer
  (pwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_split_periods" #.(swig-lispify "isl_pw_qpolynomial_split_periods" 'function)) :pointer
  (pwqp :pointer)
  (max_periods :int))

(cffi:defcfun ("isl_basic_set_multiplicative_call" #.(swig-lispify "isl_basic_set_multiplicative_call" 'function)) :pointer
  (bset :pointer)
  (fn :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_ctx" #.(swig-lispify "isl_qpolynomial_fold_get_ctx" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_type" #.(swig-lispify "isl_qpolynomial_fold_get_type" 'function)) #.(swig-lispify "isl_fold" 'enumname)
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_empty" #.(swig-lispify "isl_qpolynomial_fold_empty" 'function)) :pointer
  (type #.(swig-lispify "isl_fold" 'enumname))
  (dim :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_alloc" #.(swig-lispify "isl_qpolynomial_fold_alloc" 'function)) :pointer
  (type #.(swig-lispify "isl_fold" 'enumname))
  (qp :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_copy" #.(swig-lispify "isl_qpolynomial_fold_copy" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_free" #.(swig-lispify "isl_qpolynomial_fold_free" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_is_empty" #.(swig-lispify "isl_qpolynomial_fold_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_is_nan" #.(swig-lispify "isl_qpolynomial_fold_is_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_plain_is_equal" #.(swig-lispify "isl_qpolynomial_fold_plain_is_equal" 'function)) :int
  (fold1 :pointer)
  (fold2 :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_domain_space" #.(swig-lispify "isl_qpolynomial_fold_get_domain_space" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_get_space" #.(swig-lispify "isl_qpolynomial_fold_get_space" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_fold" #.(swig-lispify "isl_qpolynomial_fold_fold" 'function)) :pointer
  (fold1 :pointer)
  (fold2 :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_scale_val" #.(swig-lispify "isl_qpolynomial_fold_scale_val" 'function)) :pointer
  (fold :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_scale_down_val" #.(swig-lispify "isl_qpolynomial_fold_scale_down_val" 'function)) :pointer
  (fold :pointer)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_move_dims" #.(swig-lispify "isl_qpolynomial_fold_move_dims" 'function)) :pointer
  (fold :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_fold_substitute" #.(swig-lispify "isl_qpolynomial_fold_substitute" 'function)) :pointer
  (fold :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int)
  (subs :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_fix_val" #.(swig-lispify "isl_pw_qpolynomial_fold_fix_val" 'function)) :pointer
  (pwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_eval" #.(swig-lispify "isl_qpolynomial_fold_eval" 'function)) :pointer
  (fold :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_gist_params" #.(swig-lispify "isl_qpolynomial_fold_gist_params" 'function)) :pointer
  (fold :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_gist" #.(swig-lispify "isl_qpolynomial_fold_gist" 'function)) :pointer
  (fold :pointer)
  (context :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_foreach_qpolynomial" #.(swig-lispify "isl_qpolynomial_fold_foreach_qpolynomial" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (fold :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_printer_print_qpolynomial_fold" #.(swig-lispify "isl_printer_print_qpolynomial_fold" 'function)) :pointer
  (p :pointer)
  (fold :pointer))

(cffi:defcfun ("isl_qpolynomial_fold_print" #.(swig-lispify "isl_qpolynomial_fold_print" 'function)) :void
  (fold :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_qpolynomial_fold_dump" #.(swig-lispify "isl_qpolynomial_fold_dump" 'function)) :void
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_ctx" #.(swig-lispify "isl_pw_qpolynomial_fold_get_ctx" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_type" #.(swig-lispify "isl_pw_qpolynomial_fold_get_type" 'function)) #.(swig-lispify "isl_fold" 'enumname)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_involves_nan" #.(swig-lispify "isl_pw_qpolynomial_fold_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_plain_is_equal" #.(swig-lispify "isl_pw_qpolynomial_fold_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_pw_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_fold_from_pw_qpolynomial" 'function)) :pointer
  (type #.(swig-lispify "isl_fold" 'enumname))
  (pwqp :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_alloc" #.(swig-lispify "isl_pw_qpolynomial_fold_alloc" 'function)) :pointer
  (type #.(swig-lispify "isl_fold" 'enumname))
  (set :pointer)
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_from_qpolynomial_fold" 'function)) :pointer
  (fold :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_copy" #.(swig-lispify "isl_pw_qpolynomial_fold_copy" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_free" #.(swig-lispify "isl_pw_qpolynomial_fold_free" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_is_zero" #.(swig-lispify "isl_pw_qpolynomial_fold_is_zero" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_domain_space" #.(swig-lispify "isl_pw_qpolynomial_fold_get_domain_space" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_get_space" #.(swig-lispify "isl_pw_qpolynomial_fold_get_space" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_reset_space" #.(swig-lispify "isl_pw_qpolynomial_fold_reset_space" 'function)) :pointer
  (pwf :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_dim" #.(swig-lispify "isl_pw_qpolynomial_fold_dim" 'function)) :int
  (pwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_pw_qpolynomial_fold_involves_param_id" #.(swig-lispify "isl_pw_qpolynomial_fold_involves_param_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf :pointer)
  (id :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_has_equal_space" #.(swig-lispify "isl_pw_qpolynomial_fold_has_equal_space" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_size" #.(swig-lispify "isl_pw_qpolynomial_fold_size" 'function)) :unsigned-long
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_zero" #.(swig-lispify "isl_pw_qpolynomial_fold_zero" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname)))

(cffi:defcfun ("isl_pw_qpolynomial_fold_set_dim_name" #.(swig-lispify "isl_pw_qpolynomial_fold_set_dim_name" 'function)) :pointer
  (pwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_pw_qpolynomial_fold_find_dim_by_name" #.(swig-lispify "isl_pw_qpolynomial_fold_find_dim_by_name" 'function)) :int
  (pwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_pw_qpolynomial_fold_reset_user" #.(swig-lispify "isl_pw_qpolynomial_fold_reset_user" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_domain" #.(swig-lispify "isl_pw_qpolynomial_fold_domain" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain" #.(swig-lispify "isl_pw_qpolynomial_fold_intersect_domain" 'function)) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain" #.(swig-lispify "isl_pw_qpolynomial_fold_intersect_domain_wrapped_domain" 'function)) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_domain_wrapped_range" #.(swig-lispify "isl_pw_qpolynomial_fold_intersect_domain_wrapped_range" 'function)) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_intersect_params" #.(swig-lispify "isl_pw_qpolynomial_fold_intersect_params" 'function)) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_subtract_domain" #.(swig-lispify "isl_pw_qpolynomial_fold_subtract_domain" 'function)) :pointer
  (pwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_add" #.(swig-lispify "isl_pw_qpolynomial_fold_add" 'function)) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_fold" 'function)) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_add_disjoint" #.(swig-lispify "isl_pw_qpolynomial_fold_add_disjoint" 'function)) :pointer
  (pwf1 :pointer)
  (pwf2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_scale_val" #.(swig-lispify "isl_pw_qpolynomial_fold_scale_val" 'function)) :pointer
  (pwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_scale_down_val" #.(swig-lispify "isl_pw_qpolynomial_fold_scale_down_val" 'function)) :pointer
  (pwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_project_domain_on_params" #.(swig-lispify "isl_pw_qpolynomial_fold_project_domain_on_params" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_from_range" #.(swig-lispify "isl_pw_qpolynomial_fold_from_range" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_drop_dims" #.(swig-lispify "isl_pw_qpolynomial_fold_drop_dims" 'function)) :pointer
  (pwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_move_dims" #.(swig-lispify "isl_pw_qpolynomial_fold_move_dims" 'function)) :pointer
  (pwf :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_drop_unused_params" #.(swig-lispify "isl_pw_qpolynomial_fold_drop_unused_params" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_eval" #.(swig-lispify "isl_pw_qpolynomial_fold_eval" 'function)) :pointer
  (pwf :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_n_piece" #.(swig-lispify "isl_pw_qpolynomial_fold_n_piece" 'function)) :int
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_foreach_piece" #.(swig-lispify "isl_pw_qpolynomial_fold_foreach_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_foreach_lifted_piece" #.(swig-lispify "isl_pw_qpolynomial_fold_foreach_lifted_piece" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (pwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_isa_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_isa_qpolynomial_fold" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_as_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_as_qpolynomial_fold" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_fold" #.(swig-lispify "isl_printer_print_pw_qpolynomial_fold" 'function)) :pointer
  (p :pointer)
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_print" #.(swig-lispify "isl_pw_qpolynomial_fold_print" 'function)) :void
  (pwf :pointer)
  (out :pointer)
  (output_format :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_dump" #.(swig-lispify "isl_pw_qpolynomial_fold_dump" 'function)) :void
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_coalesce" #.(swig-lispify "isl_pw_qpolynomial_fold_coalesce" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_gist" #.(swig-lispify "isl_pw_qpolynomial_fold_gist" 'function)) :pointer
  (pwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_gist_params" #.(swig-lispify "isl_pw_qpolynomial_fold_gist_params" 'function)) :pointer
  (pwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_max" #.(swig-lispify "isl_pw_qpolynomial_fold_max" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_min" #.(swig-lispify "isl_pw_qpolynomial_fold_min" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_bound" #.(swig-lispify "isl_pw_qpolynomial_bound" 'function)) :pointer
  (pwqp :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname))
  (tight :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_bound" #.(swig-lispify "isl_pw_qpolynomial_fold_bound" 'function)) :pointer
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_set_apply_pw_qpolynomial_fold" #.(swig-lispify "isl_set_apply_pw_qpolynomial_fold" 'function)) :pointer
  (set :pointer)
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_map_apply_pw_qpolynomial_fold" #.(swig-lispify "isl_map_apply_pw_qpolynomial_fold" 'function)) :pointer
  (map :pointer)
  (pwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_to_polynomial" #.(swig-lispify "isl_pw_qpolynomial_to_polynomial" 'function)) :pointer
  (pwqp :pointer)
  (sign :int))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_ctx" #.(swig-lispify "isl_union_pw_qpolynomial_get_ctx" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_dim" #.(swig-lispify "isl_union_pw_qpolynomial_dim" 'function)) :int
  (upwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_pw_qpolynomial_involves_nan" #.(swig-lispify "isl_union_pw_qpolynomial_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_plain_is_equal" #.(swig-lispify "isl_union_pw_qpolynomial_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_from_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_from_pw_qpolynomial" 'function)) :pointer
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero_ctx" #.(swig-lispify "isl_union_pw_qpolynomial_zero_ctx" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero_space" #.(swig-lispify "isl_union_pw_qpolynomial_zero_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_zero" #.(swig-lispify "isl_union_pw_qpolynomial_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_add_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_add_pw_qpolynomial" 'function)) :pointer
  (upwqp :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_copy" #.(swig-lispify "isl_union_pw_qpolynomial_copy" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_free" #.(swig-lispify "isl_union_pw_qpolynomial_free" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_read_from_str" #.(swig-lispify "isl_union_pw_qpolynomial_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_to_str" #.(swig-lispify "isl_union_pw_qpolynomial_to_str" 'function)) :string
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_neg" #.(swig-lispify "isl_union_pw_qpolynomial_neg" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_add" #.(swig-lispify "isl_union_pw_qpolynomial_add" 'function)) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_sub" #.(swig-lispify "isl_union_pw_qpolynomial_sub" 'function)) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_mul" #.(swig-lispify "isl_union_pw_qpolynomial_mul" 'function)) :pointer
  (upwqp1 :pointer)
  (upwqp2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_scale_val" #.(swig-lispify "isl_union_pw_qpolynomial_scale_val" 'function)) :pointer
  (upwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_scale_down_val" #.(swig-lispify "isl_union_pw_qpolynomial_scale_down_val" 'function)) :pointer
  (upwqp :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_domain" #.(swig-lispify "isl_union_pw_qpolynomial_domain" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain" #.(swig-lispify "isl_union_pw_qpolynomial_intersect_domain" 'function)) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain_wrapped_domain" #.(swig-lispify "isl_union_pw_qpolynomial_intersect_domain_wrapped_domain" 'function)) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_domain_wrapped_range" #.(swig-lispify "isl_union_pw_qpolynomial_intersect_domain_wrapped_range" 'function)) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_intersect_params" #.(swig-lispify "isl_union_pw_qpolynomial_intersect_params" 'function)) :pointer
  (upwpq :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_subtract_domain" #.(swig-lispify "isl_union_pw_qpolynomial_subtract_domain" 'function)) :pointer
  (upwpq :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_space" #.(swig-lispify "isl_union_pw_qpolynomial_get_space" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_get_pw_qpolynomial_list" #.(swig-lispify "isl_union_pw_qpolynomial_get_pw_qpolynomial_list" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_set_dim_name" #.(swig-lispify "isl_union_pw_qpolynomial_set_dim_name" 'function)) :pointer
  (upwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_find_dim_by_name" #.(swig-lispify "isl_union_pw_qpolynomial_find_dim_by_name" 'function)) :int
  (upwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_drop_dims" #.(swig-lispify "isl_union_pw_qpolynomial_drop_dims" 'function)) :pointer
  (upwqp :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_qpolynomial_reset_user" #.(swig-lispify "isl_union_pw_qpolynomial_reset_user" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_eval" #.(swig-lispify "isl_union_pw_qpolynomial_eval" 'function)) :pointer
  (upwqp :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_coalesce" #.(swig-lispify "isl_union_pw_qpolynomial_coalesce" 'function)) :pointer
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_gist" #.(swig-lispify "isl_union_pw_qpolynomial_gist" 'function)) :pointer
  (upwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_gist_params" #.(swig-lispify "isl_union_pw_qpolynomial_gist_params" 'function)) :pointer
  (upwqp :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_align_params" #.(swig-lispify "isl_union_pw_qpolynomial_align_params" 'function)) :pointer
  (upwqp :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_n_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_n_pw_qpolynomial" 'function)) :int
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_foreach_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_foreach_pw_qpolynomial" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (upwqp :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_extract_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_extract_pw_qpolynomial" 'function)) :pointer
  (upwqp :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_qpolynomial" #.(swig-lispify "isl_printer_print_union_pw_qpolynomial" 'function)) :pointer
  (p :pointer)
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_ctx" #.(swig-lispify "isl_union_pw_qpolynomial_fold_get_ctx" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_dim" #.(swig-lispify "isl_union_pw_qpolynomial_fold_dim" 'function)) :int
  (upwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_involves_nan" #.(swig-lispify "isl_union_pw_qpolynomial_fold_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_plain_is_equal" #.(swig-lispify "isl_union_pw_qpolynomial_fold_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (upwf1 :pointer)
  (upwf2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_from_pw_qpolynomial_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_from_pw_qpolynomial_fold" 'function)) :pointer
  (pwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero_ctx" #.(swig-lispify "isl_union_pw_qpolynomial_fold_zero_ctx" 'function)) :pointer
  (ctx :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname)))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero_space" #.(swig-lispify "isl_union_pw_qpolynomial_fold_zero_space" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname)))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_zero" #.(swig-lispify "isl_union_pw_qpolynomial_fold_zero" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname)))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_fold_pw_qpolynomial_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_fold_pw_qpolynomial_fold" 'function)) :pointer
  (upwqp :pointer)
  (pwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_free" #.(swig-lispify "isl_union_pw_qpolynomial_fold_free" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_copy" #.(swig-lispify "isl_union_pw_qpolynomial_fold_copy" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_fold" 'function)) :pointer
  (upwf1 :pointer)
  (upwf2 :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_add_union_pw_qpolynomial" #.(swig-lispify "isl_union_pw_qpolynomial_fold_add_union_pw_qpolynomial" 'function)) :pointer
  (upwf :pointer)
  (upwqp :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_scale_val" #.(swig-lispify "isl_union_pw_qpolynomial_fold_scale_val" 'function)) :pointer
  (upwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_scale_down_val" #.(swig-lispify "isl_union_pw_qpolynomial_fold_scale_down_val" 'function)) :pointer
  (upwf :pointer)
  (v :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_domain" #.(swig-lispify "isl_union_pw_qpolynomial_fold_domain" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain" #.(swig-lispify "isl_union_pw_qpolynomial_fold_intersect_domain" 'function)) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_domain" #.(swig-lispify "isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_domain" 'function)) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_range" #.(swig-lispify "isl_union_pw_qpolynomial_fold_intersect_domain_wrapped_range" 'function)) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_intersect_params" #.(swig-lispify "isl_union_pw_qpolynomial_fold_intersect_params" 'function)) :pointer
  (upwf :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_subtract_domain" #.(swig-lispify "isl_union_pw_qpolynomial_fold_subtract_domain" 'function)) :pointer
  (upwf :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_type" #.(swig-lispify "isl_union_pw_qpolynomial_fold_get_type" 'function)) #.(swig-lispify "isl_fold" 'enumname)
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_space" #.(swig-lispify "isl_union_pw_qpolynomial_fold_get_space" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_get_pw_qpolynomial_fold_list" #.(swig-lispify "isl_union_pw_qpolynomial_fold_get_pw_qpolynomial_fold_list" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_set_dim_name" #.(swig-lispify "isl_union_pw_qpolynomial_fold_set_dim_name" 'function)) :pointer
  (upwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_find_dim_by_name" #.(swig-lispify "isl_union_pw_qpolynomial_fold_find_dim_by_name" 'function)) :int
  (upwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_drop_dims" #.(swig-lispify "isl_union_pw_qpolynomial_fold_drop_dims" 'function)) :pointer
  (upwf :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_reset_user" #.(swig-lispify "isl_union_pw_qpolynomial_fold_reset_user" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_eval" #.(swig-lispify "isl_union_pw_qpolynomial_fold_eval" 'function)) :pointer
  (upwf :pointer)
  (pnt :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_coalesce" #.(swig-lispify "isl_union_pw_qpolynomial_fold_coalesce" 'function)) :pointer
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_gist" #.(swig-lispify "isl_union_pw_qpolynomial_fold_gist" 'function)) :pointer
  (upwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_gist_params" #.(swig-lispify "isl_union_pw_qpolynomial_fold_gist_params" 'function)) :pointer
  (upwf :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_align_params" #.(swig-lispify "isl_union_pw_qpolynomial_fold_align_params" 'function)) :pointer
  (upwf :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_n_pw_qpolynomial_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_n_pw_qpolynomial_fold" 'function)) :int
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_foreach_pw_qpolynomial_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_foreach_pw_qpolynomial_fold" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (upwf :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_fold_extract_pw_qpolynomial_fold" #.(swig-lispify "isl_union_pw_qpolynomial_fold_extract_pw_qpolynomial_fold" 'function)) :pointer
  (upwf :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_printer_print_union_pw_qpolynomial_fold" #.(swig-lispify "isl_printer_print_union_pw_qpolynomial_fold" 'function)) :pointer
  (p :pointer)
  (upwf :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_bound" #.(swig-lispify "isl_union_pw_qpolynomial_bound" 'function)) :pointer
  (upwqp :pointer)
  (type #.(swig-lispify "isl_fold" 'enumname))
  (tight :pointer))

(cffi:defcfun ("isl_union_set_apply_union_pw_qpolynomial_fold" #.(swig-lispify "isl_union_set_apply_union_pw_qpolynomial_fold" 'function)) :pointer
  (uset :pointer)
  (upwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_union_map_apply_union_pw_qpolynomial_fold" #.(swig-lispify "isl_union_map_apply_union_pw_qpolynomial_fold" 'function)) :pointer
  (umap :pointer)
  (upwf :pointer)
  (tight :pointer))

(cffi:defcfun ("isl_union_pw_qpolynomial_to_polynomial" #.(swig-lispify "isl_union_pw_qpolynomial_to_polynomial" 'function)) :pointer
  (upwqp :pointer)
  (sign :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_ctx" #.(swig-lispify "isl_pw_qpolynomial_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_from_pw_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_list_from_pw_qpolynomial" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_alloc" #.(swig-lispify "isl_pw_qpolynomial_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_copy" #.(swig-lispify "isl_pw_qpolynomial_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_free" #.(swig-lispify "isl_pw_qpolynomial_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_add" #.(swig-lispify "isl_pw_qpolynomial_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_insert" #.(swig-lispify "isl_pw_qpolynomial_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_drop" #.(swig-lispify "isl_pw_qpolynomial_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_list_clear" #.(swig-lispify "isl_pw_qpolynomial_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_swap" #.(swig-lispify "isl_pw_qpolynomial_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_list_reverse" #.(swig-lispify "isl_pw_qpolynomial_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_concat" #.(swig-lispify "isl_pw_qpolynomial_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_size" #.(swig-lispify "isl_pw_qpolynomial_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_n_pw_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_list_n_pw_qpolynomial" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_at" #.(swig-lispify "isl_pw_qpolynomial_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_get_pw_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_list_get_pw_qpolynomial" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_list_set_pw_qpolynomial" #.(swig-lispify "isl_pw_qpolynomial_list_set_pw_qpolynomial" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_foreach" #.(swig-lispify "isl_pw_qpolynomial_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_map" #.(swig-lispify "isl_pw_qpolynomial_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_sort" #.(swig-lispify "isl_pw_qpolynomial_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_foreach_scc" #.(swig-lispify "isl_pw_qpolynomial_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_to_str" #.(swig-lispify "isl_pw_qpolynomial_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_list" #.(swig-lispify "isl_printer_print_pw_qpolynomial_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_list_dump" #.(swig-lispify "isl_pw_qpolynomial_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_ctx" #.(swig-lispify "isl_pw_qpolynomial_fold_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_list_from_pw_qpolynomial_fold" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_alloc" #.(swig-lispify "isl_pw_qpolynomial_fold_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_copy" #.(swig-lispify "isl_pw_qpolynomial_fold_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_free" #.(swig-lispify "isl_pw_qpolynomial_fold_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_add" #.(swig-lispify "isl_pw_qpolynomial_fold_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_insert" #.(swig-lispify "isl_pw_qpolynomial_fold_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_drop" #.(swig-lispify "isl_pw_qpolynomial_fold_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_clear" #.(swig-lispify "isl_pw_qpolynomial_fold_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_swap" #.(swig-lispify "isl_pw_qpolynomial_fold_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_reverse" #.(swig-lispify "isl_pw_qpolynomial_fold_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_concat" #.(swig-lispify "isl_pw_qpolynomial_fold_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_size" #.(swig-lispify "isl_pw_qpolynomial_fold_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_list_n_pw_qpolynomial_fold" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_at" #.(swig-lispify "isl_pw_qpolynomial_fold_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_list_get_pw_qpolynomial_fold" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold" #.(swig-lispify "isl_pw_qpolynomial_fold_list_set_pw_qpolynomial_fold" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_foreach" #.(swig-lispify "isl_pw_qpolynomial_fold_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_map" #.(swig-lispify "isl_pw_qpolynomial_fold_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_sort" #.(swig-lispify "isl_pw_qpolynomial_fold_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_foreach_scc" #.(swig-lispify "isl_pw_qpolynomial_fold_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_to_str" #.(swig-lispify "isl_pw_qpolynomial_fold_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_pw_qpolynomial_fold_list" #.(swig-lispify "isl_printer_print_pw_qpolynomial_fold_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_pw_qpolynomial_fold_list_dump" #.(swig-lispify "isl_pw_qpolynomial_fold_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_printer_to_file" #.(swig-lispify "isl_printer_to_file" 'function)) :pointer
  (ctx :pointer)
  (file :pointer))

(cffi:defcfun ("isl_printer_to_str" #.(swig-lispify "isl_printer_to_str" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_printer_free" #.(swig-lispify "isl_printer_free" 'function)) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_ctx" #.(swig-lispify "isl_printer_get_ctx" 'function)) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_file" #.(swig-lispify "isl_printer_get_file" 'function)) :pointer
  (printer :pointer))

(cffi:defcfun ("isl_printer_get_str" #.(swig-lispify "isl_printer_get_str" 'function)) :string
  (printer :pointer))

(cffi:defcfun ("isl_printer_set_indent" #.(swig-lispify "isl_printer_set_indent" 'function)) :pointer
  (p :pointer)
  (indent :int))

(cffi:defcfun ("isl_printer_indent" #.(swig-lispify "isl_printer_indent" 'function)) :pointer
  (p :pointer)
  (indent :int))

(cffi:defcfun ("isl_printer_set_output_format" #.(swig-lispify "isl_printer_set_output_format" 'function)) :pointer
  (p :pointer)
  (output_format :int))

(cffi:defcfun ("isl_printer_get_output_format" #.(swig-lispify "isl_printer_get_output_format" 'function)) :int
  (p :pointer))

(cffi:defcfun ("isl_printer_set_yaml_style" #.(swig-lispify "isl_printer_set_yaml_style" 'function)) :pointer
  (p :pointer)
  (yaml_style :int))

(cffi:defcfun ("isl_printer_get_yaml_style" #.(swig-lispify "isl_printer_get_yaml_style" 'function)) :int
  (p :pointer))

(cffi:defcfun ("isl_printer_set_indent_prefix" #.(swig-lispify "isl_printer_set_indent_prefix" 'function)) :pointer
  (p :pointer)
  (prefix :string))

(cffi:defcfun ("isl_printer_set_prefix" #.(swig-lispify "isl_printer_set_prefix" 'function)) :pointer
  (p :pointer)
  (prefix :string))

(cffi:defcfun ("isl_printer_set_suffix" #.(swig-lispify "isl_printer_set_suffix" 'function)) :pointer
  (p :pointer)
  (suffix :string))

(cffi:defcfun ("isl_printer_set_isl_int_width" #.(swig-lispify "isl_printer_set_isl_int_width" 'function)) :pointer
  (p :pointer)
  (width :int))

(cffi:defcfun ("isl_printer_has_note" #.(swig-lispify "isl_printer_has_note" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_printer_get_note" #.(swig-lispify "isl_printer_get_note" 'function)) :pointer
  (p :pointer)
  (id :pointer))

(cffi:defcfun ("isl_printer_set_note" #.(swig-lispify "isl_printer_set_note" 'function)) :pointer
  (p :pointer)
  (id :pointer)
  (note :pointer))

(cffi:defcfun ("isl_printer_start_line" #.(swig-lispify "isl_printer_start_line" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_end_line" #.(swig-lispify "isl_printer_end_line" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_print_double" #.(swig-lispify "isl_printer_print_double" 'function)) :pointer
  (p :pointer)
  (d :double))

(cffi:defcfun ("isl_printer_print_int" #.(swig-lispify "isl_printer_print_int" 'function)) :pointer
  (p :pointer)
  (i :int))

(cffi:defcfun ("isl_printer_print_str" #.(swig-lispify "isl_printer_print_str" 'function)) :pointer
  (p :pointer)
  (s :string))

(cffi:defcfun ("isl_printer_yaml_start_mapping" #.(swig-lispify "isl_printer_yaml_start_mapping" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_end_mapping" #.(swig-lispify "isl_printer_yaml_end_mapping" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_start_sequence" #.(swig-lispify "isl_printer_yaml_start_sequence" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_end_sequence" #.(swig-lispify "isl_printer_yaml_end_sequence" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_yaml_next" #.(swig-lispify "isl_printer_yaml_next" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_printer_flush" #.(swig-lispify "isl_printer_flush" 'function)) :pointer
  (p :pointer))

(cffi:defcfun ("isl_options_set_schedule_max_coefficient" #.(swig-lispify "isl_options_set_schedule_max_coefficient" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_max_coefficient" #.(swig-lispify "isl_options_get_schedule_max_coefficient" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_max_constant_term" #.(swig-lispify "isl_options_set_schedule_max_constant_term" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_max_constant_term" #.(swig-lispify "isl_options_get_schedule_max_constant_term" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_maximize_band_depth" #.(swig-lispify "isl_options_set_schedule_maximize_band_depth" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_maximize_band_depth" #.(swig-lispify "isl_options_get_schedule_maximize_band_depth" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_maximize_coincidence" #.(swig-lispify "isl_options_set_schedule_maximize_coincidence" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_maximize_coincidence" #.(swig-lispify "isl_options_get_schedule_maximize_coincidence" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_outer_coincidence" #.(swig-lispify "isl_options_set_schedule_outer_coincidence" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_outer_coincidence" #.(swig-lispify "isl_options_get_schedule_outer_coincidence" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_split_scaled" #.(swig-lispify "isl_options_set_schedule_split_scaled" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_split_scaled" #.(swig-lispify "isl_options_get_schedule_split_scaled" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_treat_coalescing" #.(swig-lispify "isl_options_set_schedule_treat_coalescing" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_treat_coalescing" #.(swig-lispify "isl_options_get_schedule_treat_coalescing" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_separate_components" #.(swig-lispify "isl_options_set_schedule_separate_components" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_separate_components" #.(swig-lispify "isl_options_get_schedule_separate_components" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_serialize_sccs" #.(swig-lispify "isl_options_set_schedule_serialize_sccs" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_serialize_sccs" #.(swig-lispify "isl_options_get_schedule_serialize_sccs" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_whole_component" #.(swig-lispify "isl_options_set_schedule_whole_component" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_whole_component" #.(swig-lispify "isl_options_get_schedule_whole_component" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_schedule_carry_self_first" #.(swig-lispify "isl_options_set_schedule_carry_self_first" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_schedule_carry_self_first" #.(swig-lispify "isl_options_get_schedule_carry_self_first" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_schedule_constraints_copy" #.(swig-lispify "isl_schedule_constraints_copy" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_on_domain" #.(swig-lispify "isl_schedule_constraints_on_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_context" #.(swig-lispify "isl_schedule_constraints_set_context" 'function)) :pointer
  (sc :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_validity" #.(swig-lispify "isl_schedule_constraints_set_validity" 'function)) :pointer
  (sc :pointer)
  (validity :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_coincidence" #.(swig-lispify "isl_schedule_constraints_set_coincidence" 'function)) :pointer
  (sc :pointer)
  (coincidence :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_proximity" #.(swig-lispify "isl_schedule_constraints_set_proximity" 'function)) :pointer
  (sc :pointer)
  (proximity :pointer))

(cffi:defcfun ("isl_schedule_constraints_set_conditional_validity" #.(swig-lispify "isl_schedule_constraints_set_conditional_validity" 'function)) :pointer
  (sc :pointer)
  (condition :pointer)
  (validity :pointer))

(cffi:defcfun ("isl_schedule_constraints_free" #.(swig-lispify "isl_schedule_constraints_free" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_ctx" #.(swig-lispify "isl_schedule_constraints_get_ctx" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_domain" #.(swig-lispify "isl_schedule_constraints_get_domain" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_context" #.(swig-lispify "isl_schedule_constraints_get_context" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_validity" #.(swig-lispify "isl_schedule_constraints_get_validity" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_coincidence" #.(swig-lispify "isl_schedule_constraints_get_coincidence" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_proximity" #.(swig-lispify "isl_schedule_constraints_get_proximity" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_conditional_validity" #.(swig-lispify "isl_schedule_constraints_get_conditional_validity" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_get_conditional_validity_condition" #.(swig-lispify "isl_schedule_constraints_get_conditional_validity_condition" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_apply" #.(swig-lispify "isl_schedule_constraints_apply" 'function)) :pointer
  (sc :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_schedule_constraints_read_from_str" #.(swig-lispify "isl_schedule_constraints_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_schedule_constraints_read_from_file" #.(swig-lispify "isl_schedule_constraints_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_printer_print_schedule_constraints" #.(swig-lispify "isl_printer_print_schedule_constraints" 'function)) :pointer
  (p :pointer)
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_dump" #.(swig-lispify "isl_schedule_constraints_dump" 'function)) :void
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_to_str" #.(swig-lispify "isl_schedule_constraints_to_str" 'function)) :string
  (sc :pointer))

(cffi:defcfun ("isl_schedule_constraints_compute_schedule" #.(swig-lispify "isl_schedule_constraints_compute_schedule" 'function)) :pointer
  (sc :pointer))

(cffi:defcfun ("isl_union_set_compute_schedule" #.(swig-lispify "isl_union_set_compute_schedule" 'function)) :pointer
  (domain :pointer)
  (validity :pointer)
  (proximity :pointer))

(cffi:defcfun ("isl_schedule_empty" #.(swig-lispify "isl_schedule_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_schedule_from_domain" #.(swig-lispify "isl_schedule_from_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_copy" #.(swig-lispify "isl_schedule_copy" 'function)) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_free" #.(swig-lispify "isl_schedule_free" 'function)) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_get_map" #.(swig-lispify "isl_schedule_get_map" 'function)) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_get_ctx" #.(swig-lispify "isl_schedule_get_ctx" 'function)) :pointer
  (sched :pointer))

(cffi:defcfun ("isl_schedule_plain_is_equal" #.(swig-lispify "isl_schedule_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_get_root" #.(swig-lispify "isl_schedule_get_root" 'function)) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_get_domain" #.(swig-lispify "isl_schedule_get_domain" 'function)) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_foreach_schedule_node_top_down" #.(swig-lispify "isl_schedule_foreach_schedule_node_top_down" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (sched :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_map_schedule_node_bottom_up" #.(swig-lispify "isl_schedule_map_schedule_node_bottom_up" 'function)) :pointer
  (schedule :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_insert_context" #.(swig-lispify "isl_schedule_insert_context" 'function)) :pointer
  (schedule :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_insert_partial_schedule" #.(swig-lispify "isl_schedule_insert_partial_schedule" 'function)) :pointer
  (schedule :pointer)
  (partial :pointer))

(cffi:defcfun ("isl_schedule_insert_guard" #.(swig-lispify "isl_schedule_insert_guard" 'function)) :pointer
  (schedule :pointer)
  (guard :pointer))

(cffi:defcfun ("isl_schedule_sequence" #.(swig-lispify "isl_schedule_sequence" 'function)) :pointer
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_set" #.(swig-lispify "isl_schedule_set" 'function)) :pointer
  (schedule1 :pointer)
  (schedule2 :pointer))

(cffi:defcfun ("isl_schedule_intersect_domain" #.(swig-lispify "isl_schedule_intersect_domain" 'function)) :pointer
  (schedule :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_schedule_gist_domain_params" #.(swig-lispify "isl_schedule_gist_domain_params" 'function)) :pointer
  (schedule :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_reset_user" #.(swig-lispify "isl_schedule_reset_user" 'function)) :pointer
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_align_params" #.(swig-lispify "isl_schedule_align_params" 'function)) :pointer
  (schedule :pointer)
  (space :pointer))

(cffi:defcfun ("isl_schedule_pullback_union_pw_multi_aff" #.(swig-lispify "isl_schedule_pullback_union_pw_multi_aff" 'function)) :pointer
  (schedule :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_schedule_expand" #.(swig-lispify "isl_schedule_expand" 'function)) :pointer
  (schedule :pointer)
  (contraction :pointer)
  (expansion :pointer))

(cffi:defcfun ("isl_schedule_read_from_file" #.(swig-lispify "isl_schedule_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_schedule_read_from_str" #.(swig-lispify "isl_schedule_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_schedule" #.(swig-lispify "isl_printer_print_schedule" 'function)) :pointer
  (p :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_dump" #.(swig-lispify "isl_schedule_dump" 'function)) :void
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_to_str" #.(swig-lispify "isl_schedule_to_str" 'function)) :string
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_node_from_domain" #.(swig-lispify "isl_schedule_node_from_domain" 'function)) :pointer
  (domain :pointer))

(cffi:defcfun ("isl_schedule_node_from_extension" #.(swig-lispify "isl_schedule_node_from_extension" 'function)) :pointer
  (extension :pointer))

(cffi:defcfun ("isl_schedule_node_copy" #.(swig-lispify "isl_schedule_node_copy" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_free" #.(swig-lispify "isl_schedule_node_free" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_is_equal" #.(swig-lispify "isl_schedule_node_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node1 :pointer)
  (node2 :pointer))

(cffi:defcfun ("isl_schedule_node_get_ctx" #.(swig-lispify "isl_schedule_node_get_ctx" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_type" #.(swig-lispify "isl_schedule_node_get_type" 'function)) #.(swig-lispify "isl_schedule_node_type" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_parent_type" #.(swig-lispify "isl_schedule_node_get_parent_type" 'function)) #.(swig-lispify "isl_schedule_node_type" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_schedule" #.(swig-lispify "isl_schedule_node_get_schedule" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_foreach_descendant_top_down" #.(swig-lispify "isl_schedule_node_foreach_descendant_top_down" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_every_descendant" #.(swig-lispify "isl_schedule_node_every_descendant" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_foreach_ancestor_top_down" #.(swig-lispify "isl_schedule_node_foreach_ancestor_top_down" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_schedule_node_map_descendant_bottom_up" #.(swig-lispify "isl_schedule_node_map_descendant_bottom_up" 'function)) :pointer
  (node :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("schedule_node_get_tree_depth" #.(swig-lispify "isl_schedule_node_get_tree_depth" 'function)) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_parent" #.(swig-lispify "isl_schedule_node_has_parent" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_children" #.(swig-lispify "isl_schedule_node_has_children" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_previous_sibling" #.(swig-lispify "isl_schedule_node_has_previous_sibling" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_has_next_sibling" #.(swig-lispify "isl_schedule_node_has_next_sibling" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_n_children" #.(swig-lispify "isl_schedule_node_n_children" 'function)) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_child_position" #.(swig-lispify "isl_schedule_node_get_child_position" 'function)) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_ancestor_child_position" #.(swig-lispify "isl_schedule_node_get_ancestor_child_position" 'function)) :int
  (node :pointer)
  (ancestor :pointer))

(cffi:defcfun ("isl_schedule_node_get_child" #.(swig-lispify "isl_schedule_node_get_child" 'function)) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_get_shared_ancestor" #.(swig-lispify "isl_schedule_node_get_shared_ancestor" 'function)) :pointer
  (node1 :pointer)
  (node2 :pointer))

(cffi:defcfun ("isl_schedule_node_root" #.(swig-lispify "isl_schedule_node_root" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_parent" #.(swig-lispify "isl_schedule_node_parent" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_ancestor" #.(swig-lispify "isl_schedule_node_ancestor" 'function)) :pointer
  (node :pointer)
  (generation :int))

(cffi:defcfun ("isl_schedule_node_child" #.(swig-lispify "isl_schedule_node_child" 'function)) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_first_child" #.(swig-lispify "isl_schedule_node_first_child" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_previous_sibling" #.(swig-lispify "isl_schedule_node_previous_sibling" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_next_sibling" #.(swig-lispify "isl_schedule_node_next_sibling" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_is_subtree_anchored" #.(swig-lispify "isl_schedule_node_is_subtree_anchored" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_group" #.(swig-lispify "isl_schedule_node_group" 'function)) :pointer
  (node :pointer)
  (group_id :pointer))

(cffi:defcfun ("isl_schedule_node_sequence_splice_child" #.(swig-lispify "isl_schedule_node_sequence_splice_child" 'function)) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_get_space" #.(swig-lispify "isl_schedule_node_band_get_space" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_partial_schedule" #.(swig-lispify "isl_schedule_node_band_get_partial_schedule" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_partial_schedule_union_map" #.(swig-lispify "isl_schedule_node_band_get_partial_schedule_union_map" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_member_get_ast_loop_type" #.(swig-lispify "isl_schedule_node_band_member_get_ast_loop_type" 'function)) #.(swig-lispify "isl_ast_loop_type" 'enumname)
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_ast_loop_type" #.(swig-lispify "isl_schedule_node_band_member_set_ast_loop_type" 'function)) :pointer
  (node :pointer)
  (pos :int)
  (type #.(swig-lispify "isl_ast_loop_type" 'enumname)))

(cffi:defcfun ("isl_schedule_node_band_member_get_isolate_ast_loop_type" #.(swig-lispify "isl_schedule_node_band_member_get_isolate_ast_loop_type" 'function)) #.(swig-lispify "isl_ast_loop_type" 'enumname)
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_isolate_ast_loop_type" #.(swig-lispify "isl_schedule_node_band_member_set_isolate_ast_loop_type" 'function)) :pointer
  (node :pointer)
  (pos :int)
  (type #.(swig-lispify "isl_ast_loop_type" 'enumname)))

(cffi:defcfun ("isl_schedule_node_band_get_ast_build_options" #.(swig-lispify "isl_schedule_node_band_get_ast_build_options" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_set_ast_build_options" #.(swig-lispify "isl_schedule_node_band_set_ast_build_options" 'function)) :pointer
  (node :pointer)
  (options :pointer))

(cffi:defcfun ("isl_schedule_node_band_get_ast_isolate_option" #.(swig-lispify "isl_schedule_node_band_get_ast_isolate_option" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_n_member" #.(swig-lispify "isl_schedule_node_band_n_member" 'function)) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_member_get_coincident" #.(swig-lispify "isl_schedule_node_band_member_get_coincident" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_band_member_set_coincident" #.(swig-lispify "isl_schedule_node_band_member_set_coincident" 'function)) :pointer
  (node :pointer)
  (pos :int)
  (coincident :int))

(cffi:defcfun ("isl_schedule_node_band_get_permutable" #.(swig-lispify "isl_schedule_node_band_get_permutable" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_set_permutable" #.(swig-lispify "isl_schedule_node_band_set_permutable" 'function)) :pointer
  (node :pointer)
  (permutable :int))

(cffi:defcfun ("isl_options_set_tile_scale_tile_loops" #.(swig-lispify "isl_options_set_tile_scale_tile_loops" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_tile_scale_tile_loops" #.(swig-lispify "isl_options_get_tile_scale_tile_loops" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_options_set_tile_shift_point_loops" #.(swig-lispify "isl_options_set_tile_shift_point_loops" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (ctx :pointer)
  (val :int))

(cffi:defcfun ("isl_options_get_tile_shift_point_loops" #.(swig-lispify "isl_options_get_tile_shift_point_loops" 'function)) :int
  (ctx :pointer))

(cffi:defcfun ("isl_schedule_node_band_scale" #.(swig-lispify "isl_schedule_node_band_scale" 'function)) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_scale_down" #.(swig-lispify "isl_schedule_node_band_scale_down" 'function)) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_mod" #.(swig-lispify "isl_schedule_node_band_mod" 'function)) :pointer
  (node :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_schedule_node_band_shift" #.(swig-lispify "isl_schedule_node_band_shift" 'function)) :pointer
  (node :pointer)
  (shift :pointer))

(cffi:defcfun ("isl_schedule_node_band_tile" #.(swig-lispify "isl_schedule_node_band_tile" 'function)) :pointer
  (node :pointer)
  (sizes :pointer))

(cffi:defcfun ("isl_schedule_node_band_sink" #.(swig-lispify "isl_schedule_node_band_sink" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_band_split" #.(swig-lispify "isl_schedule_node_band_split" 'function)) :pointer
  (node :pointer)
  (pos :int))

(cffi:defcfun ("isl_schedule_node_context_get_context" #.(swig-lispify "isl_schedule_node_context_get_context" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_domain_get_domain" #.(swig-lispify "isl_schedule_node_domain_get_domain" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_expansion_get_expansion" #.(swig-lispify "isl_schedule_node_expansion_get_expansion" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_expansion_get_contraction" #.(swig-lispify "isl_schedule_node_expansion_get_contraction" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_extension_get_extension" #.(swig-lispify "isl_schedule_node_extension_get_extension" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_filter_get_filter" #.(swig-lispify "isl_schedule_node_filter_get_filter" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_guard_get_guard" #.(swig-lispify "isl_schedule_node_guard_get_guard" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_mark_get_id" #.(swig-lispify "isl_schedule_node_mark_get_id" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_schedule_depth" #.(swig-lispify "isl_schedule_node_get_schedule_depth" 'function)) :int
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_domain" #.(swig-lispify "isl_schedule_node_get_domain" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_universe_domain" #.(swig-lispify "isl_schedule_node_get_universe_domain" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_multi_union_pw_aff" #.(swig-lispify "isl_schedule_node_get_prefix_schedule_multi_union_pw_aff" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_union_pw_multi_aff" #.(swig-lispify "isl_schedule_node_get_prefix_schedule_union_pw_multi_aff" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_union_map" #.(swig-lispify "isl_schedule_node_get_prefix_schedule_union_map" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_prefix_schedule_relation" #.(swig-lispify "isl_schedule_node_get_prefix_schedule_relation" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_schedule_union_map" #.(swig-lispify "isl_schedule_node_get_subtree_schedule_union_map" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_expansion" #.(swig-lispify "isl_schedule_node_get_subtree_expansion" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_get_subtree_contraction" #.(swig-lispify "isl_schedule_node_get_subtree_contraction" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_insert_context" #.(swig-lispify "isl_schedule_node_insert_context" 'function)) :pointer
  (node :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_node_insert_partial_schedule" #.(swig-lispify "isl_schedule_node_insert_partial_schedule" 'function)) :pointer
  (node :pointer)
  (schedule :pointer))

(cffi:defcfun ("isl_schedule_node_insert_filter" #.(swig-lispify "isl_schedule_node_insert_filter" 'function)) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_insert_guard" #.(swig-lispify "isl_schedule_node_insert_guard" 'function)) :pointer
  (node :pointer)
  (context :pointer))

(cffi:defcfun ("isl_schedule_node_insert_mark" #.(swig-lispify "isl_schedule_node_insert_mark" 'function)) :pointer
  (node :pointer)
  (mark :pointer))

(cffi:defcfun ("isl_schedule_node_insert_sequence" #.(swig-lispify "isl_schedule_node_insert_sequence" 'function)) :pointer
  (node :pointer)
  (filters :pointer))

(cffi:defcfun ("isl_schedule_node_insert_set" #.(swig-lispify "isl_schedule_node_insert_set" 'function)) :pointer
  (node :pointer)
  (filters :pointer))

(cffi:defcfun ("isl_schedule_node_cut" #.(swig-lispify "isl_schedule_node_cut" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_delete" #.(swig-lispify "isl_schedule_node_delete" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_order_before" #.(swig-lispify "isl_schedule_node_order_before" 'function)) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_order_after" #.(swig-lispify "isl_schedule_node_order_after" 'function)) :pointer
  (node :pointer)
  (filter :pointer))

(cffi:defcfun ("isl_schedule_node_graft_before" #.(swig-lispify "isl_schedule_node_graft_before" 'function)) :pointer
  (node :pointer)
  (graft :pointer))

(cffi:defcfun ("isl_schedule_node_graft_after" #.(swig-lispify "isl_schedule_node_graft_after" 'function)) :pointer
  (node :pointer)
  (graft :pointer))

(cffi:defcfun ("isl_schedule_node_reset_user" #.(swig-lispify "isl_schedule_node_reset_user" 'function)) :pointer
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_align_params" #.(swig-lispify "isl_schedule_node_align_params" 'function)) :pointer
  (node :pointer)
  (space :pointer))

(cffi:defcfun ("isl_printer_print_schedule_node" #.(swig-lispify "isl_printer_print_schedule_node" 'function)) :pointer
  (p :pointer)
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_dump" #.(swig-lispify "isl_schedule_node_dump" 'function)) :void
  (node :pointer))

(cffi:defcfun ("isl_schedule_node_to_str" #.(swig-lispify "isl_schedule_node_to_str" 'function)) :string
  (node :pointer))

(cffi:defcfun ("isl_basic_set_n_dim" #.(swig-lispify "isl_basic_set_n_dim" 'function)) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_n_param" #.(swig-lispify "isl_basic_set_n_param" 'function)) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_total_dim" #.(swig-lispify "isl_basic_set_total_dim" 'function)) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_dim" #.(swig-lispify "isl_basic_set_dim" 'function)) :int
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_set_n_dim" #.(swig-lispify "isl_set_n_dim" 'function)) :int
  (set :pointer))

(cffi:defcfun ("isl_set_n_param" #.(swig-lispify "isl_set_n_param" 'function)) :int
  (set :pointer))

(cffi:defcfun ("isl_set_dim" #.(swig-lispify "isl_set_dim" 'function)) :int
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_set_get_ctx" #.(swig-lispify "isl_basic_set_get_ctx" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_get_ctx" #.(swig-lispify "isl_set_get_ctx" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_get_space" #.(swig-lispify "isl_basic_set_get_space" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_get_space" #.(swig-lispify "isl_set_get_space" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_reset_space" #.(swig-lispify "isl_set_reset_space" 'function)) :pointer
  (set :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_basic_set_get_div" #.(swig-lispify "isl_basic_set_get_div" 'function)) :pointer
  (bset :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_get_local_space" #.(swig-lispify "isl_basic_set_get_local_space" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_get_tuple_name" #.(swig-lispify "isl_basic_set_get_tuple_name" 'function)) :string
  (bset :pointer))

(cffi:defcfun ("isl_set_has_tuple_name" #.(swig-lispify "isl_set_has_tuple_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_get_tuple_name" #.(swig-lispify "isl_set_get_tuple_name" 'function)) :string
  (set :pointer))

(cffi:defcfun ("isl_basic_set_set_tuple_name" #.(swig-lispify "isl_basic_set_set_tuple_name" 'function)) :pointer
  (set :pointer)
  (s :string))

(cffi:defcfun ("isl_set_set_tuple_name" #.(swig-lispify "isl_set_set_tuple_name" 'function)) :pointer
  (set :pointer)
  (s :string))

(cffi:defcfun ("isl_basic_set_get_dim_name" #.(swig-lispify "isl_basic_set_get_dim_name" 'function)) :string
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_set_dim_name" #.(swig-lispify "isl_basic_set_set_dim_name" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_set_has_dim_name" #.(swig-lispify "isl_set_has_dim_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_get_dim_name" #.(swig-lispify "isl_set_get_dim_name" 'function)) :string
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_set_dim_name" #.(swig-lispify "isl_set_set_dim_name" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_basic_set_get_dim_id" #.(swig-lispify "isl_basic_set_get_dim_id" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_set_tuple_id" #.(swig-lispify "isl_basic_set_set_tuple_id" 'function)) :pointer
  (bset :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_set_dim_id" #.(swig-lispify "isl_set_set_dim_id" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_set_has_dim_id" #.(swig-lispify "isl_set_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_get_dim_id" #.(swig-lispify "isl_set_get_dim_id" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_set_tuple_id" #.(swig-lispify "isl_set_set_tuple_id" 'function)) :pointer
  (set :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_reset_tuple_id" #.(swig-lispify "isl_set_reset_tuple_id" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_has_tuple_id" #.(swig-lispify "isl_set_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_get_tuple_id" #.(swig-lispify "isl_set_get_tuple_id" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_reset_user" #.(swig-lispify "isl_set_reset_user" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_find_dim_by_id" #.(swig-lispify "isl_set_find_dim_by_id" 'function)) :int
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_set_find_dim_by_name" #.(swig-lispify "isl_set_find_dim_by_name" 'function)) :int
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_basic_set_is_rational" #.(swig-lispify "isl_basic_set_is_rational" 'function)) :int
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_free" #.(swig-lispify "isl_basic_set_free" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_copy" #.(swig-lispify "isl_basic_set_copy" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_empty" #.(swig-lispify "isl_basic_set_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_universe" #.(swig-lispify "isl_basic_set_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_nat_universe" #.(swig-lispify "isl_basic_set_nat_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_positive_orthant" #.(swig-lispify "isl_basic_set_positive_orthant" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_basic_set_print_internal" #.(swig-lispify "isl_basic_set_print_internal" 'function)) :void
  (bset :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_basic_set_intersect" #.(swig-lispify "isl_basic_set_intersect" 'function)) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_intersect_params" #.(swig-lispify "isl_basic_set_intersect_params" 'function)) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_apply" #.(swig-lispify "isl_basic_set_apply" 'function)) :pointer
  (bset :pointer)
  (bmap :pointer))

(cffi:defcfun ("isl_basic_set_preimage_multi_aff" #.(swig-lispify "isl_basic_set_preimage_multi_aff" 'function)) :pointer
  (bset :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_basic_set_affine_hull" #.(swig-lispify "isl_basic_set_affine_hull" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_remove_dims" #.(swig-lispify "isl_basic_set_remove_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_sample" #.(swig-lispify "isl_basic_set_sample" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_detect_equalities" #.(swig-lispify "isl_basic_set_detect_equalities" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_remove_redundancies" #.(swig-lispify "isl_basic_set_remove_redundancies" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_remove_redundancies" #.(swig-lispify "isl_set_remove_redundancies" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_list_intersect" #.(swig-lispify "isl_basic_set_list_intersect" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_list_union" #.(swig-lispify "isl_set_list_union" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_basic_set_read_from_file" #.(swig-lispify "isl_basic_set_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_basic_set_read_from_str" #.(swig-lispify "isl_basic_set_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_set_read_from_file" #.(swig-lispify "isl_set_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_set_read_from_str" #.(swig-lispify "isl_set_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_basic_set_dump" #.(swig-lispify "isl_basic_set_dump" 'function)) :void
  (bset :pointer))

(cffi:defcfun ("isl_set_dump" #.(swig-lispify "isl_set_dump" 'function)) :void
  (set :pointer))

(cffi:defcfun ("isl_printer_print_basic_set" #.(swig-lispify "isl_printer_print_basic_set" 'function)) :pointer
  (printer :pointer)
  (bset :pointer))

(cffi:defcfun ("isl_printer_print_set" #.(swig-lispify "isl_printer_print_set" 'function)) :pointer
  (printer :pointer)
  (map :pointer))

(cffi:defcfun ("isl_basic_set_fix_si" #.(swig-lispify "isl_basic_set_fix_si" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_fix_val" #.(swig-lispify "isl_basic_set_fix_val" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_set_fix_si" #.(swig-lispify "isl_set_fix_si" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_set_lower_bound_si" #.(swig-lispify "isl_set_lower_bound_si" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_lower_bound_val" #.(swig-lispify "isl_basic_set_lower_bound_val" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_lower_bound_val" #.(swig-lispify "isl_set_lower_bound_val" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_upper_bound_si" #.(swig-lispify "isl_set_upper_bound_si" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_upper_bound_val" #.(swig-lispify "isl_basic_set_upper_bound_val" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_upper_bound_val" #.(swig-lispify "isl_set_upper_bound_val" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (value :pointer))

(cffi:defcfun ("isl_set_equate" #.(swig-lispify "isl_set_equate" 'function)) :pointer
  (set :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos1 :int)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname))
  (pos2 :int))

(cffi:defcfun ("isl_basic_set_is_equal" #.(swig-lispify "isl_basic_set_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_is_disjoint" #.(swig-lispify "isl_basic_set_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmin" #.(swig-lispify "isl_basic_set_partial_lexmin" 'function)) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmax" #.(swig-lispify "isl_basic_set_partial_lexmax" 'function)) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_partial_lexmin" #.(swig-lispify "isl_set_partial_lexmin" 'function)) :pointer
  (set :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_partial_lexmax" #.(swig-lispify "isl_set_partial_lexmax" 'function)) :pointer
  (set :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_lexmin" #.(swig-lispify "isl_basic_set_lexmin" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_lexmax" #.(swig-lispify "isl_basic_set_lexmax" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_lexmin" #.(swig-lispify "isl_set_lexmin" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lexmax" #.(swig-lispify "isl_set_lexmax" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmin_pw_multi_aff" #.(swig-lispify "isl_basic_set_partial_lexmin_pw_multi_aff" 'function)) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_basic_set_partial_lexmax_pw_multi_aff" #.(swig-lispify "isl_basic_set_partial_lexmax_pw_multi_aff" 'function)) :pointer
  (bset :pointer)
  (dom :pointer)
  (empty :pointer))

(cffi:defcfun ("isl_set_lexmin_pw_multi_aff" #.(swig-lispify "isl_set_lexmin_pw_multi_aff" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lexmax_pw_multi_aff" #.(swig-lispify "isl_set_lexmax_pw_multi_aff" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_union" #.(swig-lispify "isl_basic_set_union" 'function)) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_compare_at" #.(swig-lispify "isl_basic_set_compare_at" 'function)) :int
  (bset1 :pointer)
  (bset2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_follows_at" #.(swig-lispify "isl_set_follows_at" 'function)) :int
  (set1 :pointer)
  (set2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_params" #.(swig-lispify "isl_basic_set_params" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_from_params" #.(swig-lispify "isl_basic_set_from_params" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_params" #.(swig-lispify "isl_set_params" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_from_params" #.(swig-lispify "isl_set_from_params" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_bind" #.(swig-lispify "isl_set_bind" 'function)) :pointer
  (set :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_set_unbind_params" #.(swig-lispify "isl_set_unbind_params" 'function)) :pointer
  (set :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_set_unbind_params_insert_domain" #.(swig-lispify "isl_set_unbind_params_insert_domain" 'function)) :pointer
  (set :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_basic_set_dims_get_sign" #.(swig-lispify "isl_basic_set_dims_get_sign" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int)
  (signs :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_universe" #.(swig-lispify "isl_basic_set_plain_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_universe" #.(swig-lispify "isl_basic_set_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_empty" #.(swig-lispify "isl_basic_set_plain_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_empty" #.(swig-lispify "isl_basic_set_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_bounded" #.(swig-lispify "isl_basic_set_is_bounded" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_is_subset" #.(swig-lispify "isl_basic_set_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_basic_set_plain_is_equal" #.(swig-lispify "isl_basic_set_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_set_empty" #.(swig-lispify "isl_set_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_set_universe" #.(swig-lispify "isl_set_universe" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_set_nat_universe" #.(swig-lispify "isl_set_nat_universe" 'function)) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_set_copy" #.(swig-lispify "isl_set_copy" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_free" #.(swig-lispify "isl_set_free" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_from_basic_set" #.(swig-lispify "isl_set_from_basic_set" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_sample" #.(swig-lispify "isl_set_sample" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_sample_point" #.(swig-lispify "isl_basic_set_sample_point" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_sample_point" #.(swig-lispify "isl_set_sample_point" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_detect_equalities" #.(swig-lispify "isl_set_detect_equalities" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_affine_hull" #.(swig-lispify "isl_set_affine_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_convex_hull" #.(swig-lispify "isl_set_convex_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_polyhedral_hull" #.(swig-lispify "isl_set_polyhedral_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_simple_hull" #.(swig-lispify "isl_set_simple_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_unshifted_simple_hull" #.(swig-lispify "isl_set_unshifted_simple_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_unshifted_simple_hull" #.(swig-lispify "isl_set_plain_unshifted_simple_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_unshifted_simple_hull_from_set_list" #.(swig-lispify "isl_set_unshifted_simple_hull_from_set_list" 'function)) :pointer
  (set :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_bounded_simple_hull" #.(swig-lispify "isl_set_bounded_simple_hull" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_union_disjoint" #.(swig-lispify "isl_set_union_disjoint" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_union" #.(swig-lispify "isl_set_union" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_product" #.(swig-lispify "isl_set_product" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_basic_set_flat_product" #.(swig-lispify "isl_basic_set_flat_product" 'function)) :pointer
  (bset1 :pointer)
  (bset2 :pointer))

(cffi:defcfun ("isl_set_flat_product" #.(swig-lispify "isl_set_flat_product" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_intersect" #.(swig-lispify "isl_set_intersect" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_intersect_params" #.(swig-lispify "isl_set_intersect_params" 'function)) :pointer
  (set :pointer)
  (params :pointer))

(cffi:defcfun ("isl_set_intersect_factor_domain" #.(swig-lispify "isl_set_intersect_factor_domain" 'function)) :pointer
  (set :pointer)
  (domain :pointer))

(cffi:defcfun ("isl_set_intersect_factor_range" #.(swig-lispify "isl_set_intersect_factor_range" 'function)) :pointer
  (set :pointer)
  (range :pointer))

(cffi:defcfun ("isl_set_subtract" #.(swig-lispify "isl_set_subtract" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_complement" #.(swig-lispify "isl_set_complement" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_apply" #.(swig-lispify "isl_set_apply" 'function)) :pointer
  (set :pointer)
  (map :pointer))

(cffi:defcfun ("isl_set_preimage_multi_aff" #.(swig-lispify "isl_set_preimage_multi_aff" 'function)) :pointer
  (set :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_set_preimage_pw_multi_aff" #.(swig-lispify "isl_set_preimage_pw_multi_aff" 'function)) :pointer
  (set :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_set_preimage_multi_pw_aff" #.(swig-lispify "isl_set_preimage_multi_pw_aff" 'function)) :pointer
  (set :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_set_fix_val" #.(swig-lispify "isl_set_fix_val" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (v :pointer))

(cffi:defcfun ("isl_set_fix_dim_si" #.(swig-lispify "isl_set_fix_dim_si" 'function)) :pointer
  (set :pointer)
  (dim :unsigned-int)
  (value :int))

(cffi:defcfun ("isl_basic_set_insert_dims" #.(swig-lispify "isl_basic_set_insert_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_insert_dims" #.(swig-lispify "isl_set_insert_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_add_dims" #.(swig-lispify "isl_basic_set_add_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_set_add_dims" #.(swig-lispify "isl_set_add_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_move_dims" #.(swig-lispify "isl_basic_set_move_dims" 'function)) :pointer
  (bset :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_move_dims" #.(swig-lispify "isl_set_move_dims" 'function)) :pointer
  (set :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_project_out" #.(swig-lispify "isl_basic_set_project_out" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_project_out_param_id" #.(swig-lispify "isl_set_project_out_param_id" 'function)) :pointer
  (set :pointer)
  (id :pointer))

(cffi:defcfun ("isl_set_project_out_param_id_list" #.(swig-lispify "isl_set_project_out_param_id_list" 'function)) :pointer
  (set :pointer)
  (list :pointer))

(cffi:defcfun ("isl_set_project_out" #.(swig-lispify "isl_set_project_out" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_project_out_all_params" #.(swig-lispify "isl_set_project_out_all_params" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_project_onto_map" #.(swig-lispify "isl_set_project_onto_map" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_divs" #.(swig-lispify "isl_basic_set_remove_divs" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_eliminate" #.(swig-lispify "isl_basic_set_eliminate" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_eliminate" #.(swig-lispify "isl_set_eliminate" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_eliminate_dims" #.(swig-lispify "isl_set_eliminate_dims" 'function)) :pointer
  (set :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_remove_dims" #.(swig-lispify "isl_set_remove_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_divs_involving_dims" #.(swig-lispify "isl_basic_set_remove_divs_involving_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_remove_divs_involving_dims" #.(swig-lispify "isl_set_remove_divs_involving_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_remove_unknown_divs" #.(swig-lispify "isl_basic_set_remove_unknown_divs" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_remove_unknown_divs" #.(swig-lispify "isl_set_remove_unknown_divs" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_remove_divs" #.(swig-lispify "isl_set_remove_divs" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_split_dims" #.(swig-lispify "isl_set_split_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_drop_constraints_involving_dims" #.(swig-lispify "isl_basic_set_drop_constraints_involving_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_drop_constraints_not_involving_dims" #.(swig-lispify "isl_basic_set_drop_constraints_not_involving_dims" 'function)) :pointer
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_drop_constraints_involving_dims" #.(swig-lispify "isl_set_drop_constraints_involving_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_drop_constraints_not_involving_dims" #.(swig-lispify "isl_set_drop_constraints_not_involving_dims" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_basic_set_involves_dims" #.(swig-lispify "isl_basic_set_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (bset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_involves_dims" #.(swig-lispify "isl_set_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_set_print_internal" #.(swig-lispify "isl_set_print_internal" 'function)) :void
  (set :pointer)
  (out :pointer)
  (indent :int))

(cffi:defcfun ("isl_set_plain_is_empty" #.(swig-lispify "isl_set_plain_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_plain_is_universe" #.(swig-lispify "isl_set_plain_is_universe" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_is_params" #.(swig-lispify "isl_set_is_params" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_is_empty" #.(swig-lispify "isl_set_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_is_bounded" #.(swig-lispify "isl_set_is_bounded" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_is_subset" #.(swig-lispify "isl_set_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_strict_subset" #.(swig-lispify "isl_set_is_strict_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_equal" #.(swig-lispify "isl_set_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_disjoint" #.(swig-lispify "isl_set_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_is_singleton" #.(swig-lispify "isl_set_is_singleton" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_is_box" #.(swig-lispify "isl_set_is_box" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer))

(cffi:defcfun ("isl_set_has_equal_space" #.(swig-lispify "isl_set_has_equal_space" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_sum" #.(swig-lispify "isl_set_sum" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_basic_set_neg" #.(swig-lispify "isl_basic_set_neg" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_neg" #.(swig-lispify "isl_set_neg" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_make_disjoint" #.(swig-lispify "isl_set_make_disjoint" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_compute_divs" #.(swig-lispify "isl_basic_set_compute_divs" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_compute_divs" #.(swig-lispify "isl_set_compute_divs" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_align_divs" #.(swig-lispify "isl_set_align_divs" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_get_val_if_fixed" #.(swig-lispify "isl_set_plain_get_val_if_fixed" 'function)) :pointer
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_is_bounded" #.(swig-lispify "isl_set_dim_is_bounded" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_lower_bound" #.(swig-lispify "isl_set_dim_has_lower_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_upper_bound" #.(swig-lispify "isl_set_dim_has_upper_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_any_lower_bound" #.(swig-lispify "isl_set_dim_has_any_lower_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_set_dim_has_any_upper_bound" #.(swig-lispify "isl_set_dim_has_any_upper_bound" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_basic_set_gist" #.(swig-lispify "isl_basic_set_gist" 'function)) :pointer
  (bset :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist_basic_set" #.(swig-lispify "isl_set_gist_basic_set" 'function)) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist" #.(swig-lispify "isl_set_gist" 'function)) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_gist_params" #.(swig-lispify "isl_set_gist_params" 'function)) :pointer
  (set :pointer)
  (context :pointer))

(cffi:defcfun ("isl_set_dim_residue_class_val" #.(swig-lispify "isl_set_dim_residue_class_val" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (set :pointer)
  (pos :int)
  (modulo :pointer)
  (residue :pointer))

(cffi:defcfun ("isl_set_get_stride_info" #.(swig-lispify "isl_set_get_stride_info" 'function)) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_get_stride" #.(swig-lispify "isl_set_get_stride" 'function)) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_coalesce" #.(swig-lispify "isl_set_coalesce" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_plain_cmp" #.(swig-lispify "isl_set_plain_cmp" 'function)) :int
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_plain_is_equal" #.(swig-lispify "isl_set_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_plain_is_disjoint" #.(swig-lispify "isl_set_plain_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_get_hash" #.(swig-lispify "isl_set_get_hash" 'function)) :unsigned-int
  (set :pointer))

(cffi:defcfun ("isl_set_n_basic_set" #.(swig-lispify "isl_set_n_basic_set" 'function)) :int
  (set :pointer))

(cffi:defcfun ("isl_set_foreach_basic_set" #.(swig-lispify "isl_set_foreach_basic_set" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (set :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_get_basic_set_list" #.(swig-lispify "isl_set_get_basic_set_list" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_foreach_point" #.(swig-lispify "isl_set_foreach_point" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (set :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_set_count_val" #.(swig-lispify "isl_set_count_val" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_from_point" #.(swig-lispify "isl_basic_set_from_point" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_set_from_point" #.(swig-lispify "isl_set_from_point" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_basic_set_box_from_points" #.(swig-lispify "isl_basic_set_box_from_points" 'function)) :pointer
  (pnt1 :pointer)
  (pnt2 :pointer))

(cffi:defcfun ("isl_set_box_from_points" #.(swig-lispify "isl_set_box_from_points" 'function)) :pointer
  (pnt1 :pointer)
  (pnt2 :pointer))

(cffi:defcfun ("isl_basic_set_lift" #.(swig-lispify "isl_basic_set_lift" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_lift" #.(swig-lispify "isl_set_lift" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_lex_le_set" #.(swig-lispify "isl_set_lex_le_set" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_lt_set" #.(swig-lispify "isl_set_lex_lt_set" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_ge_set" #.(swig-lispify "isl_set_lex_ge_set" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_lex_gt_set" #.(swig-lispify "isl_set_lex_gt_set" 'function)) :pointer
  (set1 :pointer)
  (set2 :pointer))

(cffi:defcfun ("isl_set_size" #.(swig-lispify "isl_set_size" 'function)) :int
  (set :pointer))

(cffi:defcfun ("isl_basic_set_align_params" #.(swig-lispify "isl_basic_set_align_params" 'function)) :pointer
  (bset :pointer)
  (model :pointer))

(cffi:defcfun ("isl_set_align_params" #.(swig-lispify "isl_set_align_params" 'function)) :pointer
  (set :pointer)
  (model :pointer))

(cffi:defcfun ("isl_basic_set_drop_unused_params" #.(swig-lispify "isl_basic_set_drop_unused_params" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_drop_unused_params" #.(swig-lispify "isl_set_drop_unused_params" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_equalities_matrix" #.(swig-lispify "isl_basic_set_equalities_matrix" 'function)) :pointer
  (bset :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_set_inequalities_matrix" #.(swig-lispify "isl_basic_set_inequalities_matrix" 'function)) :pointer
  (bset :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_set_from_constraint_matrices" #.(swig-lispify "isl_basic_set_from_constraint_matrices" 'function)) :pointer
  (dim :pointer)
  (eq :pointer)
  (ineq :pointer)
  (c1 #.(swig-lispify "isl_dim_type" 'enumname))
  (c2 #.(swig-lispify "isl_dim_type" 'enumname))
  (c3 #.(swig-lispify "isl_dim_type" 'enumname))
  (c4 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_basic_set_from_multi_aff" #.(swig-lispify "isl_basic_set_from_multi_aff" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_set_from_multi_aff" #.(swig-lispify "isl_set_from_multi_aff" 'function)) :pointer
  (ma :pointer))

(cffi:defcfun ("isl_basic_set_reduced_basis" #.(swig-lispify "isl_basic_set_reduced_basis" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_coefficients" #.(swig-lispify "isl_basic_set_coefficients" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_basic_set_list_coefficients" #.(swig-lispify "isl_basic_set_list_coefficients" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_set_coefficients" #.(swig-lispify "isl_set_coefficients" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_basic_set_solutions" #.(swig-lispify "isl_basic_set_solutions" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_set_solutions" #.(swig-lispify "isl_set_solutions" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_set_dim_max" #.(swig-lispify "isl_set_dim_max" 'function)) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_set_dim_min" #.(swig-lispify "isl_set_dim_min" 'function)) :pointer
  (set :pointer)
  (pos :int))

(cffi:defcfun ("isl_basic_set_to_str" #.(swig-lispify "isl_basic_set_to_str" 'function)) :string
  (bset :pointer))

(cffi:defcfun ("isl_set_to_str" #.(swig-lispify "isl_set_to_str" 'function)) :string
  (set :pointer))

(cffi:defcfun ("isl_space_get_ctx" #.(swig-lispify "isl_space_get_ctx" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_unit" #.(swig-lispify "isl_space_unit" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_space_alloc" #.(swig-lispify "isl_space_alloc" 'function)) :pointer
  (ctx :pointer)
  (nparam :unsigned-int)
  (n_in :unsigned-int)
  (n_out :unsigned-int))

(cffi:defcfun ("isl_space_set_alloc" #.(swig-lispify "isl_space_set_alloc" 'function)) :pointer
  (ctx :pointer)
  (nparam :unsigned-int)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_params_alloc" #.(swig-lispify "isl_space_params_alloc" 'function)) :pointer
  (ctx :pointer)
  (nparam :unsigned-int))

(cffi:defcfun ("isl_space_copy" #.(swig-lispify "isl_space_copy" 'function)) :pointer
  (dim :pointer))

(cffi:defcfun ("isl_space_free" #.(swig-lispify "isl_space_free" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_is_params" #.(swig-lispify "isl_space_is_params" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_is_set" #.(swig-lispify "isl_space_is_set" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_is_map" #.(swig-lispify "isl_space_is_map" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_add_param_id" #.(swig-lispify "isl_space_add_param_id" 'function)) :pointer
  (space :pointer)
  (id :pointer))

(cffi:defcfun ("isl_space_set_tuple_name" #.(swig-lispify "isl_space_set_tuple_name" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_space_has_tuple_name" #.(swig-lispify "isl_space_has_tuple_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_get_tuple_name" #.(swig-lispify "isl_space_get_tuple_name" 'function)) :string
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_set_tuple_id" #.(swig-lispify "isl_space_set_tuple_id" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_space_reset_tuple_id" #.(swig-lispify "isl_space_reset_tuple_id" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_has_tuple_id" #.(swig-lispify "isl_space_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_get_tuple_id" #.(swig-lispify "isl_space_get_tuple_id" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_reset_user" #.(swig-lispify "isl_space_reset_user" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_set_dim_id" #.(swig-lispify "isl_space_set_dim_id" 'function)) :pointer
  (dim :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_space_has_dim_id" #.(swig-lispify "isl_space_has_dim_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_get_dim_id" #.(swig-lispify "isl_space_get_dim_id" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_find_dim_by_id" #.(swig-lispify "isl_space_find_dim_by_id" 'function)) :int
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_space_find_dim_by_name" #.(swig-lispify "isl_space_find_dim_by_name" 'function)) :int
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_space_has_dim_name" #.(swig-lispify "isl_space_has_dim_name" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_set_dim_name" #.(swig-lispify "isl_space_set_dim_name" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (name :string))

(cffi:defcfun ("isl_space_get_dim_name" #.(swig-lispify "isl_space_get_dim_name" 'function)) :string
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_space_extend" #.(swig-lispify "isl_space_extend" 'function)) :pointer
  (dim :pointer)
  (nparam :unsigned-int)
  (n_in :unsigned-int)
  (n_out :unsigned-int))

(cffi:defcfun ("isl_space_add_dims" #.(swig-lispify "isl_space_add_dims" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_space_move_dims" #.(swig-lispify "isl_space_move_dims" 'function)) :pointer
  (space :pointer)
  (dst_type #.(swig-lispify "isl_dim_type" 'enumname))
  (dst_pos :unsigned-int)
  (src_type #.(swig-lispify "isl_dim_type" 'enumname))
  (src_pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_insert_dims" #.(swig-lispify "isl_space_insert_dims" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_join" #.(swig-lispify "isl_space_join" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_product" #.(swig-lispify "isl_space_product" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_domain_product" #.(swig-lispify "isl_space_domain_product" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_range_product" #.(swig-lispify "isl_space_range_product" 'function)) :pointer
  (left :pointer)
  (right :pointer))

(cffi:defcfun ("isl_space_factor_domain" #.(swig-lispify "isl_space_factor_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_factor_range" #.(swig-lispify "isl_space_factor_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_factor_domain" #.(swig-lispify "isl_space_domain_factor_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_factor_range" #.(swig-lispify "isl_space_domain_factor_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_factor_domain" #.(swig-lispify "isl_space_range_factor_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_factor_range" #.(swig-lispify "isl_space_range_factor_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_map_from_set" #.(swig-lispify "isl_space_map_from_set" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_map_from_domain_and_range" #.(swig-lispify "isl_space_map_from_domain_and_range" 'function)) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_space_reverse" #.(swig-lispify "isl_space_reverse" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_reverse" #.(swig-lispify "isl_space_range_reverse" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_drop_dims" #.(swig-lispify "isl_space_drop_dims" 'function)) :pointer
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (num :unsigned-int))

(cffi:defcfun ("isl_space_drop_inputs" #.(swig-lispify "isl_space_drop_inputs" 'function)) :pointer
  (dim :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_drop_outputs" #.(swig-lispify "isl_space_drop_outputs" 'function)) :pointer
  (dim :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_space_drop_all_params" #.(swig-lispify "isl_space_drop_all_params" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain" #.(swig-lispify "isl_space_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_from_domain" #.(swig-lispify "isl_space_from_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range" #.(swig-lispify "isl_space_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_from_range" #.(swig-lispify "isl_space_from_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_domain_map" #.(swig-lispify "isl_space_domain_map" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_range_map" #.(swig-lispify "isl_space_range_map" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_params" #.(swig-lispify "isl_space_params" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_add_unnamed_tuple_ui" #.(swig-lispify "isl_space_add_unnamed_tuple_ui" 'function)) :pointer
  (space :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_add_named_tuple_id_ui" #.(swig-lispify "isl_space_add_named_tuple_id_ui" 'function)) :pointer
  (space :pointer)
  (tuple_id :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("isl_space_set_from_params" #.(swig-lispify "isl_space_set_from_params" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_align_params" #.(swig-lispify "isl_space_align_params" 'function)) :pointer
  (dim1 :pointer)
  (dim2 :pointer))

(cffi:defcfun ("isl_space_is_wrapping" #.(swig-lispify "isl_space_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_domain_is_wrapping" #.(swig-lispify "isl_space_domain_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_range_is_wrapping" #.(swig-lispify "isl_space_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_is_product" #.(swig-lispify "isl_space_is_product" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_wrap" #.(swig-lispify "isl_space_wrap" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_unwrap" #.(swig-lispify "isl_space_unwrap" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_zip" #.(swig-lispify "isl_space_can_zip" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_zip" #.(swig-lispify "isl_space_zip" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_curry" #.(swig-lispify "isl_space_can_curry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_curry" #.(swig-lispify "isl_space_curry" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_range_curry" #.(swig-lispify "isl_space_can_range_curry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_range_curry" #.(swig-lispify "isl_space_range_curry" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_can_uncurry" #.(swig-lispify "isl_space_can_uncurry" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space :pointer))

(cffi:defcfun ("isl_space_uncurry" #.(swig-lispify "isl_space_uncurry" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_is_domain" #.(swig-lispify "isl_space_is_domain" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_is_range" #.(swig-lispify "isl_space_is_range" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_is_equal" #.(swig-lispify "isl_space_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_has_equal_params" #.(swig-lispify "isl_space_has_equal_params" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_has_equal_tuples" #.(swig-lispify "isl_space_has_equal_tuples" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (space2 :pointer))

(cffi:defcfun ("isl_space_tuple_is_equal" #.(swig-lispify "isl_space_tuple_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (space2 :pointer)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_match" #.(swig-lispify "isl_space_match" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (space1 :pointer)
  (type1 #.(swig-lispify "isl_dim_type" 'enumname))
  (space2 :pointer)
  (type2 #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_dim" #.(swig-lispify "isl_space_dim" 'function)) :int
  (space :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_space_flatten_domain" #.(swig-lispify "isl_space_flatten_domain" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_flatten_range" #.(swig-lispify "isl_space_flatten_range" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_space_to_str" #.(swig-lispify "isl_space_to_str" 'function)) :string
  (space :pointer))

(cffi:defcfun ("isl_printer_print_space" #.(swig-lispify "isl_printer_print_space" 'function)) :pointer
  (p :pointer)
  (space :pointer))

(cffi:defcfun ("isl_space_dump" #.(swig-lispify "isl_space_dump" 'function)) :void
  (space :pointer))

(cffi:defcfun ("isl_token_get_val" #.(swig-lispify "isl_token_get_val" 'function)) :pointer
  (ctx :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_token_get_str" #.(swig-lispify "isl_token_get_str" 'function)) :string
  (ctx :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_token_get_type" #.(swig-lispify "isl_token_get_type" 'function)) :int
  (tok :pointer))

(cffi:defcfun ("isl_token_free" #.(swig-lispify "isl_token_free" 'function)) :void
  (tok :pointer))

(cffi:defcfun ("isl_stream_new_file" #.(swig-lispify "isl_stream_new_file" 'function)) :pointer
  (ctx :pointer)
  (file :pointer))

(cffi:defcfun ("isl_stream_new_str" #.(swig-lispify "isl_stream_new_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_stream_free" #.(swig-lispify "isl_stream_free" 'function)) :void
  (s :pointer))

(cffi:defcfun ("isl_stream_get_ctx" #.(swig-lispify "isl_stream_get_ctx" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_error" #.(swig-lispify "isl_stream_error" 'function)) :void
  (s :pointer)
  (tok :pointer)
  (msg :string))

(cffi:defcfun ("isl_stream_next_token" #.(swig-lispify "isl_stream_next_token" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_next_token_on_same_line" #.(swig-lispify "isl_stream_next_token_on_same_line" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_next_token_is" #.(swig-lispify "isl_stream_next_token_is" 'function)) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_push_token" #.(swig-lispify "isl_stream_push_token" 'function)) :void
  (s :pointer)
  (tok :pointer))

(cffi:defcfun ("isl_stream_flush_tokens" #.(swig-lispify "isl_stream_flush_tokens" 'function)) :void
  (s :pointer))

(cffi:defcfun ("isl_stream_eat_if_available" #.(swig-lispify "isl_stream_eat_if_available" 'function)) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_read_ident_if_available" #.(swig-lispify "isl_stream_read_ident_if_available" 'function)) :string
  (s :pointer))

(cffi:defcfun ("isl_stream_eat" #.(swig-lispify "isl_stream_eat" 'function)) :int
  (s :pointer)
  (type :int))

(cffi:defcfun ("isl_stream_is_empty" #.(swig-lispify "isl_stream_is_empty" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_skip_line" #.(swig-lispify "isl_stream_skip_line" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_register_keyword" #.(swig-lispify "isl_stream_register_keyword" 'function)) #.(swig-lispify "isl_token_type" 'enumname)
  (s :pointer)
  (name :string))

(cffi:defcfun ("isl_stream_read_obj" #.(swig-lispify "isl_stream_read_obj" 'function)) #.(swig-lispify "isl_obj" 'classname)
  (s :pointer))

(cffi:defcfun ("isl_stream_read_val" #.(swig-lispify "isl_stream_read_val" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_multi_aff" #.(swig-lispify "isl_stream_read_multi_aff" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_map" #.(swig-lispify "isl_stream_read_map" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_set" #.(swig-lispify "isl_stream_read_set" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_pw_qpolynomial" #.(swig-lispify "isl_stream_read_pw_qpolynomial" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_union_set" #.(swig-lispify "isl_stream_read_union_set" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_union_map" #.(swig-lispify "isl_stream_read_union_map" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_read_schedule" #.(swig-lispify "isl_stream_read_schedule" 'function)) :pointer
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_start_mapping" #.(swig-lispify "isl_stream_yaml_read_start_mapping" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_end_mapping" #.(swig-lispify "isl_stream_yaml_read_end_mapping" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_start_sequence" #.(swig-lispify "isl_stream_yaml_read_start_sequence" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_read_end_sequence" #.(swig-lispify "isl_stream_yaml_read_end_sequence" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stream_yaml_next" #.(swig-lispify "isl_stream_yaml_next" 'function)) :int
  (s :pointer))

(cffi:defcfun ("isl_stride_info_get_ctx" #.(swig-lispify "isl_stride_info_get_ctx" 'function)) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_get_stride" #.(swig-lispify "isl_stride_info_get_stride" 'function)) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_get_offset" #.(swig-lispify "isl_stride_info_get_offset" 'function)) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_free" #.(swig-lispify "isl_stride_info_free" 'function)) :pointer
  (si :pointer))

(cffi:defcfun ("isl_stride_info_copy" #.(swig-lispify "isl_stride_info_copy" 'function)) :pointer
  (si :pointer))

(cffi:defcfun ("isl_union_map_dim" #.(swig-lispify "isl_union_map_dim" 'function)) :int
  (umap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_map_involves_dims" #.(swig-lispify "isl_union_map_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_get_dim_id" #.(swig-lispify "isl_union_map_get_dim_id" 'function)) :pointer
  (umap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_union_map_from_basic_map" #.(swig-lispify "isl_union_map_from_basic_map" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_union_map_from_map" #.(swig-lispify "isl_union_map_from_map" 'function)) :pointer
  (map :pointer))

(cffi:defcfun ("isl_union_map_empty_ctx" #.(swig-lispify "isl_union_map_empty_ctx" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_map_empty_space" #.(swig-lispify "isl_union_map_empty_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_map_empty" #.(swig-lispify "isl_union_map_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_map_copy" #.(swig-lispify "isl_union_map_copy" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_free" #.(swig-lispify "isl_union_map_free" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_get_ctx" #.(swig-lispify "isl_union_map_get_ctx" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_get_space" #.(swig-lispify "isl_union_map_get_space" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_reset_user" #.(swig-lispify "isl_union_map_reset_user" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_find_dim_by_name" #.(swig-lispify "isl_union_map_find_dim_by_name" 'function)) :int
  (umap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_union_map_universe" #.(swig-lispify "isl_union_map_universe" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_params" #.(swig-lispify "isl_union_map_params" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain" #.(swig-lispify "isl_union_map_domain" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range" #.(swig-lispify "isl_union_map_range" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_map" #.(swig-lispify "isl_union_map_domain_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_map_union_pw_multi_aff" #.(swig-lispify "isl_union_map_domain_map_union_pw_multi_aff" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_map" #.(swig-lispify "isl_union_map_range_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_wrapped_domain_map" #.(swig-lispify "isl_union_set_wrapped_domain_map" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_domain" #.(swig-lispify "isl_union_map_from_domain" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_from_range" #.(swig-lispify "isl_union_map_from_range" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_affine_hull" #.(swig-lispify "isl_union_map_affine_hull" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_polyhedral_hull" #.(swig-lispify "isl_union_map_polyhedral_hull" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_remove_redundancies" #.(swig-lispify "isl_union_map_remove_redundancies" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_simple_hull" #.(swig-lispify "isl_union_map_simple_hull" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_coalesce" #.(swig-lispify "isl_union_map_coalesce" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_compute_divs" #.(swig-lispify "isl_union_map_compute_divs" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_lexmin" #.(swig-lispify "isl_union_map_lexmin" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_lexmax" #.(swig-lispify "isl_union_map_lexmax" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_add_map" #.(swig-lispify "isl_union_map_add_map" 'function)) :pointer
  (umap :pointer)
  (map :pointer))

(cffi:defcfun ("isl_union_map_union" #.(swig-lispify "isl_union_map_union" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_subtract" #.(swig-lispify "isl_union_map_subtract" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_intersect" #.(swig-lispify "isl_union_map_intersect" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_intersect_params" #.(swig-lispify "isl_union_map_intersect_params" 'function)) :pointer
  (umap :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_map_product" #.(swig-lispify "isl_union_map_product" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_domain_product" #.(swig-lispify "isl_union_map_domain_product" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_flat_domain_product" #.(swig-lispify "isl_union_map_flat_domain_product" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_range_product" #.(swig-lispify "isl_union_map_range_product" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_flat_range_product" #.(swig-lispify "isl_union_map_flat_range_product" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_domain_factor_domain" #.(swig-lispify "isl_union_map_domain_factor_domain" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_domain_factor_range" #.(swig-lispify "isl_union_map_domain_factor_range" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_factor_domain" #.(swig-lispify "isl_union_map_range_factor_domain" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_factor_range" #.(swig-lispify "isl_union_map_range_factor_range" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_factor_domain" #.(swig-lispify "isl_union_map_factor_domain" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_factor_range" #.(swig-lispify "isl_union_map_factor_range" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_gist" #.(swig-lispify "isl_union_map_gist" 'function)) :pointer
  (umap :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_map_gist_params" #.(swig-lispify "isl_union_map_gist_params" 'function)) :pointer
  (umap :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_map_gist_domain" #.(swig-lispify "isl_union_map_gist_domain" 'function)) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_gist_range" #.(swig-lispify "isl_union_map_gist_range" 'function)) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_domain" #.(swig-lispify "isl_union_map_intersect_domain" 'function)) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_range" #.(swig-lispify "isl_union_map_intersect_range" 'function)) :pointer
  (umap :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_map_intersect_domain_factor_range" #.(swig-lispify "isl_union_map_intersect_domain_factor_range" 'function)) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_intersect_range_factor_domain" #.(swig-lispify "isl_union_map_intersect_range_factor_domain" 'function)) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_intersect_range_factor_range" #.(swig-lispify "isl_union_map_intersect_range_factor_range" 'function)) :pointer
  (umap :pointer)
  (factor :pointer))

(cffi:defcfun ("isl_union_map_subtract_domain" #.(swig-lispify "isl_union_map_subtract_domain" 'function)) :pointer
  (umap :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_union_map_subtract_range" #.(swig-lispify "isl_union_map_subtract_range" 'function)) :pointer
  (umap :pointer)
  (dom :pointer))

(cffi:defcfun ("isl_union_map_apply_domain" #.(swig-lispify "isl_union_map_apply_domain" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_apply_range" #.(swig-lispify "isl_union_map_apply_range" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_multi_aff" #.(swig-lispify "isl_union_map_preimage_domain_multi_aff" 'function)) :pointer
  (umap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_multi_aff" #.(swig-lispify "isl_union_map_preimage_range_multi_aff" 'function)) :pointer
  (umap :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_pw_multi_aff" #.(swig-lispify "isl_union_map_preimage_domain_pw_multi_aff" 'function)) :pointer
  (umap :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_pw_multi_aff" #.(swig-lispify "isl_union_map_preimage_range_pw_multi_aff" 'function)) :pointer
  (umap :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_multi_pw_aff" #.(swig-lispify "isl_union_map_preimage_domain_multi_pw_aff" 'function)) :pointer
  (umap :pointer)
  (mpa :pointer))

(cffi:defcfun ("isl_union_map_preimage_domain_union_pw_multi_aff" #.(swig-lispify "isl_union_map_preimage_domain_union_pw_multi_aff" 'function)) :pointer
  (umap :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_map_preimage_range_union_pw_multi_aff" #.(swig-lispify "isl_union_map_preimage_range_union_pw_multi_aff" 'function)) :pointer
  (umap :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_map_reverse" #.(swig-lispify "isl_union_map_reverse" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_reverse" #.(swig-lispify "isl_union_map_range_reverse" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_from_domain_and_range" #.(swig-lispify "isl_union_map_from_domain_and_range" 'function)) :pointer
  (domain :pointer)
  (range :pointer))

(cffi:defcfun ("isl_union_map_detect_equalities" #.(swig-lispify "isl_union_map_detect_equalities" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_deltas" #.(swig-lispify "isl_union_map_deltas" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_deltas_map" #.(swig-lispify "isl_union_map_deltas_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_identity" #.(swig-lispify "isl_union_set_identity" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_project_out" #.(swig-lispify "isl_union_map_project_out" 'function)) :pointer
  (umap :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_project_out_all_params" #.(swig-lispify "isl_union_map_project_out_all_params" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_remove_divs" #.(swig-lispify "isl_union_map_remove_divs" 'function)) :pointer
  (bmap :pointer))

(cffi:defcfun ("isl_union_map_bind_range" #.(swig-lispify "isl_union_map_bind_range" 'function)) :pointer
  (umap :pointer)
  (tuple :pointer))

(cffi:defcfun ("isl_union_map_plain_is_empty" #.(swig-lispify "isl_union_map_plain_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_empty" #.(swig-lispify "isl_union_map_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_single_valued" #.(swig-lispify "isl_union_map_is_single_valued" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_plain_is_injective" #.(swig-lispify "isl_union_map_plain_is_injective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_injective" #.(swig-lispify "isl_union_map_is_injective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_bijective" #.(swig-lispify "isl_union_map_is_bijective" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_identity" #.(swig-lispify "isl_union_map_is_identity" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_is_subset" #.(swig-lispify "isl_union_map_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_equal" #.(swig-lispify "isl_union_map_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_disjoint" #.(swig-lispify "isl_union_map_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_is_strict_subset" #.(swig-lispify "isl_union_map_is_strict_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_get_hash" #.(swig-lispify "isl_union_map_get_hash" 'function)) :unsigned-int
  (umap :pointer))

(cffi:defcfun ("isl_union_map_n_map" #.(swig-lispify "isl_union_map_n_map" 'function)) :int
  (umap :pointer))

(cffi:defcfun ("isl_union_map_foreach_map" #.(swig-lispify "isl_union_map_foreach_map" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (umap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_get_map_list" #.(swig-lispify "isl_union_map_get_map_list" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_every_map" #.(swig-lispify "isl_union_map_every_map" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_remove_map_if" #.(swig-lispify "isl_union_map_remove_map_if" 'function)) :pointer
  (umap :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_contains" #.(swig-lispify "isl_union_map_contains" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_map_extract_map" #.(swig-lispify "isl_union_map_extract_map" 'function)) :pointer
  (umap :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_union_map_isa_map" #.(swig-lispify "isl_union_map_isa_map" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (umap :pointer))

(cffi:defcfun ("isl_map_from_union_map" #.(swig-lispify "isl_map_from_union_map" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_sample" #.(swig-lispify "isl_union_map_sample" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_fixed_power_val" #.(swig-lispify "isl_union_map_fixed_power_val" 'function)) :pointer
  (umap :pointer)
  (exp :pointer))

(cffi:defcfun ("isl_union_map_power" #.(swig-lispify "isl_union_map_power" 'function)) :pointer
  (umap :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_union_map_transitive_closure" #.(swig-lispify "isl_union_map_transitive_closure" 'function)) :pointer
  (umap :pointer)
  (exact :pointer))

(cffi:defcfun ("isl_union_map_lex_lt_union_map" #.(swig-lispify "isl_union_map_lex_lt_union_map" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_le_union_map" #.(swig-lispify "isl_union_map_lex_le_union_map" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_gt_union_map" #.(swig-lispify "isl_union_map_lex_gt_union_map" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_lex_ge_union_map" #.(swig-lispify "isl_union_map_lex_ge_union_map" 'function)) :pointer
  (umap1 :pointer)
  (umap2 :pointer))

(cffi:defcfun ("isl_union_map_eq_at_multi_union_pw_aff" #.(swig-lispify "isl_union_map_eq_at_multi_union_pw_aff" 'function)) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_lex_lt_at_multi_union_pw_aff" #.(swig-lispify "isl_union_map_lex_lt_at_multi_union_pw_aff" 'function)) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_lex_gt_at_multi_union_pw_aff" #.(swig-lispify "isl_union_map_lex_gt_at_multi_union_pw_aff" 'function)) :pointer
  (umap :pointer)
  (mupa :pointer))

(cffi:defcfun ("isl_union_map_read_from_file" #.(swig-lispify "isl_union_map_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_union_map_read_from_str" #.(swig-lispify "isl_union_map_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_map_to_str" #.(swig-lispify "isl_union_map_to_str" 'function)) :string
  (umap :pointer))

(cffi:defcfun ("isl_printer_print_union_map" #.(swig-lispify "isl_printer_print_union_map" 'function)) :pointer
  (p :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_union_map_dump" #.(swig-lispify "isl_union_map_dump" 'function)) :void
  (umap :pointer))

(cffi:defcfun ("isl_union_map_wrap" #.(swig-lispify "isl_union_map_wrap" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_set_unwrap" #.(swig-lispify "isl_union_set_unwrap" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_map_zip" #.(swig-lispify "isl_union_map_zip" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_curry" #.(swig-lispify "isl_union_map_curry" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_range_curry" #.(swig-lispify "isl_union_map_range_curry" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_uncurry" #.(swig-lispify "isl_union_map_uncurry" 'function)) :pointer
  (umap :pointer))

(cffi:defcfun ("isl_union_map_align_params" #.(swig-lispify "isl_union_map_align_params" 'function)) :pointer
  (umap :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_set_align_params" #.(swig-lispify "isl_union_set_align_params" 'function)) :pointer
  (uset :pointer)
  (model :pointer))

(cffi:defcfun ("isl_union_map_list_get_ctx" #.(swig-lispify "isl_union_map_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_from_union_map" #.(swig-lispify "isl_union_map_list_from_union_map" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_alloc" #.(swig-lispify "isl_union_map_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_map_list_copy" #.(swig-lispify "isl_union_map_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_free" #.(swig-lispify "isl_union_map_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_add" #.(swig-lispify "isl_union_map_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_insert" #.(swig-lispify "isl_union_map_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_drop" #.(swig-lispify "isl_union_map_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_map_list_clear" #.(swig-lispify "isl_union_map_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_swap" #.(swig-lispify "isl_union_map_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_map_list_reverse" #.(swig-lispify "isl_union_map_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_concat" #.(swig-lispify "isl_union_map_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_map_list_size" #.(swig-lispify "isl_union_map_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_n_union_map" #.(swig-lispify "isl_union_map_list_n_union_map" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_get_at" #.(swig-lispify "isl_union_map_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_map_list_get_union_map" #.(swig-lispify "isl_union_map_list_get_union_map" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_map_list_set_union_map" #.(swig-lispify "isl_union_map_list_set_union_map" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_map_list_foreach" #.(swig-lispify "isl_union_map_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_map" #.(swig-lispify "isl_union_map_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_sort" #.(swig-lispify "isl_union_map_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_map_list_foreach_scc" #.(swig-lispify "isl_union_map_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_map_list_to_str" #.(swig-lispify "isl_union_map_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_map_list" #.(swig-lispify "isl_printer_print_union_map_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_map_list_dump" #.(swig-lispify "isl_union_map_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_union_set_dim" #.(swig-lispify "isl_union_set_dim" 'function)) :int
  (uset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_union_set_from_basic_set" #.(swig-lispify "isl_union_set_from_basic_set" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_from_set" #.(swig-lispify "isl_union_set_from_set" 'function)) :pointer
  (set :pointer))

(cffi:defcfun ("isl_union_set_empty_ctx" #.(swig-lispify "isl_union_set_empty_ctx" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_union_set_empty_space" #.(swig-lispify "isl_union_set_empty_space" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_set_empty" #.(swig-lispify "isl_union_set_empty" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_union_set_copy" #.(swig-lispify "isl_union_set_copy" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_free" #.(swig-lispify "isl_union_set_free" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_ctx" #.(swig-lispify "isl_union_set_get_ctx" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_space" #.(swig-lispify "isl_union_set_get_space" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_reset_user" #.(swig-lispify "isl_union_set_reset_user" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_universe" #.(swig-lispify "isl_union_set_universe" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_params" #.(swig-lispify "isl_union_set_params" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_detect_equalities" #.(swig-lispify "isl_union_set_detect_equalities" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_affine_hull" #.(swig-lispify "isl_union_set_affine_hull" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_polyhedral_hull" #.(swig-lispify "isl_union_set_polyhedral_hull" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_remove_redundancies" #.(swig-lispify "isl_union_set_remove_redundancies" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_simple_hull" #.(swig-lispify "isl_union_set_simple_hull" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_coalesce" #.(swig-lispify "isl_union_set_coalesce" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_compute_divs" #.(swig-lispify "isl_union_set_compute_divs" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lexmin" #.(swig-lispify "isl_union_set_lexmin" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lexmax" #.(swig-lispify "isl_union_set_lexmax" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_add_set" #.(swig-lispify "isl_union_set_add_set" 'function)) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_union" #.(swig-lispify "isl_union_set_union" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_subtract" #.(swig-lispify "isl_union_set_subtract" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_intersect" #.(swig-lispify "isl_union_set_intersect" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_intersect_params" #.(swig-lispify "isl_union_set_intersect_params" 'function)) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_product" #.(swig-lispify "isl_union_set_product" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_gist" #.(swig-lispify "isl_union_set_gist" 'function)) :pointer
  (uset :pointer)
  (context :pointer))

(cffi:defcfun ("isl_union_set_gist_params" #.(swig-lispify "isl_union_set_gist_params" 'function)) :pointer
  (uset :pointer)
  (set :pointer))

(cffi:defcfun ("isl_union_set_apply" #.(swig-lispify "isl_union_set_apply" 'function)) :pointer
  (uset :pointer)
  (umap :pointer))

(cffi:defcfun ("isl_union_set_preimage_multi_aff" #.(swig-lispify "isl_union_set_preimage_multi_aff" 'function)) :pointer
  (uset :pointer)
  (ma :pointer))

(cffi:defcfun ("isl_union_set_preimage_pw_multi_aff" #.(swig-lispify "isl_union_set_preimage_pw_multi_aff" 'function)) :pointer
  (uset :pointer)
  (pma :pointer))

(cffi:defcfun ("isl_union_set_preimage_union_pw_multi_aff" #.(swig-lispify "isl_union_set_preimage_union_pw_multi_aff" 'function)) :pointer
  (uset :pointer)
  (upma :pointer))

(cffi:defcfun ("isl_union_set_project_out" #.(swig-lispify "isl_union_set_project_out" 'function)) :pointer
  (uset :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_set_project_out_all_params" #.(swig-lispify "isl_union_set_project_out_all_params" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_remove_divs" #.(swig-lispify "isl_union_set_remove_divs" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_is_params" #.(swig-lispify "isl_union_set_is_params" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset :pointer))

(cffi:defcfun ("isl_union_set_is_empty" #.(swig-lispify "isl_union_set_is_empty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset :pointer))

(cffi:defcfun ("isl_union_set_is_subset" #.(swig-lispify "isl_union_set_is_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_equal" #.(swig-lispify "isl_union_set_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_disjoint" #.(swig-lispify "isl_union_set_is_disjoint" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_is_strict_subset" #.(swig-lispify "isl_union_set_is_strict_subset" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_get_hash" #.(swig-lispify "isl_union_set_get_hash" 'function)) :unsigned-int
  (uset :pointer))

(cffi:defcfun ("isl_union_set_n_set" #.(swig-lispify "isl_union_set_n_set" 'function)) :int
  (uset :pointer))

(cffi:defcfun ("isl_union_set_foreach_set" #.(swig-lispify "isl_union_set_foreach_set" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (uset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_every_set" #.(swig-lispify "isl_union_set_every_set" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset :pointer)
  (test :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_get_basic_set_list" #.(swig-lispify "isl_union_set_get_basic_set_list" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_get_set_list" #.(swig-lispify "isl_union_set_get_set_list" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_contains" #.(swig-lispify "isl_union_set_contains" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset :pointer)
  (space :pointer))

(cffi:defcfun ("isl_union_set_extract_set" #.(swig-lispify "isl_union_set_extract_set" 'function)) :pointer
  (uset :pointer)
  (dim :pointer))

(cffi:defcfun ("isl_union_set_isa_set" #.(swig-lispify "isl_union_set_isa_set" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (uset :pointer))

(cffi:defcfun ("isl_set_from_union_set" #.(swig-lispify "isl_set_from_union_set" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_foreach_point" #.(swig-lispify "isl_union_set_foreach_point" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (uset :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_sample" #.(swig-lispify "isl_union_set_sample" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_sample_point" #.(swig-lispify "isl_union_set_sample_point" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_from_point" #.(swig-lispify "isl_union_set_from_point" 'function)) :pointer
  (pnt :pointer))

(cffi:defcfun ("isl_union_set_lift" #.(swig-lispify "isl_union_set_lift" 'function)) :pointer
  (uset :pointer))

(cffi:defcfun ("isl_union_set_lex_lt_union_set" #.(swig-lispify "isl_union_set_lex_lt_union_set" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_le_union_set" #.(swig-lispify "isl_union_set_lex_le_union_set" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_gt_union_set" #.(swig-lispify "isl_union_set_lex_gt_union_set" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_lex_ge_union_set" #.(swig-lispify "isl_union_set_lex_ge_union_set" 'function)) :pointer
  (uset1 :pointer)
  (uset2 :pointer))

(cffi:defcfun ("isl_union_set_coefficients" #.(swig-lispify "isl_union_set_coefficients" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_solutions" #.(swig-lispify "isl_union_set_solutions" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_union_set_read_from_file" #.(swig-lispify "isl_union_set_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_union_set_read_from_str" #.(swig-lispify "isl_union_set_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_union_set_to_str" #.(swig-lispify "isl_union_set_to_str" 'function)) :string
  (uset :pointer))

(cffi:defcfun ("isl_printer_print_union_set" #.(swig-lispify "isl_printer_print_union_set" 'function)) :pointer
  (p :pointer)
  (uset :pointer))

(cffi:defcfun ("isl_union_set_dump" #.(swig-lispify "isl_union_set_dump" 'function)) :void
  (uset :pointer))

(cffi:defcfun ("isl_union_set_list_get_ctx" #.(swig-lispify "isl_union_set_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_from_union_set" #.(swig-lispify "isl_union_set_list_from_union_set" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_alloc" #.(swig-lispify "isl_union_set_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_union_set_list_copy" #.(swig-lispify "isl_union_set_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_free" #.(swig-lispify "isl_union_set_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_add" #.(swig-lispify "isl_union_set_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_insert" #.(swig-lispify "isl_union_set_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_drop" #.(swig-lispify "isl_union_set_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_union_set_list_clear" #.(swig-lispify "isl_union_set_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_swap" #.(swig-lispify "isl_union_set_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_union_set_list_reverse" #.(swig-lispify "isl_union_set_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_concat" #.(swig-lispify "isl_union_set_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_union_set_list_size" #.(swig-lispify "isl_union_set_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_n_union_set" #.(swig-lispify "isl_union_set_list_n_union_set" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_get_at" #.(swig-lispify "isl_union_set_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_set_list_get_union_set" #.(swig-lispify "isl_union_set_list_get_union_set" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_union_set_list_set_union_set" #.(swig-lispify "isl_union_set_list_set_union_set" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_union_set_list_foreach" #.(swig-lispify "isl_union_set_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_map" #.(swig-lispify "isl_union_set_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_sort" #.(swig-lispify "isl_union_set_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_union_set_list_foreach_scc" #.(swig-lispify "isl_union_set_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_union_set_list_to_str" #.(swig-lispify "isl_union_set_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_union_set_list" #.(swig-lispify "isl_printer_print_union_set_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_dump" #.(swig-lispify "isl_union_set_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_union_set_list_union" #.(swig-lispify "isl_union_set_list_union" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_int_from_gmp" #.(swig-lispify "isl_val_int_from_gmp" 'function)) :pointer
  (ctx :pointer)
  (z :pointer))

(cffi:defcfun ("isl_val_from_gmp" #.(swig-lispify "isl_val_from_gmp" 'function)) :pointer
  (ctx :pointer)
  (n :pointer)
  (d :pointer))

(cffi:defcfun ("isl_val_get_num_gmp" #.(swig-lispify "isl_val_get_num_gmp" 'function)) :int
  (v :pointer)
  (z :pointer))

(cffi:defcfun ("isl_val_get_den_gmp" #.(swig-lispify "isl_val_get_den_gmp" 'function)) :int
  (v :pointer)
  (z :pointer))

(cffi:defcfun ("isl_multi_val_get_ctx" #.(swig-lispify "isl_multi_val_get_ctx" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_space" #.(swig-lispify "isl_multi_val_get_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_domain_space" #.(swig-lispify "isl_multi_val_get_domain_space" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_from_val_list" #.(swig-lispify "isl_multi_val_from_val_list" 'function)) :pointer
  (space :pointer)
  (list :pointer))

(cffi:defcfun ("isl_multi_val_copy" #.(swig-lispify "isl_multi_val_copy" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_free" #.(swig-lispify "isl_multi_val_free" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_plain_is_equal" #.(swig-lispify "isl_multi_val_plain_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_reset_user" #.(swig-lispify "isl_multi_val_reset_user" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_size" #.(swig-lispify "isl_multi_val_size" 'function)) :int
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_get_at" #.(swig-lispify "isl_multi_val_get_at" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_val_get_val" #.(swig-lispify "isl_multi_val_get_val" 'function)) :pointer
  (multi :pointer)
  (pos :int))

(cffi:defcfun ("isl_multi_val_set_at" #.(swig-lispify "isl_multi_val_set_at" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_val_set_val" #.(swig-lispify "isl_multi_val_set_val" 'function)) :pointer
  (multi :pointer)
  (pos :int)
  (el :pointer))

(cffi:defcfun ("isl_multi_val_range_splice" #.(swig-lispify "isl_multi_val_range_splice" 'function)) :pointer
  (multi1 :pointer)
  (pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_flatten_range" #.(swig-lispify "isl_multi_val_flatten_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_flat_range_product" #.(swig-lispify "isl_multi_val_flat_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_range_product" #.(swig-lispify "isl_multi_val_range_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_factor_range" #.(swig-lispify "isl_multi_val_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_is_wrapping" #.(swig-lispify "isl_multi_val_range_is_wrapping" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_factor_domain" #.(swig-lispify "isl_multi_val_range_factor_domain" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_range_factor_range" #.(swig-lispify "isl_multi_val_range_factor_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_align_params" #.(swig-lispify "isl_multi_val_align_params" 'function)) :pointer
  (multi :pointer)
  (model :pointer))

(cffi:defcfun ("isl_multi_val_from_range" #.(swig-lispify "isl_multi_val_from_range" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_scale_val" #.(swig-lispify "isl_multi_val_scale_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_scale_down_val" #.(swig-lispify "isl_multi_val_scale_down_val" 'function)) :pointer
  (multi :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_scale_multi_val" #.(swig-lispify "isl_multi_val_scale_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_scale_down_multi_val" #.(swig-lispify "isl_multi_val_scale_down_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_mod_multi_val" #.(swig-lispify "isl_multi_val_mod_multi_val" 'function)) :pointer
  (multi :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_add" #.(swig-lispify "isl_multi_val_add" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_sub" #.(swig-lispify "isl_multi_val_sub" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_neg" #.(swig-lispify "isl_multi_val_neg" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_zero" #.(swig-lispify "isl_multi_val_zero" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("isl_multi_val_involves_nan" #.(swig-lispify "isl_multi_val_involves_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_dim" #.(swig-lispify "isl_multi_val_dim" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_val_drop_dims" #.(swig-lispify "isl_multi_val_drop_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_involves_dims" #.(swig-lispify "isl_multi_val_involves_dims" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_insert_dims" #.(swig-lispify "isl_multi_val_insert_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_add_dims" #.(swig-lispify "isl_multi_val_add_dims" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (n :unsigned-int))

(cffi:defcfun ("isl_multi_val_project_domain_on_params" #.(swig-lispify "isl_multi_val_project_domain_on_params" 'function)) :pointer
  (multi :pointer))

(cffi:defcfun ("isl_multi_val_find_dim_by_name" #.(swig-lispify "isl_multi_val_find_dim_by_name" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (name :string))

(cffi:defcfun ("isl_multi_val_find_dim_by_id" #.(swig-lispify "isl_multi_val_find_dim_by_id" 'function)) :int
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_val_get_dim_id" #.(swig-lispify "isl_multi_val_get_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int))

(cffi:defcfun ("isl_multi_val_set_dim_name" #.(swig-lispify "isl_multi_val_set_dim_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (s :string))

(cffi:defcfun ("isl_multi_val_set_dim_id" #.(swig-lispify "isl_multi_val_set_dim_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (pos :unsigned-int)
  (id :pointer))

(cffi:defcfun ("isl_multi_val_get_tuple_name" #.(swig-lispify "isl_multi_val_get_tuple_name" 'function)) :string
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_val_has_tuple_id" #.(swig-lispify "isl_multi_val_has_tuple_id" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_val_get_tuple_id" #.(swig-lispify "isl_multi_val_get_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_val_set_tuple_name" #.(swig-lispify "isl_multi_val_set_tuple_name" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (s :string))

(cffi:defcfun ("isl_multi_val_set_tuple_id" #.(swig-lispify "isl_multi_val_set_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname))
  (id :pointer))

(cffi:defcfun ("isl_multi_val_reset_tuple_id" #.(swig-lispify "isl_multi_val_reset_tuple_id" 'function)) :pointer
  (multi :pointer)
  (type #.(swig-lispify "isl_dim_type" 'enumname)))

(cffi:defcfun ("isl_multi_val_product" #.(swig-lispify "isl_multi_val_product" 'function)) :pointer
  (multi1 :pointer)
  (multi2 :pointer))

(cffi:defcfun ("isl_multi_val_splice" #.(swig-lispify "isl_multi_val_splice" 'function)) :pointer
  (multi1 :pointer)
  (in_pos :unsigned-int)
  (out_pos :unsigned-int)
  (multi2 :pointer))

(cffi:defcfun ("isl_val_zero" #.(swig-lispify "isl_val_zero" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_one" #.(swig-lispify "isl_val_one" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_negone" #.(swig-lispify "isl_val_negone" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_nan" #.(swig-lispify "isl_val_nan" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_infty" #.(swig-lispify "isl_val_infty" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_neginfty" #.(swig-lispify "isl_val_neginfty" 'function)) :pointer
  (ctx :pointer))

(cffi:defcfun ("isl_val_int_from_si" #.(swig-lispify "isl_val_int_from_si" 'function)) :pointer
  (ctx :pointer)
  (i :long))

(cffi:defcfun ("isl_val_int_from_ui" #.(swig-lispify "isl_val_int_from_ui" 'function)) :pointer
  (ctx :pointer)
  (u :unsigned-long))

(cffi:defcfun ("isl_val_int_from_chunks" #.(swig-lispify "isl_val_int_from_chunks" 'function)) :pointer
  (ctx :pointer)
  (n :unsigned-long)
  (size :unsigned-long)
  (chunks :pointer))

(cffi:defcfun ("isl_val_copy" #.(swig-lispify "isl_val_copy" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_free" #.(swig-lispify "isl_val_free" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_get_ctx" #.(swig-lispify "isl_val_get_ctx" 'function)) :pointer
  (val :pointer))

(cffi:defcfun ("isl_val_get_hash" #.(swig-lispify "isl_val_get_hash" 'function)) :unsigned-int
  (val :pointer))

(cffi:defcfun ("isl_val_get_num_si" #.(swig-lispify "isl_val_get_num_si" 'function)) :long
  (v :pointer))

(cffi:defcfun ("isl_val_get_den_si" #.(swig-lispify "isl_val_get_den_si" 'function)) :long
  (v :pointer))

(cffi:defcfun ("isl_val_get_den_val" #.(swig-lispify "isl_val_get_den_val" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_get_d" #.(swig-lispify "isl_val_get_d" 'function)) :double
  (v :pointer))

(cffi:defcfun ("isl_val_n_abs_num_chunks" #.(swig-lispify "isl_val_n_abs_num_chunks" 'function)) :int
  (v :pointer)
  (size :unsigned-long))

(cffi:defcfun ("isl_val_get_abs_num_chunks" #.(swig-lispify "isl_val_get_abs_num_chunks" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (v :pointer)
  (size :unsigned-long)
  (chunks :pointer))

(cffi:defcfun ("isl_val_set_si" #.(swig-lispify "isl_val_set_si" 'function)) :pointer
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_abs" #.(swig-lispify "isl_val_abs" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_neg" #.(swig-lispify "isl_val_neg" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_inv" #.(swig-lispify "isl_val_inv" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_floor" #.(swig-lispify "isl_val_floor" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_ceil" #.(swig-lispify "isl_val_ceil" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_trunc" #.(swig-lispify "isl_val_trunc" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_2exp" #.(swig-lispify "isl_val_2exp" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_pow2" #.(swig-lispify "isl_val_pow2" 'function)) :pointer
  (v :pointer))

(cffi:defcfun ("isl_val_min" #.(swig-lispify "isl_val_min" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_max" #.(swig-lispify "isl_val_max" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_add" #.(swig-lispify "isl_val_add" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_add_ui" #.(swig-lispify "isl_val_add_ui" 'function)) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_sub" #.(swig-lispify "isl_val_sub" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_sub_ui" #.(swig-lispify "isl_val_sub_ui" 'function)) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_mul" #.(swig-lispify "isl_val_mul" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_mul_ui" #.(swig-lispify "isl_val_mul_ui" 'function)) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_div" #.(swig-lispify "isl_val_div" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_div_ui" #.(swig-lispify "isl_val_div_ui" 'function)) :pointer
  (v1 :pointer)
  (v2 :unsigned-long))

(cffi:defcfun ("isl_val_mod" #.(swig-lispify "isl_val_mod" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gcd" #.(swig-lispify "isl_val_gcd" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gcdext" #.(swig-lispify "isl_val_gcdext" 'function)) :pointer
  (v1 :pointer)
  (v2 :pointer)
  (x :pointer)
  (y :pointer))

(cffi:defcfun ("isl_val_sgn" #.(swig-lispify "isl_val_sgn" 'function)) :int
  (v :pointer))

(cffi:defcfun ("isl_val_is_zero" #.(swig-lispify "isl_val_is_zero" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_one" #.(swig-lispify "isl_val_is_one" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_negone" #.(swig-lispify "isl_val_is_negone" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_nonneg" #.(swig-lispify "isl_val_is_nonneg" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_nonpos" #.(swig-lispify "isl_val_is_nonpos" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_pos" #.(swig-lispify "isl_val_is_pos" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_neg" #.(swig-lispify "isl_val_is_neg" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_int" #.(swig-lispify "isl_val_is_int" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_rat" #.(swig-lispify "isl_val_is_rat" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_nan" #.(swig-lispify "isl_val_is_nan" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_infty" #.(swig-lispify "isl_val_is_infty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_is_neginfty" #.(swig-lispify "isl_val_is_neginfty" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer))

(cffi:defcfun ("isl_val_cmp_si" #.(swig-lispify "isl_val_cmp_si" 'function)) :int
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_lt" #.(swig-lispify "isl_val_lt" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_le" #.(swig-lispify "isl_val_le" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gt" #.(swig-lispify "isl_val_gt" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_gt_si" #.(swig-lispify "isl_val_gt_si" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v :pointer)
  (i :long))

(cffi:defcfun ("isl_val_ge" #.(swig-lispify "isl_val_ge" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_eq" #.(swig-lispify "isl_val_eq" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_ne" #.(swig-lispify "isl_val_ne" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_abs_eq" #.(swig-lispify "isl_val_abs_eq" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_is_divisible_by" #.(swig-lispify "isl_val_is_divisible_by" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (v1 :pointer)
  (v2 :pointer))

(cffi:defcfun ("isl_val_read_from_str" #.(swig-lispify "isl_val_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_val" #.(swig-lispify "isl_printer_print_val" 'function)) :pointer
  (p :pointer)
  (v :pointer))

(cffi:defcfun ("isl_val_dump" #.(swig-lispify "isl_val_dump" 'function)) :void
  (v :pointer))

(cffi:defcfun ("isl_val_to_str" #.(swig-lispify "isl_val_to_str" 'function)) :string
  (v :pointer))

(cffi:defcfun ("isl_multi_val_add_val" #.(swig-lispify "isl_multi_val_add_val" 'function)) :pointer
  (mv :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_mod_val" #.(swig-lispify "isl_multi_val_mod_val" 'function)) :pointer
  (mv :pointer)
  (v :pointer))

(cffi:defcfun ("isl_multi_val_read_from_str" #.(swig-lispify "isl_multi_val_read_from_str" 'function)) :pointer
  (ctx :pointer)
  (str :string))

(cffi:defcfun ("isl_printer_print_multi_val" #.(swig-lispify "isl_printer_print_multi_val" 'function)) :pointer
  (p :pointer)
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_dump" #.(swig-lispify "isl_multi_val_dump" 'function)) :void
  (mv :pointer))

(cffi:defcfun ("isl_multi_val_to_str" #.(swig-lispify "isl_multi_val_to_str" 'function)) :string
  (mv :pointer))

(cffi:defcfun ("isl_val_list_get_ctx" #.(swig-lispify "isl_val_list_get_ctx" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_from_val" #.(swig-lispify "isl_val_list_from_val" 'function)) :pointer
  (el :pointer))

(cffi:defcfun ("isl_val_list_alloc" #.(swig-lispify "isl_val_list_alloc" 'function)) :pointer
  (ctx :pointer)
  (n :int))

(cffi:defcfun ("isl_val_list_copy" #.(swig-lispify "isl_val_list_copy" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_free" #.(swig-lispify "isl_val_list_free" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_add" #.(swig-lispify "isl_val_list_add" 'function)) :pointer
  (list :pointer)
  (el :pointer))

(cffi:defcfun ("isl_val_list_insert" #.(swig-lispify "isl_val_list_insert" 'function)) :pointer
  (list :pointer)
  (pos :unsigned-int)
  (el :pointer))

(cffi:defcfun ("isl_val_list_drop" #.(swig-lispify "isl_val_list_drop" 'function)) :pointer
  (list :pointer)
  (first :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_val_list_clear" #.(swig-lispify "isl_val_list_clear" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_swap" #.(swig-lispify "isl_val_list_swap" 'function)) :pointer
  (list :pointer)
  (pos1 :unsigned-int)
  (pos2 :unsigned-int))

(cffi:defcfun ("isl_val_list_reverse" #.(swig-lispify "isl_val_list_reverse" 'function)) :pointer
  (list :pointer))

(cffi:defcfun ("isl_val_list_concat" #.(swig-lispify "isl_val_list_concat" 'function)) :pointer
  (list1 :pointer)
  (list2 :pointer))

(cffi:defcfun ("isl_val_list_size" #.(swig-lispify "isl_val_list_size" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_val_list_n_val" #.(swig-lispify "isl_val_list_n_val" 'function)) :int
  (list :pointer))

(cffi:defcfun ("isl_val_list_get_at" #.(swig-lispify "isl_val_list_get_at" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_val_list_get_val" #.(swig-lispify "isl_val_list_get_val" 'function)) :pointer
  (list :pointer)
  (index :int))

(cffi:defcfun ("isl_val_list_set_val" #.(swig-lispify "isl_val_list_set_val" 'function)) :pointer
  (list :pointer)
  (index :int)
  (el :pointer))

(cffi:defcfun ("isl_val_list_foreach" #.(swig-lispify "isl_val_list_foreach" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_map" #.(swig-lispify "isl_val_list_map" 'function)) :pointer
  (list :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_sort" #.(swig-lispify "isl_val_list_sort" 'function)) :pointer
  (list :pointer)
  (cmp :pointer)
  (user :pointer))

(cffi:defcfun ("isl_val_list_foreach_scc" #.(swig-lispify "isl_val_list_foreach_scc" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (list :pointer)
  (follows :pointer)
  (follows_user :pointer)
  (fn :pointer)
  (fn_user :pointer))

(cffi:defcfun ("isl_val_list_to_str" #.(swig-lispify "isl_val_list_to_str" 'function)) :string
  (list :pointer))

(cffi:defcfun ("isl_printer_print_val_list" #.(swig-lispify "isl_printer_print_val_list" 'function)) :pointer
  (p :pointer)
  (list :pointer))

(cffi:defcfun ("isl_val_list_dump" #.(swig-lispify "isl_val_list_dump" 'function)) :void
  (list :pointer))

(cffi:defcfun ("isl_vec_alloc" #.(swig-lispify "isl_vec_alloc" 'function)) :pointer
  (ctx :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_zero" #.(swig-lispify "isl_vec_zero" 'function)) :pointer
  (ctx :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_copy" #.(swig-lispify "isl_vec_copy" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_free" #.(swig-lispify "isl_vec_free" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_get_ctx" #.(swig-lispify "isl_vec_get_ctx" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_size" #.(swig-lispify "isl_vec_size" 'function)) :int
  (vec :pointer))

(cffi:defcfun ("isl_vec_get_element_val" #.(swig-lispify "isl_vec_get_element_val" 'function)) :pointer
  (vec :pointer)
  (pos :int))

(cffi:defcfun ("isl_vec_set_element_si" #.(swig-lispify "isl_vec_set_element_si" 'function)) :pointer
  (vec :pointer)
  (pos :int)
  (v :int))

(cffi:defcfun ("isl_vec_set_element_val" #.(swig-lispify "isl_vec_set_element_val" 'function)) :pointer
  (vec :pointer)
  (pos :int)
  (v :pointer))

(cffi:defcfun ("isl_vec_is_equal" #.(swig-lispify "isl_vec_is_equal" 'function)) #.(swig-lispify "isl_bool" 'enumname)
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_cmp_element" #.(swig-lispify "isl_vec_cmp_element" 'function)) :int
  (vec1 :pointer)
  (vec2 :pointer)
  (pos :int))

(cffi:defcfun ("isl_vec_dump" #.(swig-lispify "isl_vec_dump" 'function)) :void
  (vec :pointer))

(cffi:defcfun ("isl_printer_print_vec" #.(swig-lispify "isl_printer_print_vec" 'function)) :pointer
  (printer :pointer)
  (vec :pointer))

(cffi:defcfun ("isl_vec_ceil" #.(swig-lispify "isl_vec_ceil" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_normalize" #.(swig-lispify "isl_vec_normalize" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_set_si" #.(swig-lispify "isl_vec_set_si" 'function)) :pointer
  (vec :pointer)
  (v :int))

(cffi:defcfun ("isl_vec_set_val" #.(swig-lispify "isl_vec_set_val" 'function)) :pointer
  (vec :pointer)
  (v :pointer))

(cffi:defcfun ("isl_vec_clr" #.(swig-lispify "isl_vec_clr" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_neg" #.(swig-lispify "isl_vec_neg" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_add" #.(swig-lispify "isl_vec_add" 'function)) :pointer
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_extend" #.(swig-lispify "isl_vec_extend" 'function)) :pointer
  (vec :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_zero_extend" #.(swig-lispify "isl_vec_zero_extend" 'function)) :pointer
  (vec :pointer)
  (size :unsigned-int))

(cffi:defcfun ("isl_vec_concat" #.(swig-lispify "isl_vec_concat" 'function)) :pointer
  (vec1 :pointer)
  (vec2 :pointer))

(cffi:defcfun ("isl_vec_sort" #.(swig-lispify "isl_vec_sort" 'function)) :pointer
  (vec :pointer))

(cffi:defcfun ("isl_vec_read_from_file" #.(swig-lispify "isl_vec_read_from_file" 'function)) :pointer
  (ctx :pointer)
  (input :pointer))

(cffi:defcfun ("isl_vec_drop_els" #.(swig-lispify "isl_vec_drop_els" 'function)) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_add_els" #.(swig-lispify "isl_vec_add_els" 'function)) :pointer
  (vec :pointer)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_insert_els" #.(swig-lispify "isl_vec_insert_els" 'function)) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_insert_zero_els" #.(swig-lispify "isl_vec_insert_zero_els" 'function)) :pointer
  (vec :pointer)
  (pos :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_vec_move_els" #.(swig-lispify "isl_vec_move_els" 'function)) :pointer
  (vec :pointer)
  (dst_col :unsigned-int)
  (src_col :unsigned-int)
  (n :unsigned-int))

(cffi:defcfun ("isl_version" #.(swig-lispify "isl_version" 'function)) :string)

(cffi:defcfun ("isl_vertex_get_ctx" #.(swig-lispify "isl_vertex_get_ctx" 'function)) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_id" #.(swig-lispify "isl_vertex_get_id" 'function)) :int
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_domain" #.(swig-lispify "isl_vertex_get_domain" 'function)) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_get_expr" #.(swig-lispify "isl_vertex_get_expr" 'function)) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_vertex_free" #.(swig-lispify "isl_vertex_free" 'function)) :pointer
  (vertex :pointer))

(cffi:defcfun ("isl_basic_set_compute_vertices" #.(swig-lispify "isl_basic_set_compute_vertices" 'function)) :pointer
  (bset :pointer))

(cffi:defcfun ("isl_vertices_get_ctx" #.(swig-lispify "isl_vertices_get_ctx" 'function)) :pointer
  (vertices :pointer))

(cffi:defcfun ("isl_vertices_get_n_vertices" #.(swig-lispify "isl_vertices_get_n_vertices" 'function)) :int
  (vertices :pointer))

(cffi:defcfun ("isl_vertices_foreach_vertex" #.(swig-lispify "isl_vertices_foreach_vertex" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (vertices :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_vertices_free" #.(swig-lispify "isl_vertices_free" 'function)) :pointer
  (vertices :pointer))

(cffi:defcfun ("isl_cell_get_ctx" #.(swig-lispify "isl_cell_get_ctx" 'function)) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_cell_get_domain" #.(swig-lispify "isl_cell_get_domain" 'function)) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_cell_foreach_vertex" #.(swig-lispify "isl_cell_foreach_vertex" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (cell :pointer)
  (fn :pointer)
  (user :pointer))

(cffi:defcfun ("isl_cell_free" #.(swig-lispify "isl_cell_free" 'function)) :pointer
  (cell :pointer))

(cffi:defcfun ("isl_vertices_foreach_cell" #.(swig-lispify "isl_vertices_foreach_cell" 'function)) #.(swig-lispify "isl_stat" 'enumname)
  (vertices :pointer)
  (fn :pointer)
  (user :pointer))

