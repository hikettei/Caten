(in-package :caten/nn)
;; TODO: FlashAttention2
(defmodel (Embedding (vocab-size embedding-dim))
    ((vocab-size vocab-size)
     (embedding-dim embedding-dim)
     (weight (normal `(,vocab-size ,embedding-dim) :mean 0 :std 1 :requires-grad t))))

(defmethod call ((op Embedding) &rest inputs)
  (st "A[~] -> A[~]" (inputs))
  (let ((x (car inputs)))
    (with-slots ((vocab-size vocab-size) (embedding-dim embedding-dim) (weight weight)) op
      (let* ((weight-shp `(1 1 ,vocab-size ,embedding-dim))
	     (big-shp (append (shape x) `(,vocab-size ,embedding-dim)))
	     (arange (!index-components `(1 1 ,vocab-size 1)))
	     (arange (!expand arange big-shp))
	     (idx (!expand (!reshape x (append (shape x) `(1 1))) big-shp))
	     (vals (!expand (!reshape weight weight-shp) big-shp)))
	(let* ((out (!sum (!where (!eq arange idx) vals (!const x 0)) :axis 2))
	       (shp (append (shape x) (list embedding-dim))))
	  (!reshape out shp))))))

(in-package :caten/nn.test)
;; Fuse Index-Components in Multiexpr
(deftest test-embedding
  (with-no-grad
    (if (= (ctx:getenv :JIT) 0)
	(skip "Requires JIT")
	(let* ((*default-order* :row)
	       (model (Embedding 10 10)))
	  (setf (slot-value model 'caten/nn::weight) (linspace `(10 10) 0.1 0.0))
	  (let ((r1 (elements (proceed (call model (linspace `(2 10) 0 1)))))
		(r2 (elements (proceed (call model (linspace `(2 10) 0 2))))))
	    (ok (every (~= 1e-6) r1 #(1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9
				      1.0 1.1 1.2 1.3000001 1.4 1.5 1.6 1.7 1.8000001 1.9 1.0 1.1 1.2 1.3000001 1.4
				      1.5 1.6 1.7 1.8000001 1.9)) "Embedding(10, 10)[1]")
	    (ok (every (~= 1e-6) r2 #(2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9
				      2.0 2.1000001 2.2 2.3 2.4 2.5 2.6000001 2.7 2.8 2.9 2.0 2.1000001 2.2 2.3 2.4
				      2.5 2.6000001 2.7 2.8 2.9))) "Embedding(10, 10)[2]")))))
