(defpackage :caten/polyhedral/auto-scheduler
  (:use :cl :caten/polyhedral/ir :cffi :caten/polyhedral/config)
  (:export :auto-schedule))

(in-package :caten/polyhedral/auto-scheduler)
;; [todo] deprcate
(defmethod schedule ((config Auto-Scheduler-Config) (pg Polyhedral-IR))
  (apply-schedule-options-global (auto-scheduler-schedule-options config))
  (let ((schedule-constraints (isl:schedule-constraints-on-domain (poly-domain pg))))
    (dolist (option (auto-scheduler-cost-functions config))
      (ecase option
        (:coincidence
         (setf schedule-constraints (isl:schedule-constraints-set-coincidence schedule-constraints (poly-dependencies pg))))
        (:proximity
         (setf schedule-constraints (isl:schedule-constraints-set-proximity schedule-constraints (poly-dependencies pg))))
        (:validity
         (setf schedule-constraints (isl:schedule-constraints-set-validity schedule-constraints (poly-dependencies pg))))))
    (isl:schedule-constraints-compute-schedule schedule-constraints)))
;; - Final goals here is to get a list of commands.
;; Stage1 (Minimal Things)
;; - [x] Parallelism
;; - [x] Interchange
;; - [ ] Unrolling
;; - [ ] Tiling
;; Stage2 (Advanced Kernel Fusion)
;; - [ ] ConvND+Activation+Pooling, Matmul+Softmax Fusion (create another entry point)
;; - [ ] Extract parallelism from the schedule above
;; - [ ] Adding Loop Interchange

(defun auto-schedule (scheduler poly)
  "
```
(auto-schedule scheduler poly)
```
An entrypoint for auto-scheduling.
"
  (declare (type Auto-Scheduler-Config scheduler) (type Polyhedral-IR poly))
  ;; Note(hikettei)
  ;; Plain schedules which is generated by caten/codegen doesn't require ISL Scheduler
  ;; But if (in the future) we implement more advanced Fusion Rules like Matmul+Softmax+Matmul, ConvND+Activation+Pooling
  ;; we may want isl scheduler to judge loop interchange?
  ;; First fix the loops to parallelize
  (caten/polyhedral/parallelize::apply-parallelize
   scheduler poly)
  ;; Unroll
  ;; Array Packing
  ;; 2D WMMA (8x8)
  ;; Tiling -> Segv
  poly)
